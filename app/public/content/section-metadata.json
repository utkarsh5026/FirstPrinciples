{
  "public\\content\\typescript\\type_system\\type_narrowing.md": {
    "path": "public\\content\\typescript\\type_system\\type_narrowing.md",
    "sections": [
      {
        "id": "type-narrowing-in-typescript-a-first-principles-approach",
        "title": "Type Narrowing in TypeScript: A First Principles Approach",
        "level": 1,
        "wordCount": 51
      },
      {
        "id": "the-fundamental-problem-type-narrowing-solves",
        "title": "The Fundamental Problem Type Narrowing Solves",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "type-narrowing-the-core-technique",
        "title": "Type Narrowing: The Core Technique",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "1-type-guards-the-typeof-operator",
        "title": "1. Type Guards: The `typeof` Operator",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "2-truthiness-checking",
        "title": "2. Truthiness Checking",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "3-equality-narrowing",
        "title": "3. Equality Narrowing",
        "level": 2,
        "wordCount": 25
      },
      {
        "id": "4-instanceof-narrowing",
        "title": "4. `instanceof` Narrowing",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "5-property-presence-checks",
        "title": "5. Property Presence Checks",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "6-discriminated-unions-the-pattern-matching-approach",
        "title": "6. Discriminated Unions: The Pattern Matching Approach",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "7-type-predicates-custom-type-guards",
        "title": "7. Type Predicates: Custom Type Guards",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "8-assertion-functions",
        "title": "8. Assertion Functions",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "9-the-never-type-and-exhaustiveness-checking",
        "title": "9. The `never` Type and Exhaustiveness Checking",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "10-the-non-null-assertion-operator",
        "title": "10. The Non-null Assertion Operator",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "11-optional-chaining-with-nullish-coalescing",
        "title": "11. Optional Chaining with Nullish Coalescing",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "practical-complex-example-api-response-processing",
        "title": "Practical Complex Example: API Response Processing",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "conclusion-the-power-and-limitations",
        "title": "Conclusion: The Power and Limitations",
        "level": 2,
        "wordCount": 165
      }
    ],
    "totalWordCount": 949,
    "estimatedReadingTime": 240000,
    "title": "type_narrowing",
    "frontmatter": {}
  },
  "public\\content\\typescript\\type_system\\type_guards.md": {
    "path": "public\\content\\typescript\\type_system\\type_guards.md",
    "sections": [
      {
        "id": "understanding-typescript-type-assertions-and-type-guards-from-first-principles",
        "title": "Understanding TypeScript Type Assertions and Type Guards from First Principles",
        "level": 1,
        "wordCount": 52
      },
      {
        "id": "the-fundamental-problem-type-uncertainty",
        "title": "The Fundamental Problem: Type Uncertainty",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "type-assertions-trust-me-i-know-what-this-is",
        "title": "Type Assertions: \"Trust Me, I Know What This Is\"",
        "level": 2,
        "wordCount": 292
      },
      {
        "id": "type-guards-lets-check-what-this-is",
        "title": "Type Guards: \"Let's Check What This Is\"",
        "level": 2,
        "wordCount": 223
      },
      {
        "id": "discriminated-unions-a-design-pattern-that-works-with-type-guards",
        "title": "Discriminated Unions: A Design Pattern that Works with Type Guards",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "combining-type-guards-with-generic-functions",
        "title": "Combining Type Guards with Generic Functions",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "real-world-example-parsing-and-validating-json-configuration",
        "title": "Real-World Example: Parsing and Validating JSON Configuration",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "type-assertion-functions-a-middle-ground",
        "title": "Type Assertion Functions: A Middle Ground",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "type-guards-vs-type-assertions-when-to-use-each",
        "title": "Type Guards vs. Type Assertions: When to Use Each",
        "level": 2,
        "wordCount": 171
      },
      {
        "id": "advanced-type-guard-techniques",
        "title": "Advanced Type Guard Techniques",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "common-pitfalls-and-how-to-avoid-them",
        "title": "Common Pitfalls and How to Avoid Them",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "conclusion-making-typescript-more-robust-with-type-assertions-and-guards",
        "title": "Conclusion: Making TypeScript More Robust with Type Assertions and Guards",
        "level": 2,
        "wordCount": 196
      }
    ],
    "totalWordCount": 1354,
    "estimatedReadingTime": 360000,
    "title": "type_guards",
    "frontmatter": {}
  },
  "public\\content\\typescript\\type_system\\tuples.md": {
    "path": "public\\content\\typescript\\type_system\\tuples.md",
    "sections": [
      {
        "id": "typescript-tuples-and-fixed-length-arrays-from-first-principles",
        "title": "TypeScript Tuples and Fixed-Length Arrays: From First Principles",
        "level": 1,
        "wordCount": 8
      },
      {
        "id": "understanding-collections-in-programming",
        "title": "Understanding Collections in Programming",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "arrays-in-typescript-adding-type-safety",
        "title": "Arrays in TypeScript: Adding Type Safety",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "what-are-tuples",
        "title": "What Are Tuples?",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "basic-tuple-syntax-in-typescript",
        "title": "Basic Tuple Syntax in TypeScript",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "tuple-vs-array-understanding-the-difference",
        "title": "Tuple vs. Array: Understanding the Difference",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "real-world-examples-of-tuples",
        "title": "Real-World Examples of Tuples",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "tuple-operations-in-typescript",
        "title": "Tuple Operations in TypeScript",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "tuple-limitations-in-typescript",
        "title": "Tuple Limitations in TypeScript",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "named-tuples-adding-semantic-meaning",
        "title": "Named Tuples: Adding Semantic Meaning",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "optional-elements-in-tuples",
        "title": "Optional Elements in Tuples",
        "level": 2,
        "wordCount": 24
      },
      {
        "id": "rest-elements-in-tuples",
        "title": "Rest Elements in Tuples",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "fixed-length-arrays",
        "title": "Fixed-Length Arrays",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "creating-utility-types-for-tuples",
        "title": "Creating Utility Types for Tuples",
        "level": 2,
        "wordCount": 16
      },
      {
        "id": "advanced-example-type-safe-function-arguments-and-tuple-inference",
        "title": "Advanced Example: Type-Safe Function Arguments and Tuple Inference",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "real-world-application-finite-state-machines-with-tuples",
        "title": "Real-World Application: Finite State Machines with Tuples",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "performance-and-memory-considerations",
        "title": "Performance and Memory Considerations",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "best-practices-for-using-tuples",
        "title": "Best Practices for Using Tuples",
        "level": 2,
        "wordCount": 153
      },
      {
        "id": "comparing-tuples-with-other-typescript-data-structures",
        "title": "Comparing Tuples with Other TypeScript Data Structures",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 155
      }
    ],
    "totalWordCount": 1213,
    "estimatedReadingTime": 300000,
    "title": "tuples",
    "frontmatter": {}
  },
  "public\\content\\typescript\\type_system\\null_and_undefined.md": {
    "path": "public\\content\\typescript\\type_system\\null_and_undefined.md",
    "sections": [
      {
        "id": "null-and-undefined-handling-from-first-principles",
        "title": "Null and Undefined Handling: From First Principles",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "what-are-null-and-undefined",
        "title": "What Are Null and Undefined?",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "origins-in-javascript",
        "title": "Origins in JavaScript",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "the-problems-with-null-and-undefined",
        "title": "The Problems with Null and Undefined",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "nullundefined-reference-errors",
        "title": "Null/Undefined Reference Errors",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "providing-default-values",
        "title": "Providing Default Values",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "type-systems-and-null-handling",
        "title": "Type Systems and Null Handling",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "handling-nulls-in-collections",
        "title": "Handling Nulls in Collections",
        "level": 2,
        "wordCount": 21
      },
      {
        "id": "null-vs-undefined-when-to-use-each",
        "title": "Null vs. Undefined: When to Use Each",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "advanced-pattern-the-null-object-pattern",
        "title": "Advanced Pattern: The Null Object Pattern",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "null-handling-in-asynchronous-code",
        "title": "Null Handling in Asynchronous Code",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "best-practices-for-nullundefined-handling",
        "title": "Best Practices for Null/Undefined Handling",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 127
      }
    ],
    "totalWordCount": 995,
    "estimatedReadingTime": 240000,
    "title": "null_and_undefined",
    "frontmatter": {}
  },
  "public\\content\\typescript\\type_system\\non_null_assertion.md": {
    "path": "public\\content\\typescript\\type_system\\non_null_assertion.md",
    "sections": [
      {
        "id": "typescript-non-null-assertion-operator-a-first-principles-explanation",
        "title": "TypeScript Non-null Assertion Operator: A First Principles Explanation",
        "level": 1,
        "wordCount": 50
      },
      {
        "id": "the-problem-type-safety-vs-runtime-reality",
        "title": "The Problem: Type Safety vs. Runtime Reality",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "conditional-checks-the-standard-solution",
        "title": "Conditional Checks: The Standard Solution",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "the-non-null-assertion-operator-when-you-know-more",
        "title": "The Non-null Assertion Operator: When You Know More",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "how-it-works-type-transformation",
        "title": "How It Works: Type Transformation",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "concrete-example-dom-operations",
        "title": "Concrete Example: DOM Operations",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "optional-chaining-vs-non-null-assertion",
        "title": "Optional Chaining vs. Non-null Assertion",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "function-parameters-example",
        "title": "Function Parameters Example",
        "level": 2,
        "wordCount": 11
      },
      {
        "id": "practical-example-api-responses",
        "title": "Practical Example: API Responses",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "the-risks-runtime-reality",
        "title": "The Risks: Runtime Reality",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "optional-class-properties-example",
        "title": "Optional Class Properties Example",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "when-to-avoid-it-enforcing-null-checks",
        "title": "When to Avoid It: Enforcing Null Checks",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "best-practices-using-it-responsibly",
        "title": "Best Practices: Using It Responsibly",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 115
      }
    ],
    "totalWordCount": 814,
    "estimatedReadingTime": 240000,
    "title": "non_null_assertion",
    "frontmatter": {}
  },
  "public\\content\\typescript\\type_system\\literal_types.md": {
    "path": "public\\content\\typescript\\type_system\\literal_types.md",
    "sections": [
      {
        "id": "typescript-tuples-and-fixed-length-arrays-from-first-principles",
        "title": "TypeScript Tuples and Fixed-Length Arrays: From First Principles",
        "level": 1,
        "wordCount": 8
      },
      {
        "id": "understanding-collections-in-programming",
        "title": "Understanding Collections in Programming",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "arrays-in-typescript-adding-type-safety",
        "title": "Arrays in TypeScript: Adding Type Safety",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "what-are-tuples",
        "title": "What Are Tuples?",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "basic-tuple-syntax-in-typescript",
        "title": "Basic Tuple Syntax in TypeScript",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "tuple-vs-array-understanding-the-difference",
        "title": "Tuple vs. Array: Understanding the Difference",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "real-world-examples-of-tuples",
        "title": "Real-World Examples of Tuples",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "tuple-operations-in-typescript",
        "title": "Tuple Operations in TypeScript",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "tuple-limitations-in-typescript",
        "title": "Tuple Limitations in TypeScript",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "named-tuples-adding-semantic-meaning",
        "title": "Named Tuples: Adding Semantic Meaning",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "optional-elements-in-tuples",
        "title": "Optional Elements in Tuples",
        "level": 2,
        "wordCount": 24
      },
      {
        "id": "rest-elements-in-tuples",
        "title": "Rest Elements in Tuples",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "fixed-length-arrays",
        "title": "Fixed-Length Arrays",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "creating-utility-types-for-tuples",
        "title": "Creating Utility Types for Tuples",
        "level": 2,
        "wordCount": 16
      },
      {
        "id": "advanced-example-type-safe-function-arguments-and-tuple-inference",
        "title": "Advanced Example: Type-Safe Function Arguments and Tuple Inference",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "real-world-application-finite-state-machines-with-tuples",
        "title": "Real-World Application: Finite State Machines with Tuples",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "performance-and-memory-considerations",
        "title": "Performance and Memory Considerations",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "best-practices-for-using-tuples",
        "title": "Best Practices for Using Tuples",
        "level": 2,
        "wordCount": 153
      },
      {
        "id": "comparing-tuples-with-other-typescript-data-structures",
        "title": "Comparing Tuples with Other TypeScript Data Structures",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 155
      }
    ],
    "totalWordCount": 1213,
    "estimatedReadingTime": 300000,
    "title": "literal_types",
    "frontmatter": {}
  },
  "public\\content\\typescript\\type_system\\keyof_and_typeof.md": {
    "path": "public\\content\\typescript\\type_system\\keyof_and_typeof.md",
    "sections": [
      {
        "id": "understanding-typescripts-keyof-and-typeof-operators-from-first-principles",
        "title": "Understanding TypeScript's `keyof` and `typeof` Operators from First Principles",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "the-typeof-operator",
        "title": "The `typeof` Operator",
        "level": 2,
        "wordCount": 158
      },
      {
        "id": "the-keyof-operator",
        "title": "The `keyof` Operator",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "practical-applications",
        "title": "Practical Applications",
        "level": 2,
        "wordCount": 136
      },
      {
        "id": "understanding-at-a-deeper-level",
        "title": "Understanding at a Deeper Level",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "advanced-patterns",
        "title": "Advanced Patterns",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 125
      }
    ],
    "totalWordCount": 723,
    "estimatedReadingTime": 180000,
    "title": "keyof_and_typeof",
    "frontmatter": {}
  },
  "public\\content\\typescript\\type_system\\enums.md": {
    "path": "public\\content\\typescript\\type_system\\enums.md",
    "sections": [
      {
        "id": "typescript-enums-a-first-principles-explanation",
        "title": "TypeScript Enums: A First Principles Explanation",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "what-is-an-enum",
        "title": "What Is an Enum?",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "why-do-we-need-enums",
        "title": "Why Do We Need Enums?",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "basic-enum-syntax",
        "title": "Basic Enum Syntax",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "numeric-enums-whats-actually-happening",
        "title": "Numeric Enums: What's Actually Happening",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "customizing-enum-values",
        "title": "Customizing Enum Values",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "auto-incrementation-with-custom-values",
        "title": "Auto-Incrementation with Custom Values",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "string-enums",
        "title": "String Enums",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "heterogeneous-enums",
        "title": "Heterogeneous Enums",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "const-enums",
        "title": "Const Enums",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "computed-and-constant-enum-members",
        "title": "Computed and Constant Enum Members",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "enums-as-types",
        "title": "Enums as Types",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "union-types-vs-enums",
        "title": "Union Types vs. Enums",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "ambient-enums",
        "title": "Ambient Enums",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "practical-use-cases-for-enums",
        "title": "Practical Use Cases for Enums",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "best-practices-for-using-enums",
        "title": "Best Practices for Using Enums",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "compiled-javascript-output",
        "title": "Compiled JavaScript Output",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 105
      }
    ],
    "totalWordCount": 962,
    "estimatedReadingTime": 240000,
    "title": "enums",
    "frontmatter": {}
  },
  "public\\content\\typescript\\type_system\\any_and_unknown.md": {
    "path": "public\\content\\typescript\\type_system\\any_and_unknown.md",
    "sections": [
      {
        "id": "understanding-typescripts-any-and-unknown-types-from-first-principles",
        "title": "Understanding TypeScript's \"any\" and \"unknown\" Types from First Principles",
        "level": 1,
        "wordCount": 61
      },
      {
        "id": "the-fundamental-concept-of-type-safety",
        "title": "The Fundamental Concept of Type Safety",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "the-any-type-maximum-flexibility-minimum-safety",
        "title": "The \"any\" Type: Maximum Flexibility, Minimum Safety",
        "level": 2,
        "wordCount": 315
      },
      {
        "id": "the-unknown-type-safe-alternative-to-any",
        "title": "The \"unknown\" Type: Safe Alternative to \"any\"",
        "level": 2,
        "wordCount": 282
      },
      {
        "id": "practical-comparison-any-vs-unknown",
        "title": "Practical Comparison: `any` vs. `unknown`",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "advanced-usage-patterns",
        "title": "Advanced Usage Patterns",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "type-assertions-vs-type-casting",
        "title": "Type Assertions vs. Type Casting",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "best-practices-when-to-use-which-type",
        "title": "Best Practices: When to Use Which Type",
        "level": 2,
        "wordCount": 132
      },
      {
        "id": "a-real-world-complex-example-parsing-configuration-files",
        "title": "A Real-World Complex Example: Parsing Configuration Files",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 142
      }
    ],
    "totalWordCount": 1320,
    "estimatedReadingTime": 360000,
    "title": "any_and_unknown",
    "frontmatter": {}
  },
  "public\\content\\typescript\\object_oriented\\inheritance_and_extends.md": {
    "path": "public\\content\\typescript\\object_oriented\\inheritance_and_extends.md",
    "sections": [
      {
        "id": "understanding-inheritance-and-the-extends-keyword-from-first-principles",
        "title": "Understanding Inheritance and the extends Keyword from First Principles",
        "level": 1,
        "wordCount": 43
      },
      {
        "id": "what-is-inheritance",
        "title": "What is Inheritance?",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "the-extends-keyword-in-typescript",
        "title": "The `extends` Keyword in TypeScript",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "the-super-keyword",
        "title": "The `super` Keyword",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "method-overriding",
        "title": "Method Overriding",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "protected-and-private-members",
        "title": "Protected and Private Members",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "abstract-classes",
        "title": "Abstract Classes",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "interfaces-and-implementation-inheritance",
        "title": "Interfaces and Implementation Inheritance",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "the-prototype-chain-how-inheritance-works-under-the-hood",
        "title": "The Prototype Chain: How Inheritance Works Under the Hood",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "real-world-example-building-a-ui-component-system",
        "title": "Real-World Example: Building a UI Component System",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "common-inheritance-patterns",
        "title": "Common Inheritance Patterns",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "common-challenges-and-best-practices",
        "title": "Common Challenges and Best Practices",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "advanced-inheritance-with-generics",
        "title": "Advanced Inheritance with Generics",
        "level": 2,
        "wordCount": 22
      },
      {
        "id": "inheritance-in-modern-typescript-applications",
        "title": "Inheritance in Modern TypeScript Applications",
        "level": 2,
        "wordCount": 27
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 113
      }
    ],
    "totalWordCount": 994,
    "estimatedReadingTime": 240000,
    "title": "inheritance_and_extends",
    "frontmatter": {}
  },
  "public\\content\\typescript\\object_oriented\\classes_and_access_modifiers.md": {
    "path": "public\\content\\typescript\\object_oriented\\classes_and_access_modifiers.md",
    "sections": [
      {
        "id": "classes-and-access-modifiers-in-typescript-from-first-principles",
        "title": "Classes and Access Modifiers in TypeScript: From First Principles",
        "level": 1,
        "wordCount": 9
      },
      {
        "id": "what-are-classes",
        "title": "What Are Classes?",
        "level": 2,
        "wordCount": 172
      },
      {
        "id": "understanding-access-modifiers",
        "title": "Understanding Access Modifiers",
        "level": 2,
        "wordCount": 248
      },
      {
        "id": "class-inheritance",
        "title": "Class Inheritance",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "parameter-properties-shorthand",
        "title": "Parameter Properties Shorthand",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "readonly-properties",
        "title": "Readonly Properties",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "static-properties-and-methods",
        "title": "Static Properties and Methods",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "abstract-classes",
        "title": "Abstract Classes",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "private-vs-private-fields-ecmascript-private-fields",
        "title": "Private vs. # Private Fields (ECMAScript Private Fields)",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "real-world-example-user-management-system",
        "title": "Real-World Example: User Management System",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 186
      }
    ],
    "totalWordCount": 1046,
    "estimatedReadingTime": 300000,
    "title": "classes_and_access_modifiers",
    "frontmatter": {}
  },
  "public\\content\\typescript\\object_oriented\\abstract_classes.md": {
    "path": "public\\content\\typescript\\object_oriented\\abstract_classes.md",
    "sections": [
      {
        "id": "abstract-classes-and-methods-in-typescript-a-first-principles-approach",
        "title": "Abstract Classes and Methods in TypeScript: A First Principles Approach",
        "level": 1,
        "wordCount": 45
      },
      {
        "id": "what-is-abstraction-in-programming",
        "title": "What is Abstraction in Programming?",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "classes-in-typescript-a-quick-refresher",
        "title": "Classes in TypeScript: A Quick Refresher",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "what-are-abstract-classes",
        "title": "What Are Abstract Classes?",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "why-use-abstract-classes",
        "title": "Why Use Abstract Classes?",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "creating-abstract-classes-in-typescript",
        "title": "Creating Abstract Classes in TypeScript",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "abstract-methods",
        "title": "Abstract Methods",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "extending-abstract-classes",
        "title": "Extending Abstract Classes",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "a-more-comprehensive-example",
        "title": "A More Comprehensive Example",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "important-properties-of-abstract-classes",
        "title": "Important Properties of Abstract Classes",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "abstract-classes-vs-interfaces",
        "title": "Abstract Classes vs. Interfaces",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "when-to-use-abstract-classes-vs-interfaces",
        "title": "When to Use Abstract Classes vs. Interfaces",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "real-world-example-form-controls",
        "title": "Real-World Example: Form Controls",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "common-gotchas-and-best-practices",
        "title": "Common Gotchas and Best Practices",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 125
      }
    ],
    "totalWordCount": 1095,
    "estimatedReadingTime": 300000,
    "title": "abstract_classes",
    "frontmatter": {}
  },
  "public\\content\\typescript\\generics\\higher_order_type.md": {
    "path": "public\\content\\typescript\\generics\\higher_order_type.md",
    "sections": [
      {
        "id": "higher-order-type-patterns-in-typescript-from-first-principles",
        "title": "Higher-Order Type Patterns in TypeScript: From First Principles",
        "level": 1,
        "wordCount": 63
      },
      {
        "id": "understanding-first-principles",
        "title": "Understanding First Principles",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "1-mapped-types-the-foundation",
        "title": "1. Mapped Types: The Foundation",
        "level": 2,
        "wordCount": 136
      },
      {
        "id": "2-conditional-types-making-decisions-at-the-type-level",
        "title": "2. Conditional Types: Making Decisions at the Type Level",
        "level": 2,
        "wordCount": 176
      },
      {
        "id": "3-recursive-types-building-complex-structures",
        "title": "3. Recursive Types: Building Complex Structures",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "4-template-literal-types-string-manipulation-at-the-type-level",
        "title": "4. Template Literal Types: String Manipulation at the Type Level",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "5-higher-order-type-functions-combining-patterns",
        "title": "5. Higher-Order Type Functions: Combining Patterns",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "6-advanced-real-world-examples",
        "title": "6. Advanced Real-World Examples",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "7-beyond-the-basics-type-level-programming-techniques",
        "title": "7. Beyond the Basics: Type-Level Programming Techniques",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "conclusion-the-power-and-limits-of-higher-order-types",
        "title": "Conclusion: The Power and Limits of Higher-Order Types",
        "level": 2,
        "wordCount": 222
      }
    ],
    "totalWordCount": 1048,
    "estimatedReadingTime": 300000,
    "title": "higher_order_type",
    "frontmatter": {}
  },
  "public\\content\\typescript\\generics\\generic_utility_types.md": {
    "path": "public\\content\\typescript\\generics\\generic_utility_types.md",
    "sections": [
      {
        "id": "understanding-typescripts-generic-utility-types-implementation-deep-dive",
        "title": "Understanding TypeScript's Generic Utility Types: Implementation Deep Dive",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "the-building-blocks",
        "title": "The Building Blocks",
        "level": 2,
        "wordCount": 168
      },
      {
        "id": "basic-utility-types",
        "title": "Basic Utility Types",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "extraction-and-filtering-utility-types",
        "title": "Extraction and Filtering Utility Types",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "function-related-utility-types",
        "title": "Function-Related Utility Types",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "conditional-utility-types",
        "title": "Conditional Utility Types",
        "level": 2,
        "wordCount": 12
      },
      {
        "id": "advanced-utility-types-implementation",
        "title": "Advanced Utility Types Implementation",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "implementing-template-literal-utility-types",
        "title": "Implementing Template Literal Utility Types",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "implementing-conditional-mapping-utility-types",
        "title": "Implementing Conditional Mapping Utility Types",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "implementing-function-related-utility-types",
        "title": "Implementing Function-Related Utility Types",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "implementing-deep-equality-utility-types",
        "title": "Implementing Deep Equality Utility Types",
        "level": 2,
        "wordCount": 19
      },
      {
        "id": "understanding-the-typescript-compilers-implementation",
        "title": "Understanding the TypeScript Compiler's Implementation",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "applying-utility-types-in-real-world-scenarios",
        "title": "Applying Utility Types in Real-World Scenarios",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 144
      }
    ],
    "totalWordCount": 948,
    "estimatedReadingTime": 240000,
    "title": "generic_utility_types",
    "frontmatter": {}
  },
  "public\\content\\typescript\\generics\\generic_type_inference.md": {
    "path": "public\\content\\typescript\\generics\\generic_type_inference.md",
    "sections": [
      {
        "id": "generic-type-inference-in-typescript",
        "title": "Generic Type Inference in TypeScript",
        "level": 1,
        "wordCount": 45
      },
      {
        "id": "what-is-type-inference",
        "title": "What is Type Inference?",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "generic-type-inference-the-basics",
        "title": "Generic Type Inference: The Basics",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "how-typescript-determines-generic-types",
        "title": "How TypeScript Determines Generic Types",
        "level": 2,
        "wordCount": 137
      },
      {
        "id": "advanced-generic-inference",
        "title": "Advanced Generic Inference",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "generic-classes-and-type-inference",
        "title": "Generic Classes and Type Inference",
        "level": 2,
        "wordCount": 24
      },
      {
        "id": "contextual-typing-with-generics",
        "title": "Contextual Typing with Generics",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "type-inference-with-generic-type-aliases",
        "title": "Type Inference with Generic Type Aliases",
        "level": 2,
        "wordCount": 24
      },
      {
        "id": "real-world-examples",
        "title": "Real-World Examples",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "type-inference-limitations-and-challenges",
        "title": "Type Inference Limitations and Challenges",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "best-practices-for-working-with-generic-type-inference",
        "title": "Best Practices for Working with Generic Type Inference",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 130
      }
    ],
    "totalWordCount": 990,
    "estimatedReadingTime": 240000,
    "title": "generic_type_inference",
    "frontmatter": {}
  },
  "public\\content\\typescript\\generics\\generic_parameters.md": {
    "path": "public\\content\\typescript\\generics\\generic_parameters.md",
    "sections": [
      {
        "id": "working-with-generic-parameters-in-typescript",
        "title": "Working with Generic Parameters in TypeScript",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "the-fundamental-concept",
        "title": "The Fundamental Concept",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "declaring-generic-parameters",
        "title": "Declaring Generic Parameters",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "using-generic-functions",
        "title": "Using Generic Functions",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "multiple-generic-parameters",
        "title": "Multiple Generic Parameters",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "constraining-generic-parameters",
        "title": "Constraining Generic Parameters",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "default-type-parameters",
        "title": "Default Type Parameters",
        "level": 2,
        "wordCount": 11
      },
      {
        "id": "generic-classes",
        "title": "Generic Classes",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "generic-interfaces",
        "title": "Generic Interfaces",
        "level": 2,
        "wordCount": 9
      },
      {
        "id": "generic-type-aliases",
        "title": "Generic Type Aliases",
        "level": 2,
        "wordCount": 10
      },
      {
        "id": "advanced-usage-patterns",
        "title": "Advanced Usage Patterns",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 25
      },
      {
        "id": "common-pitfalls-and-tips",
        "title": "Common Pitfalls and Tips",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "best-practices",
        "title": "Best Practices",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 126
      }
    ],
    "totalWordCount": 788,
    "estimatedReadingTime": 240000,
    "title": "generic_parameters",
    "frontmatter": {}
  },
  "public\\content\\typescript\\generics\\generic_functions.md": {
    "path": "public\\content\\typescript\\generics\\generic_functions.md",
    "sections": [
      {
        "id": "typescript-generic-functions-from-first-principles",
        "title": "TypeScript Generic Functions: From First Principles",
        "level": 1,
        "wordCount": 42
      },
      {
        "id": "the-problem-type-safe-reusability",
        "title": "The Problem: Type-Safe Reusability",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "the-solution-generic-functions",
        "title": "The Solution: Generic Functions",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "multiple-type-parameters",
        "title": "Multiple Type Parameters",
        "level": 2,
        "wordCount": 27
      },
      {
        "id": "constraints-on-type-parameters",
        "title": "Constraints on Type Parameters",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "default-type-parameters",
        "title": "Default Type Parameters",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "generic-arrow-functions",
        "title": "Generic Arrow Functions",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "practical-example-a-filter-function",
        "title": "Practical Example: A Filter Function",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "generic-function-as-methods",
        "title": "Generic Function as Methods",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "generic-function-overloads",
        "title": "Generic Function Overloads",
        "level": 2,
        "wordCount": 15
      },
      {
        "id": "working-with-the-element-type-of-arrays",
        "title": "Working with the Element Type of Arrays",
        "level": 2,
        "wordCount": 19
      },
      {
        "id": "conditional-types-with-generics",
        "title": "Conditional Types with Generics",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "generic-function-type-signatures",
        "title": "Generic Function Type Signatures",
        "level": 2,
        "wordCount": 10
      },
      {
        "id": "common-mistakes-with-generic-functions",
        "title": "Common Mistakes with Generic Functions",
        "level": 2,
        "wordCount": 21
      },
      {
        "id": "real-world-example-a-data-manager",
        "title": "Real-World Example: A Data Manager",
        "level": 2,
        "wordCount": 25
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 73
      }
    ],
    "totalWordCount": 621,
    "estimatedReadingTime": 180000,
    "title": "generic_functions",
    "frontmatter": {}
  },
  "public\\content\\typescript\\generics\\generic_defaults.md": {
    "path": "public\\content\\typescript\\generics\\generic_defaults.md",
    "sections": [
      {
        "id": "generic-defaults-in-typescript-a-comprehensive-guide",
        "title": "Generic Defaults in TypeScript: A Comprehensive Guide",
        "level": 1,
        "wordCount": 44
      },
      {
        "id": "the-basic-concept-of-generic-defaults",
        "title": "The Basic Concept of Generic Defaults",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "why-generic-defaults-matter",
        "title": "Why Generic Defaults Matter",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "basic-usage-examples",
        "title": "Basic Usage Examples",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "multiple-generic-parameters-with-defaults",
        "title": "Multiple Generic Parameters with Defaults",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "default-generic-constraints",
        "title": "Default Generic Constraints",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "advanced-examples-and-patterns",
        "title": "Advanced Examples and Patterns",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "generic-interfaces-with-defaults",
        "title": "Generic Interfaces with Defaults",
        "level": 2,
        "wordCount": 11
      },
      {
        "id": "type-aliases-with-default-generics",
        "title": "Type Aliases with Default Generics",
        "level": 2,
        "wordCount": 13
      },
      {
        "id": "conditional-types-with-default-generics",
        "title": "Conditional Types with Default Generics",
        "level": 2,
        "wordCount": 19
      },
      {
        "id": "choosing-good-defaults-best-practices",
        "title": "Choosing Good Defaults: Best Practices",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "inferring-generic-parameters-with-defaults",
        "title": "Inferring Generic Parameters with Defaults",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "limitations-and-edge-cases",
        "title": "Limitations and Edge Cases",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "real-world-application-generic-component-system",
        "title": "Real-World Application: Generic Component System",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 118
      }
    ],
    "totalWordCount": 798,
    "estimatedReadingTime": 240000,
    "title": "generic_defaults",
    "frontmatter": {}
  },
  "public\\content\\typescript\\generics\\generic_constraints.md": {
    "path": "public\\content\\typescript\\generics\\generic_constraints.md",
    "sections": [
      {
        "id": "typescript-generic-constraints-and-defaults-from-first-principles",
        "title": "TypeScript Generic Constraints and Defaults: From First Principles",
        "level": 1,
        "wordCount": 74
      },
      {
        "id": "understanding-generic-types-the-foundation",
        "title": "Understanding Generic Types: The Foundation",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "generic-constraints-setting-boundaries",
        "title": "Generic Constraints: Setting Boundaries",
        "level": 2,
        "wordCount": 164
      },
      {
        "id": "generic-defaults-providing-fallback-types",
        "title": "Generic Defaults: Providing Fallback Types",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "combining-constraints-and-defaults",
        "title": "Combining Constraints and Defaults",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "advanced-patterns-and-practical-applications",
        "title": "Advanced Patterns and Practical Applications",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 129
      }
    ],
    "totalWordCount": 874,
    "estimatedReadingTime": 240000,
    "title": "generic_constraints",
    "frontmatter": {}
  },
  "public\\content\\typescript\\generics\\generic_classes.md": {
    "path": "public\\content\\typescript\\generics\\generic_classes.md",
    "sections": [
      {
        "id": "generic-classes-and-methods-in-typescript-from-first-principles",
        "title": "Generic Classes and Methods in TypeScript: From First Principles",
        "level": 1,
        "wordCount": 31
      },
      {
        "id": "understanding-the-need-for-generics",
        "title": "Understanding the Need for Generics",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "enter-generics-a-first-definition",
        "title": "Enter Generics: A First Definition",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "the-mechanics-of-generic-type-parameters",
        "title": "The Mechanics of Generic Type Parameters",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "generic-classes-the-fundamentals",
        "title": "Generic Classes: The Fundamentals",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "multiple-type-parameters",
        "title": "Multiple Type Parameters",
        "level": 2,
        "wordCount": 13
      },
      {
        "id": "generic-constraints-limiting-type-parameters",
        "title": "Generic Constraints: Limiting Type Parameters",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "default-type-parameters",
        "title": "Default Type Parameters",
        "level": 2,
        "wordCount": 11
      },
      {
        "id": "generic-methods-within-classes",
        "title": "Generic Methods Within Classes",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "practical-examples-building-a-collection-class",
        "title": "Practical Examples: Building a Collection Class",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "generic-interfaces-defining-contracts",
        "title": "Generic Interfaces: Defining Contracts",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "conditional-types-advanced-type-relationships",
        "title": "Conditional Types: Advanced Type Relationships",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "practical-applications-and-best-practices",
        "title": "Practical Applications and Best Practices",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "real-world-example-a-data-service",
        "title": "Real-World Example: A Data Service",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 110
      }
    ],
    "totalWordCount": 790,
    "estimatedReadingTime": 240000,
    "title": "generic_classes",
    "frontmatter": {}
  },
  "public\\content\\typescript\\foundations\\union_and_intersection.md": {
    "path": "public\\content\\typescript\\foundations\\union_and_intersection.md",
    "sections": [
      {
        "id": "understanding-union-and-intersection-types-from-first-principles",
        "title": "Understanding Union and Intersection Types from First Principles",
        "level": 1,
        "wordCount": 43
      },
      {
        "id": "foundations-in-set-theory",
        "title": "Foundations in Set Theory",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "union-types-in-typescript",
        "title": "Union Types in TypeScript",
        "level": 2,
        "wordCount": 203
      },
      {
        "id": "intersection-types-in-typescript",
        "title": "Intersection Types in TypeScript",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "advanced-patterns-and-use-cases",
        "title": "Advanced Patterns and Use Cases",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "common-pitfalls-and-gotchas",
        "title": "Common Pitfalls and Gotchas",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "real-world-examples-and-patterns",
        "title": "Real-World Examples and Patterns",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 159
      }
    ],
    "totalWordCount": 925,
    "estimatedReadingTime": 240000,
    "title": "union_and_intersection",
    "frontmatter": {}
  },
  "public\\content\\typescript\\foundations\\type_annotations.md": {
    "path": "public\\content\\typescript\\foundations\\type_annotations.md",
    "sections": [
      {
        "id": "type-annotations-and-type-inference-in-typescript",
        "title": "Type Annotations and Type Inference in TypeScript",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "type-annotations-explicitly-telling-typescript-whats-what",
        "title": "Type Annotations: Explicitly Telling TypeScript What's What",
        "level": 2,
        "wordCount": 275
      },
      {
        "id": "type-inference-let-typescript-figure-it-out",
        "title": "Type Inference: Let TypeScript Figure It Out",
        "level": 2,
        "wordCount": 265
      },
      {
        "id": "when-to-use-annotations-vs-inference",
        "title": "When to Use Annotations vs. Inference",
        "level": 2,
        "wordCount": 150
      },
      {
        "id": "examples-comparing-annotation-and-inference",
        "title": "Examples: Comparing Annotation and Inference",
        "level": 2,
        "wordCount": 153
      },
      {
        "id": "the-balance-best-practices",
        "title": "The Balance: Best Practices",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "common-pitfalls-and-how-to-avoid-them",
        "title": "Common Pitfalls and How to Avoid Them",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "advanced-type-inference",
        "title": "Advanced Type Inference",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 121
      }
    ],
    "totalWordCount": 1261,
    "estimatedReadingTime": 360000,
    "title": "type_annotations",
    "frontmatter": {}
  },
  "public\\content\\typescript\\foundations\\type_alias.md": {
    "path": "public\\content\\typescript\\foundations\\type_alias.md",
    "sections": [
      {
        "id": "type-aliases-and-primitive-types-in-typescript",
        "title": "Type Aliases and Primitive Types in TypeScript",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "primitive-types-in-typescript",
        "title": "Primitive Types in TypeScript",
        "level": 2,
        "wordCount": 289
      },
      {
        "id": "type-aliases-in-typescript",
        "title": "Type Aliases in TypeScript",
        "level": 2,
        "wordCount": 314
      },
      {
        "id": "type-aliases-vs-interfaces",
        "title": "Type Aliases vs. Interfaces",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 139
      }
    ],
    "totalWordCount": 986,
    "estimatedReadingTime": 240000,
    "title": "type_alias",
    "frontmatter": {}
  },
  "public\\content\\typescript\\foundations\\typescript_vs_javascript.md": {
    "path": "public\\content\\typescript\\foundations\\typescript_vs_javascript.md",
    "sections": [
      {
        "id": "typescript-vs-javascript-a-first-principles-exploration",
        "title": "TypeScript vs JavaScript: A First Principles Exploration",
        "level": 1,
        "wordCount": 27
      },
      {
        "id": "the-origin-story-starting-with-javascript",
        "title": "The Origin Story: Starting with JavaScript",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "the-birth-of-typescript",
        "title": "The Birth of TypeScript",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "core-difference-type-system",
        "title": "Core Difference: Type System",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "the-compilation-process",
        "title": "The Compilation Process",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "type-inference-smart-typing",
        "title": "Type Inference: Smart Typing",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "advanced-type-features",
        "title": "Advanced Type Features",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "typescripts-module-system",
        "title": "TypeScript's Module System",
        "level": 2,
        "wordCount": 24
      },
      {
        "id": "practical-benefits-of-typescript",
        "title": "Practical Benefits of TypeScript",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "real-world-comparison",
        "title": "Real-World Comparison",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "the-compilation-continuum",
        "title": "The Compilation Continuum",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "when-to-choose-each-language",
        "title": "When to Choose Each Language",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 89
      }
    ],
    "totalWordCount": 830,
    "estimatedReadingTime": 240000,
    "title": "typescript_vs_javascript",
    "frontmatter": {}
  },
  "public\\content\\typescript\\foundations\\objects_and_interfaces.md": {
    "path": "public\\content\\typescript\\foundations\\objects_and_interfaces.md",
    "sections": [
      {
        "id": "understanding-typescript-objects-and-interfaces-from-first-principles",
        "title": "Understanding TypeScript Objects and Interfaces from First Principles",
        "level": 1,
        "wordCount": 51
      },
      {
        "id": "what-is-a-type-system",
        "title": "What is a Type System?",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "typescript-objects-the-foundation",
        "title": "TypeScript Objects - The Foundation",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "typescript-interfaces-defining-contracts",
        "title": "TypeScript Interfaces - Defining Contracts",
        "level": 2,
        "wordCount": 152
      },
      {
        "id": "extending-interfaces",
        "title": "Extending Interfaces",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "interface-vs-type-alias",
        "title": "Interface vs. Type Alias",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "using-interfaces-with-functions",
        "title": "Using Interfaces with Functions",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "index-signatures",
        "title": "Index Signatures",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "generic-interfaces",
        "title": "Generic Interfaces",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "interfaces-with-classes",
        "title": "Interfaces with Classes",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "practical-example-building-a-task-management-system",
        "title": "Practical Example: Building a Task Management System",
        "level": 2,
        "wordCount": 129
      },
      {
        "id": "advanced-interface-techniques",
        "title": "Advanced Interface Techniques",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 160
      }
    ],
    "totalWordCount": 1113,
    "estimatedReadingTime": 300000,
    "title": "objects_and_interfaces",
    "frontmatter": {}
  },
  "public\\content\\typescript\\advanced_types\\utility_types.md": {
    "path": "public\\content\\typescript\\advanced_types\\utility_types.md",
    "sections": [
      {
        "id": "typescript-utility-types-from-first-principles",
        "title": "TypeScript Utility Types: From First Principles",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "understanding-type-transformations",
        "title": "Understanding Type Transformations",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "partialt-making-all-properties-optional",
        "title": "Partial<T>: Making All Properties Optional",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "requiredt-making-all-properties-required",
        "title": "Required<T>: Making All Properties Required",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "readonlyt-making-all-properties-immutable",
        "title": "Readonly<T>: Making All Properties Immutable",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "recordk-t-creating-a-type-with-specified-keys-and-values",
        "title": "Record<K, T>: Creating a Type with Specified Keys and Values",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "pickt-k-selecting-specific-properties",
        "title": "Pick<T, K>: Selecting Specific Properties",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "omitt-k-excluding-specific-properties",
        "title": "Omit<T, K>: Excluding Specific Properties",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "excludet-u-removing-types-from-a-union",
        "title": "Exclude<T, U>: Removing Types from a Union",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "extractt-u-extracting-types-from-a-union",
        "title": "Extract<T, U>: Extracting Types from a Union",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "nonnullablet-removing-null-and-undefined",
        "title": "NonNullable<T>: Removing null and undefined",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "returntypet-extracting-the-return-type-of-a-function",
        "title": "ReturnType<T>: Extracting the Return Type of a Function",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "parameterst-extracting-parameter-types-of-a-function",
        "title": "Parameters<T>: Extracting Parameter Types of a Function",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "constructorparameterst-extracting-constructor-parameters",
        "title": "ConstructorParameters<T>: Extracting Constructor Parameters",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "instancetypet-extracting-instance-types-from-constructors",
        "title": "InstanceType<T>: Extracting Instance Types from Constructors",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "thisparametertypet-and-omitthisparametert-handling-this-context",
        "title": "ThisParameterType<T> and OmitThisParameter<T>: Handling 'this' Context",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "combining-utility-types-for-complex-transformations",
        "title": "Combining Utility Types for Complex Transformations",
        "level": 2,
        "wordCount": 17
      },
      {
        "id": "creating-custom-utility-types",
        "title": "Creating Custom Utility Types",
        "level": 2,
        "wordCount": 21
      },
      {
        "id": "real-world-example-form-handling",
        "title": "Real-World Example: Form Handling",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "conclusion-why-utility-types-matter",
        "title": "Conclusion: Why Utility Types Matter",
        "level": 2,
        "wordCount": 142
      }
    ],
    "totalWordCount": 1057,
    "estimatedReadingTime": 300000,
    "title": "utility_types",
    "frontmatter": {}
  },
  "public\\content\\typescript\\advanced_types\\template_literal.md": {
    "path": "public\\content\\typescript\\advanced_types\\template_literal.md",
    "sections": [
      {
        "id": "typescript-template-literal-types-from-first-principles",
        "title": "TypeScript Template Literal Types: From First Principles",
        "level": 1,
        "wordCount": 35
      },
      {
        "id": "1-the-foundation-string-literals-in-typescript",
        "title": "1. The Foundation: String Literals in TypeScript",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "2-understanding-template-literals-in-javascript",
        "title": "2. Understanding Template Literals in JavaScript",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "3-introducing-template-literal-types",
        "title": "3. Introducing Template Literal Types",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "4-practical-example-css-properties",
        "title": "4. Practical Example: CSS Properties",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "5-advanced-manipulating-string-literal-types",
        "title": "5. Advanced: Manipulating String Literal Types",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "6-inferring-from-template-literal-types",
        "title": "6. Inferring from Template Literal Types",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "7-real-world-example-event-handling",
        "title": "7. Real-World Example: Event Handling",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "8-pattern-matching-with-template-literals",
        "title": "8. Pattern Matching with Template Literals",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "9-creating-custom-type-safe-functions",
        "title": "9. Creating Custom Type-Safe Functions",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "10-limitations-and-best-practices",
        "title": "10. Limitations and Best Practices",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 101
      }
    ],
    "totalWordCount": 678,
    "estimatedReadingTime": 180000,
    "title": "template_literal",
    "frontmatter": {}
  },
  "public\\content\\typescript\\advanced_types\\recursive_types.md": {
    "path": "public\\content\\typescript\\advanced_types\\recursive_types.md",
    "sections": [
      {
        "id": "recursive-types-in-typescript-a-first-principles-explanation",
        "title": "Recursive Types in TypeScript: A First Principles Explanation",
        "level": 1,
        "wordCount": 29
      },
      {
        "id": "what-are-types",
        "title": "What Are Types?",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "the-fundamental-building-blocks-of-types",
        "title": "The Fundamental Building Blocks of Types",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "what-makes-a-type-recursive",
        "title": "What Makes a Type Recursive?",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "the-essence-of-recursive-types",
        "title": "The Essence of Recursive Types",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "why-do-we-need-recursive-types",
        "title": "Why Do We Need Recursive Types?",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "common-recursive-data-structures",
        "title": "Common Recursive Data Structures",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "json-a-perfect-example-of-recursive-types",
        "title": "JSON: A Perfect Example of Recursive Types",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "practical-applications-of-recursive-types",
        "title": "Practical Applications of Recursive Types",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "potential-pitfalls-with-recursive-types",
        "title": "Potential Pitfalls with Recursive Types",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "advanced-techniques-with-recursive-types",
        "title": "Advanced Techniques with Recursive Types",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "real-world-example-a-document-editor-model",
        "title": "Real-World Example: A Document Editor Model",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 110
      }
    ],
    "totalWordCount": 1021,
    "estimatedReadingTime": 300000,
    "title": "recursive_types",
    "frontmatter": {}
  },
  "public\\content\\typescript\\advanced_types\\mapped_types.md": {
    "path": "public\\content\\typescript\\advanced_types\\mapped_types.md",
    "sections": [
      {
        "id": "typescript-mapped-types-and-transformations-from-first-principles",
        "title": "TypeScript Mapped Types and Transformations: From First Principles",
        "level": 1,
        "wordCount": 28
      },
      {
        "id": "1-what-are-types-in-typescript",
        "title": "1. What Are Types in TypeScript?",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "2-the-concept-of-mapping",
        "title": "2. The Concept of Mapping",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "3-mapped-types-the-basics",
        "title": "3. Mapped Types: The Basics",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "4-built-in-mapped-types",
        "title": "4. Built-in Mapped Types",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "5-creating-custom-mapped-types",
        "title": "5. Creating Custom Mapped Types",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "6-property-modifiers",
        "title": "6. Property Modifiers",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "7-key-remapping-with-as",
        "title": "7. Key Remapping with `as`",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "8-advanced-transformations",
        "title": "8. Advanced Transformations",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "9-practical-use-cases",
        "title": "9. Practical Use Cases",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "10-typescript-template-literal-types",
        "title": "10. TypeScript Template Literal Types",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "11-understanding-the-implementation-of-built-in-mapped-types",
        "title": "11. Understanding the Implementation of Built-in Mapped Types",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "12-performance-considerations",
        "title": "12. Performance Considerations",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "13-putting-it-all-together-a-complete-example",
        "title": "13. Putting It All Together: A Complete Example",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 171
      }
    ],
    "totalWordCount": 998,
    "estimatedReadingTime": 240000,
    "title": "mapped_types",
    "frontmatter": {}
  },
  "public\\content\\typescript\\advanced_types\\index_types.md": {
    "path": "public\\content\\typescript\\advanced_types\\index_types.md",
    "sections": [
      {
        "id": "typescript-index-types-and-lookup-types-from-first-principles",
        "title": "TypeScript Index Types and Lookup Types: From First Principles",
        "level": 1,
        "wordCount": 57
      },
      {
        "id": "1-understanding-index-types",
        "title": "1. Understanding Index Types",
        "level": 2,
        "wordCount": 274
      },
      {
        "id": "2-lookup-types",
        "title": "2. Lookup Types",
        "level": 2,
        "wordCount": 171
      },
      {
        "id": "3-practical-applications",
        "title": "3. Practical Applications",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "4-advanced-patterns-with-index-types-and-lookup-types",
        "title": "4. Advanced Patterns with Index Types and Lookup Types",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "5-best-practices-and-tips",
        "title": "5. Best Practices and Tips",
        "level": 2,
        "wordCount": 134
      },
      {
        "id": "6-real-world-example-type-safe-api-client",
        "title": "6. Real-World Example: Type-Safe API Client",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 139
      }
    ],
    "totalWordCount": 1018,
    "estimatedReadingTime": 300000,
    "title": "index_types",
    "frontmatter": {}
  },
  "public\\content\\typescript\\advanced_types\\discriminated_unions.md": {
    "path": "public\\content\\typescript\\advanced_types\\discriminated_unions.md",
    "sections": [
      {
        "id": "discriminated-unions-in-typescript-a-first-principles-explanation",
        "title": "Discriminated Unions in TypeScript: A First Principles Explanation",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "what-are-discriminated-unions",
        "title": "What Are Discriminated Unions?",
        "level": 2,
        "wordCount": 147
      },
      {
        "id": "constructing-a-discriminated-union",
        "title": "Constructing a Discriminated Union",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "using-discriminated-unions",
        "title": "Using Discriminated Unions",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "why-use-discriminated-unions",
        "title": "Why Use Discriminated Unions?",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "exhaustiveness-checking",
        "title": "Exhaustiveness Checking",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "advanced-patterns-with-discriminated-unions",
        "title": "Advanced Patterns with Discriminated Unions",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "real-world-application-form-validation",
        "title": "Real-World Application: Form Validation",
        "level": 2,
        "wordCount": 17
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 133
      }
    ],
    "totalWordCount": 628,
    "estimatedReadingTime": 180000,
    "title": "discriminated_unions",
    "frontmatter": {}
  },
  "public\\content\\typescript\\advanced_types\\conditional_types.md": {
    "path": "public\\content\\typescript\\advanced_types\\conditional_types.md",
    "sections": [
      {
        "id": "typescript-conditional-types-from-first-principles",
        "title": "TypeScript Conditional Types: From First Principles",
        "level": 1,
        "wordCount": 24
      },
      {
        "id": "1-what-are-types-in-typescript",
        "title": "1. What Are Types in TypeScript?",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "2-the-concept-of-conditions",
        "title": "2. The Concept of Conditions",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "3-conditional-types-the-basics",
        "title": "3. Conditional Types: The Basics",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "4-the-extends-keyword-a-deeper-look",
        "title": "4. The `extends` Keyword: A Deeper Look",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "5-practical-use-cases-for-conditional-types",
        "title": "5. Practical Use Cases for Conditional Types",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "6-the-infer-keyword",
        "title": "6. The `infer` Keyword",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "7-distributive-conditional-types",
        "title": "7. Distributive Conditional Types",
        "level": 2,
        "wordCount": 154
      },
      {
        "id": "8-recursive-conditional-types",
        "title": "8. Recursive Conditional Types",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "9-conditional-types-with-mapped-types",
        "title": "9. Conditional Types with Mapped Types",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "10-built-in-conditional-types-in-typescript",
        "title": "10. Built-in Conditional Types in TypeScript",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "11-advanced-conditional-types",
        "title": "11. Advanced Conditional Types",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "12-conditional-types-for-error-handling",
        "title": "12. Conditional Types for Error Handling",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "13-infer-with-multiple-variables",
        "title": "13. `infer` with Multiple Variables",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "14-working-with-any-and-unknown-in-conditional-types",
        "title": "14. Working with `any` and `unknown` in Conditional Types",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "15-conditional-types-with-generic-classes",
        "title": "15. Conditional Types with Generic Classes",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "16-putting-it-all-together-a-complete-example",
        "title": "16. Putting It All Together: A Complete Example",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "17-type-inference-in-conditional-types",
        "title": "17. Type Inference in Conditional Types",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "18-leveraging-typescripts-inference-algorithm",
        "title": "18. Leveraging TypeScript's Inference Algorithm",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "19-performance-considerations",
        "title": "19. Performance Considerations",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "20-advanced-pattern-matching-with-conditional-types",
        "title": "20. Advanced Pattern Matching with Conditional Types",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 209
      }
    ],
    "totalWordCount": 1530,
    "estimatedReadingTime": 420000,
    "title": "conditional_types",
    "frontmatter": {}
  },
  "public\\content\\typescript\\advanced_types\\branded_and_nominal.md": {
    "path": "public\\content\\typescript\\advanced_types\\branded_and_nominal.md",
    "sections": [
      {
        "id": "typescript-brandednominal-types-a-first-principles-explanation",
        "title": "TypeScript Branded/Nominal Types: A First Principles Explanation",
        "level": 1,
        "wordCount": 32
      },
      {
        "id": "the-type-system-problem-structural-vs-nominal-typing",
        "title": "The Type System Problem: Structural vs. Nominal Typing",
        "level": 2,
        "wordCount": 206
      },
      {
        "id": "understanding-branded-types-adding-a-brand-to-distinguish-types",
        "title": "Understanding Branded Types: Adding a \"Brand\" to Distinguish Types",
        "level": 2,
        "wordCount": 140
      },
      {
        "id": "creating-and-using-branded-types-in-practice",
        "title": "Creating and Using Branded Types in Practice",
        "level": 2,
        "wordCount": 164
      },
      {
        "id": "real-world-applications-of-branded-types",
        "title": "Real-World Applications of Branded Types",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "advanced-techniques-with-branded-types",
        "title": "Advanced Techniques with Branded Types",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "limitations-and-considerations",
        "title": "Limitations and Considerations",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "best-practices-for-branded-types",
        "title": "Best Practices for Branded Types",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "practical-implementation-pattern",
        "title": "Practical Implementation Pattern",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 135
      }
    ],
    "totalWordCount": 1202,
    "estimatedReadingTime": 300000,
    "title": "branded_and_nominal",
    "frontmatter": {}
  },
  "public\\content\\tailwind\\layout\\width_and_height_constraints.md": {
    "path": "public\\content\\tailwind\\layout\\width_and_height_constraints.md",
    "sections": [
      {
        "id": "understanding-tailwind-css-minmax-width-and-height-constraints-from-first-principles",
        "title": "Understanding Tailwind CSS Min/Max Width and Height Constraints from First Principles",
        "level": 1,
        "wordCount": 34
      },
      {
        "id": "the-foundation-css-layout-model",
        "title": "The Foundation: CSS Layout Model",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "the-problem-of-flexible-layouts",
        "title": "The Problem of Flexible Layouts",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "tailwinds-minmax-constraint-classes",
        "title": "Tailwind's Min/Max Constraint Classes",
        "level": 2,
        "wordCount": 236
      },
      {
        "id": "understanding-the-content-based-values",
        "title": "Understanding the Content-Based Values",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "practical-application-responsive-card-layout",
        "title": "Practical Application: Responsive Card Layout",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "advanced-example-sidebar-layout-with-constraints",
        "title": "Advanced Example: Sidebar Layout with Constraints",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "custom-values-vs-predefined-scales",
        "title": "Custom Values vs. Predefined Scales",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "common-patterns-and-use-cases",
        "title": "Common Patterns and Use Cases",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "potential-pitfalls-and-solutions",
        "title": "Potential Pitfalls and Solutions",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "combining-with-flexbox-and-grid",
        "title": "Combining with Flexbox and Grid",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "beyond-the-basics-responsive-adaptations",
        "title": "Beyond the Basics: Responsive Adaptations",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 90
      }
    ],
    "totalWordCount": 1168,
    "estimatedReadingTime": 300000,
    "title": "width_and_height_constraints",
    "frontmatter": {}
  },
  "public\\content\\tailwind\\layout\\container_and_page_structure.md": {
    "path": "public\\content\\tailwind\\layout\\container_and_page_structure.md",
    "sections": [
      {
        "id": "understanding-tailwind-containers-and-basic-page-structure",
        "title": "Understanding Tailwind Containers and Basic Page Structure",
        "level": 1,
        "wordCount": 27
      },
      {
        "id": "what-is-a-container-in-tailwind-css",
        "title": "What is a Container in Tailwind CSS?",
        "level": 2,
        "wordCount": 267
      },
      {
        "id": "basic-page-structure-with-tailwind",
        "title": "Basic Page Structure with Tailwind",
        "level": 2,
        "wordCount": 185
      },
      {
        "id": "common-layout-patterns-with-containers",
        "title": "Common Layout Patterns with Containers",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "advanced-container-concepts",
        "title": "Advanced Container Concepts",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "practical-example-building-a-blog-post-page",
        "title": "Practical Example: Building a Blog Post Page",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "container-best-practices",
        "title": "Container Best Practices",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 116
      }
    ],
    "totalWordCount": 925,
    "estimatedReadingTime": 240000,
    "title": "container_and_page_structure",
    "frontmatter": {}
  },
  "public\\content\\tailwind\\layout\\box_model_control.md": {
    "path": "public\\content\\tailwind\\layout\\box_model_control.md",
    "sections": [
      {
        "id": "understanding-tailwind-css-box-model-controls-from-first-principles",
        "title": "Understanding Tailwind CSS Box Model Controls from First Principles",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "what-is-the-box-model",
        "title": "What is the Box Model?",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "box-sizing-the-foundation-of-predictable-layouts",
        "title": "Box-Sizing: The Foundation of Predictable Layouts",
        "level": 2,
        "wordCount": 165
      },
      {
        "id": "padding-in-tailwind-consistent-spacing-inside-elements",
        "title": "Padding in Tailwind: Consistent Spacing Inside Elements",
        "level": 2,
        "wordCount": 267
      },
      {
        "id": "borders-in-tailwind-defining-element-boundaries",
        "title": "Borders in Tailwind: Defining Element Boundaries",
        "level": 2,
        "wordCount": 162
      },
      {
        "id": "putting-it-all-together-how-box-sizing-padding-and-borders-work-in-harmony",
        "title": "Putting It All Together: How Box-Sizing, Padding, and Borders Work in Harmony",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "why-this-matters-real-world-impact",
        "title": "Why This Matters: Real-World Impact",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 104
      }
    ],
    "totalWordCount": 1053,
    "estimatedReadingTime": 300000,
    "title": "box_model_control",
    "frontmatter": {}
  },
  "public\\content\\tailwind\\fundamentals\\utility_first_css.md": {
    "path": "public\\content\\tailwind\\fundamentals\\utility_first_css.md",
    "sections": [
      {
        "id": "understanding-tailwind-css-a-first-principles-approach",
        "title": "Understanding Tailwind CSS: A First Principles Approach",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "traditional-css-approach-vs-utility-first-css",
        "title": "Traditional CSS Approach vs. Utility-First CSS",
        "level": 2,
        "wordCount": 215
      },
      {
        "id": "the-first-principles-of-tailwind",
        "title": "The First Principles of Tailwind",
        "level": 2,
        "wordCount": 198
      },
      {
        "id": "the-mindset-shift",
        "title": "The Mindset Shift",
        "level": 2,
        "wordCount": 216
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 218
      },
      {
        "id": "the-benefits-of-tailwinds-approach",
        "title": "The Benefits of Tailwind's Approach",
        "level": 2,
        "wordCount": 165
      },
      {
        "id": "the-challenges-and-solutions",
        "title": "The Challenges and Solutions",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "extending-and-customizing-tailwind",
        "title": "Extending and Customizing Tailwind",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 126
      }
    ],
    "totalWordCount": 1349,
    "estimatedReadingTime": 360000,
    "title": "utility_first_css",
    "frontmatter": {}
  },
  "public\\content\\tailwind\\fundamentals\\utility_classes.md": {
    "path": "public\\content\\tailwind\\fundamentals\\utility_classes.md",
    "sections": [
      {
        "id": "tailwind-css-core-utility-classes-for-layout-display-width-and-height",
        "title": "Tailwind CSS Core Utility Classes for Layout: Display, Width, and Height",
        "level": 1,
        "wordCount": 61
      },
      {
        "id": "display-utility-classes",
        "title": "Display Utility Classes",
        "level": 2,
        "wordCount": 291
      },
      {
        "id": "width-utility-classes",
        "title": "Width Utility Classes",
        "level": 2,
        "wordCount": 214
      },
      {
        "id": "height-utility-classes",
        "title": "Height Utility Classes",
        "level": 2,
        "wordCount": 129
      },
      {
        "id": "combining-display-width-and-height",
        "title": "Combining Display, Width, and Height",
        "level": 2,
        "wordCount": 191
      },
      {
        "id": "practical-tips-and-best-practices",
        "title": "Practical Tips and Best Practices",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "common-layout-patterns",
        "title": "Common Layout Patterns",
        "level": 2,
        "wordCount": 12
      },
      {
        "id": "using-layout-classes-with-javascript",
        "title": "Using Layout Classes with JavaScript",
        "level": 2,
        "wordCount": 18
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 143
      }
    ],
    "totalWordCount": 1142,
    "estimatedReadingTime": 300000,
    "title": "utility_classes",
    "frontmatter": {}
  },
  "public\\content\\tailwind\\fundamentals\\configuration.md": {
    "path": "public\\content\\tailwind\\fundamentals\\configuration.md",
    "sections": [
      {
        "id": "creating-a-tailwind-css-configuration-file-from-first-principles",
        "title": "Creating a Tailwind CSS Configuration File from First Principles",
        "level": 1,
        "wordCount": 35
      },
      {
        "id": "what-is-a-tailwind-configuration-file",
        "title": "What is a Tailwind Configuration File?",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "creating-a-basic-configuration-file",
        "title": "Creating a Basic Configuration File",
        "level": 2,
        "wordCount": 196
      },
      {
        "id": "customizing-the-theme",
        "title": "Customizing the Theme",
        "level": 2,
        "wordCount": 150
      },
      {
        "id": "customizing-specific-theme-categories",
        "title": "Customizing Specific Theme Categories",
        "level": 2,
        "wordCount": 224
      },
      {
        "id": "advanced-configuration-options",
        "title": "Advanced Configuration Options",
        "level": 2,
        "wordCount": 138
      },
      {
        "id": "adding-plugins",
        "title": "Adding Plugins",
        "level": 2,
        "wordCount": 18
      },
      {
        "id": "environment-specific-configurations",
        "title": "Environment-Specific Configurations",
        "level": 2,
        "wordCount": 11
      },
      {
        "id": "a-complete-example",
        "title": "A Complete Example",
        "level": 2,
        "wordCount": 12
      },
      {
        "id": "practical-tips-for-configuration-file-management",
        "title": "Practical Tips for Configuration File Management",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "troubleshooting-common-configuration-issues",
        "title": "Troubleshooting Common Configuration Issues",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 128
      }
    ],
    "totalWordCount": 1177,
    "estimatedReadingTime": 300000,
    "title": "configuration",
    "frontmatter": {}
  },
  "public\\content\\redis\\fundamentals\\value_size_limitations_and_considerations.md": {
    "path": "public\\content\\redis\\fundamentals\\value_size_limitations_and_considerations.md",
    "sections": [
      {
        "id": "redis-value-size-limitations-and-considerations",
        "title": "Redis Value Size Limitations and Considerations",
        "level": 1,
        "wordCount": 27
      },
      {
        "id": "what-is-redis",
        "title": "What is Redis?",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "memory-as-the-fundamental-constraint",
        "title": "Memory as the Fundamental Constraint",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "redis-value-size-limit",
        "title": "Redis Value Size Limit",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "practical-considerations-beyond-the-theoretical-limit",
        "title": "Practical Considerations Beyond the Theoretical Limit",
        "level": 2,
        "wordCount": 160
      },
      {
        "id": "redis-data-type-specific-considerations",
        "title": "Redis Data Type Specific Considerations",
        "level": 2,
        "wordCount": 125
      },
      {
        "id": "practical-strategies-for-handling-large-values",
        "title": "Practical Strategies for Handling Large Values",
        "level": 2,
        "wordCount": 147
      },
      {
        "id": "redis-configuration-parameters-that-affect-value-size",
        "title": "Redis Configuration Parameters That Affect Value Size",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "real-world-considerations-and-best-practices",
        "title": "Real-World Considerations and Best Practices",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 112
      }
    ],
    "totalWordCount": 1031,
    "estimatedReadingTime": 300000,
    "title": "value_size_limitations_and_considerations",
    "frontmatter": {}
  },
  "public\\content\\redis\\fundamentals\\understanding_redis_and_its_design_philosophy.md": {
    "path": "public\\content\\redis\\fundamentals\\understanding_redis_and_its_design_philosophy.md",
    "sections": [
      {
        "id": "understanding-redis-from-first-principles",
        "title": "Understanding Redis from First Principles",
        "level": 1,
        "wordCount": 49
      },
      {
        "id": "what-is-redis-at-its-core",
        "title": "What is Redis at its core?",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "the-foundational-philosophy-of-redis",
        "title": "The Foundational Philosophy of Redis",
        "level": 2,
        "wordCount": 275
      },
      {
        "id": "redis-core-data-structures",
        "title": "Redis Core Data Structures",
        "level": 2,
        "wordCount": 217
      },
      {
        "id": "redis-persistence-balancing-speed-and-durability",
        "title": "Redis Persistence: Balancing Speed and Durability",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "redis-as-a-distributed-system",
        "title": "Redis as a Distributed System",
        "level": 2,
        "wordCount": 159
      },
      {
        "id": "redis-use-cases-explained",
        "title": "Redis Use Cases Explained",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "redis-memory-management-and-optimization",
        "title": "Redis Memory Management and Optimization",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "transactions-in-redis",
        "title": "Transactions in Redis",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "redis-modules-extending-core-functionality",
        "title": "Redis Modules: Extending Core Functionality",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 111
      }
    ],
    "totalWordCount": 1342,
    "estimatedReadingTime": 360000,
    "title": "understanding_redis_and_its_design_philosophy",
    "frontmatter": {}
  },
  "public\\content\\redis\\fundamentals\\ttl_and_key_expiration.md": {
    "path": "public\\content\\redis\\fundamentals\\ttl_and_key_expiration.md",
    "sections": [
      {
        "id": "understanding-ttl-and-key-expiration-in-redis-from-first-principles",
        "title": "Understanding TTL and Key Expiration in Redis from First Principles",
        "level": 1,
        "wordCount": 44
      },
      {
        "id": "what-is-redis",
        "title": "What is Redis?",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "the-problem-of-memory-management",
        "title": "The Problem of Memory Management",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "what-is-ttl-time-to-live",
        "title": "What is TTL (Time To Live)?",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "key-expiration-fundamentals",
        "title": "Key Expiration Fundamentals",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "how-to-set-ttl-in-redis",
        "title": "How to Set TTL in Redis",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "checking-remaining-ttl",
        "title": "Checking Remaining TTL",
        "level": 2,
        "wordCount": 21
      },
      {
        "id": "removing-expiration",
        "title": "Removing Expiration",
        "level": 2,
        "wordCount": 15
      },
      {
        "id": "how-expiration-works-internally",
        "title": "How Expiration Works Internally",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "practical-examples-of-ttl-usage",
        "title": "Practical Examples of TTL Usage",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "ttl-memory-implications",
        "title": "TTL Memory Implications",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "programming-with-redis-ttl-python-example",
        "title": "Programming with Redis TTL - Python Example",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "advanced-ttl-patterns",
        "title": "Advanced TTL Patterns",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 107
      }
    ],
    "totalWordCount": 1058,
    "estimatedReadingTime": 300000,
    "title": "ttl_and_key_expiration",
    "frontmatter": {}
  },
  "public\\content\\redis\\fundamentals\\setting_up_redis_development_environment.md": {
    "path": "public\\content\\redis\\fundamentals\\setting_up_redis_development_environment.md",
    "sections": [
      {
        "id": "setting-up-a-redis-development-environment-from-first-principles",
        "title": "Setting up a Redis Development Environment from First Principles",
        "level": 1,
        "wordCount": 53
      },
      {
        "id": "what-is-redis",
        "title": "What is Redis?",
        "level": 2,
        "wordCount": 201
      },
      {
        "id": "why-use-redis",
        "title": "Why Use Redis?",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "setting-up-your-redis-development-environment",
        "title": "Setting Up Your Redis Development Environment",
        "level": 2,
        "wordCount": 224
      },
      {
        "id": "basic-redis-configuration",
        "title": "Basic Redis Configuration",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "connecting-to-redis",
        "title": "Connecting to Redis",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "using-redis-cli-for-development",
        "title": "Using Redis CLI for Development",
        "level": 2,
        "wordCount": 21
      },
      {
        "id": "redis-data-types",
        "title": "Redis Data Types",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "development-best-practices",
        "title": "Development Best Practices",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "common-development-pitfalls",
        "title": "Common Development Pitfalls",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "debugging-redis-in-development",
        "title": "Debugging Redis in Development",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 125
      }
    ],
    "totalWordCount": 1112,
    "estimatedReadingTime": 300000,
    "title": "setting_up_redis_development_environment",
    "frontmatter": {}
  },
  "public\\content\\redis\\fundamentals\\redis_protocol_specification.md": {
    "path": "public\\content\\redis\\fundamentals\\redis_protocol_specification.md",
    "sections": [
      {
        "id": "understanding-the-redis-protocol-resp-specification-from-first-principles",
        "title": "Understanding the Redis Protocol (RESP) Specification from First Principles",
        "level": 1,
        "wordCount": 9
      },
      {
        "id": "what-is-a-protocol-and-why-does-redis-need-one",
        "title": "What is a Protocol and Why Does Redis Need One?",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "resp-a-text-based-protocol-with-simple-types",
        "title": "RESP: A Text-Based Protocol with Simple Types",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "the-basic-data-types-in-resp",
        "title": "The Basic Data Types in RESP",
        "level": 2,
        "wordCount": 326
      },
      {
        "id": "how-resp-is-used-in-practice",
        "title": "How RESP is Used in Practice",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "implementing-resp-code-examples",
        "title": "Implementing RESP: Code Examples",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "a-simple-redis-client-implementation",
        "title": "A Simple Redis Client Implementation",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "resp2-vs-resp3-evolution-of-the-protocol",
        "title": "RESP2 vs RESP3: Evolution of the Protocol",
        "level": 2,
        "wordCount": 119
      },
      {
        "id": "why-resps-design-makes-sense-first-principles-analysis",
        "title": "Why RESP's Design Makes Sense: First Principles Analysis",
        "level": 2,
        "wordCount": 159
      },
      {
        "id": "practical-implications",
        "title": "Practical Implications",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 68
      }
    ],
    "totalWordCount": 1211,
    "estimatedReadingTime": 300000,
    "title": "redis_protocol_specification",
    "frontmatter": {}
  },
  "public\\content\\redis\\fundamentals\\redis_persistence_options_rdb_and_aof.md": {
    "path": "public\\content\\redis\\fundamentals\\redis_persistence_options_rdb_and_aof.md",
    "sections": [
      {
        "id": "redis-persistence-rdb-and-aof-explained-from-first-principles",
        "title": "Redis Persistence: RDB and AOF Explained From First Principles",
        "level": 1,
        "wordCount": 26
      },
      {
        "id": "understanding-the-problem-why-persistence-matters",
        "title": "Understanding the Problem: Why Persistence Matters",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "first-principles-of-data-persistence",
        "title": "First Principles of Data Persistence",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "rdb-redis-database-point-in-time-snapshots",
        "title": "RDB (Redis Database): Point-in-Time Snapshots",
        "level": 2,
        "wordCount": 296
      },
      {
        "id": "aof-append-only-file-recording-operations",
        "title": "AOF (Append-Only File): Recording Operations",
        "level": 2,
        "wordCount": 354
      },
      {
        "id": "combining-rdb-and-aof-best-of-both-worlds",
        "title": "Combining RDB and AOF: Best of Both Worlds",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "real-world-example-e-commerce-session-store",
        "title": "Real-World Example: E-commerce Session Store",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "practical-implementation-examples",
        "title": "Practical Implementation Examples",
        "level": 2,
        "wordCount": 27
      },
      {
        "id": "monitoring-persistence",
        "title": "Monitoring Persistence",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "understanding-tradeoffs-making-the-right-choice",
        "title": "Understanding Tradeoffs: Making the Right Choice",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 69
      }
    ],
    "totalWordCount": 1294,
    "estimatedReadingTime": 360000,
    "title": "redis_persistence_options_rdb_and_aof",
    "frontmatter": {}
  },
  "public\\content\\redis\\fundamentals\\key_naming_conventions_and_best_practices.md": {
    "path": "public\\content\\redis\\fundamentals\\key_naming_conventions_and_best_practices.md",
    "sections": [
      {
        "id": "redis-key-naming-conventions-and-best-practices",
        "title": "Redis Key Naming Conventions and Best Practices",
        "level": 1,
        "wordCount": 28
      },
      {
        "id": "understanding-redis-keys-the-foundation",
        "title": "Understanding Redis Keys: The Foundation",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "why-key-naming-matters",
        "title": "Why Key Naming Matters",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "first-principles-of-redis-key-design",
        "title": "First Principles of Redis Key Design",
        "level": 2,
        "wordCount": 157
      },
      {
        "id": "best-practices-with-examples",
        "title": "Best Practices with Examples",
        "level": 2,
        "wordCount": 177
      },
      {
        "id": "practical-implementations",
        "title": "Practical Implementations",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "tools-and-commands-for-working-with-keys",
        "title": "Tools and Commands for Working with Keys",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "common-anti-patterns-to-avoid",
        "title": "Common Anti-Patterns to Avoid",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "real-world-example-social-media-application",
        "title": "Real-World Example: Social Media Application",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 97
      }
    ],
    "totalWordCount": 826,
    "estimatedReadingTime": 240000,
    "title": "key_naming_conventions_and_best_practices",
    "frontmatter": {}
  },
  "public\\content\\redis\\fundamentals\\basic_redis_cli_commands_and_interaction.md": {
    "path": "public\\content\\redis\\fundamentals\\basic_redis_cli_commands_and_interaction.md",
    "sections": [
      {
        "id": "redis-understanding-from-first-principles",
        "title": "Redis: Understanding from First Principles",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "what-is-redis-fundamentally",
        "title": "What is Redis, Fundamentally?",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "the-redis-cli-your-interface-to-redis",
        "title": "The Redis CLI: Your Interface to Redis",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "basic-data-operations-the-crud-model",
        "title": "Basic Data Operations: The CRUD Model",
        "level": 2,
        "wordCount": 268
      },
      {
        "id": "data-types-in-redis",
        "title": "Data Types in Redis",
        "level": 2,
        "wordCount": 225
      },
      {
        "id": "key-management-and-database-operations",
        "title": "Key Management and Database Operations",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "transactions-in-redis",
        "title": "Transactions in Redis",
        "level": 2,
        "wordCount": 19
      },
      {
        "id": "pubsub-messaging",
        "title": "Pub/Sub Messaging",
        "level": 2,
        "wordCount": 18
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "understanding-rediss-performance-characteristics",
        "title": "Understanding Redis's Performance Characteristics",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 82
      }
    ],
    "totalWordCount": 1046,
    "estimatedReadingTime": 300000,
    "title": "basic_redis_cli_commands_and_interaction",
    "frontmatter": {}
  },
  "public\\content\\redis\\fundamentals\\basic_configuration_parameters.md": {
    "path": "public\\content\\redis\\fundamentals\\basic_configuration_parameters.md",
    "sections": [
      {
        "id": "redis-basic-configuration-parameters-first-principles",
        "title": "Redis Basic Configuration Parameters: First Principles",
        "level": 1,
        "wordCount": 42
      },
      {
        "id": "what-is-configuration",
        "title": "What is Configuration?",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "the-redis-configuration-file",
        "title": "The Redis Configuration File",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "essential-configuration-categories",
        "title": "Essential Configuration Categories",
        "level": 2,
        "wordCount": 521
      },
      {
        "id": "practical-configuration-examples",
        "title": "Practical Configuration Examples",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "tuning-configuration-for-performance",
        "title": "Tuning Configuration for Performance",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "monitoring-and-adjusting-configuration",
        "title": "Monitoring and Adjusting Configuration",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "configuration-best-practices",
        "title": "Configuration Best Practices",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 92
      }
    ],
    "totalWordCount": 1046,
    "estimatedReadingTime": 300000,
    "title": "basic_configuration_parameters",
    "frontmatter": {}
  },
  "public\\content\\redis\\data_structures\\strings_and_binary_data_handling.md": {
    "path": "public\\content\\redis\\data_structures\\strings_and_binary_data_handling.md",
    "sections": [
      {
        "id": "redis-strings-and-binary-data-handling-from-first-principles",
        "title": "Redis Strings and Binary Data Handling: From First Principles",
        "level": 1,
        "wordCount": 32
      },
      {
        "id": "1-what-is-redis",
        "title": "1. What is Redis?",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "2-redis-data-types-starting-with-strings",
        "title": "2. Redis Data Types: Starting with Strings",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "3-redis-string-fundamentals",
        "title": "3. Redis String Fundamentals",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "4-binary-data-in-redis-strings",
        "title": "4. Binary Data in Redis Strings",
        "level": 2,
        "wordCount": 176
      },
      {
        "id": "5-special-string-commands-for-binary-data",
        "title": "5. Special String Commands for Binary Data",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "6-encoding-and-character-sets",
        "title": "6. Encoding and Character Sets",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "7-performance-considerations",
        "title": "7. Performance Considerations",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "8-common-use-cases-for-binary-data-in-redis",
        "title": "8. Common Use Cases for Binary Data in Redis",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "9-common-patterns-and-best-practices",
        "title": "9. Common Patterns and Best Practices",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "10-practical-example-building-a-complete-system",
        "title": "10. Practical Example: Building a Complete System",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "11-limitations-and-alternatives",
        "title": "11. Limitations and Alternatives",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 151
      }
    ],
    "totalWordCount": 1088,
    "estimatedReadingTime": 300000,
    "title": "strings_and_binary_data_handling",
    "frontmatter": {}
  },
  "public\\content\\redis\\data_structures\\streams_for_append_only_messaging.md": {
    "path": "public\\content\\redis\\data_structures\\streams_for_append_only_messaging.md",
    "sections": [
      {
        "id": "understanding-redis-streams-from-first-principles",
        "title": "Understanding Redis Streams from First Principles",
        "level": 1,
        "wordCount": 32
      },
      {
        "id": "what-are-redis-streams",
        "title": "What Are Redis Streams?",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "the-problem-streams-solve",
        "title": "The Problem Streams Solve",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "the-stream-data-structure",
        "title": "The Stream Data Structure",
        "level": 2,
        "wordCount": 142
      },
      {
        "id": "reading-from-streams",
        "title": "Reading from Streams",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "consumer-groups-the-power-of-streams",
        "title": "Consumer Groups: The Power of Streams",
        "level": 2,
        "wordCount": 137
      },
      {
        "id": "a-complete-example-building-a-log-processing-system",
        "title": "A Complete Example: Building a Log Processing System",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "stream-trimming-and-memory-management",
        "title": "Stream Trimming and Memory Management",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "practical-example-building-a-real-time-analytics-pipeline",
        "title": "Practical Example: Building a Real-time Analytics Pipeline",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "streams-vs-pubsub",
        "title": "Streams vs. Pub/Sub",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "how-streams-are-implemented-internally",
        "title": "How Streams are Implemented Internally",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "stream-memory-usage",
        "title": "Stream Memory Usage",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 98
      }
    ],
    "totalWordCount": 1157,
    "estimatedReadingTime": 300000,
    "title": "streams_for_append_only_messaging",
    "frontmatter": {}
  },
  "public\\content\\redis\\data_structures\\sorted_sets_with_score_based_ordering.md": {
    "path": "public\\content\\redis\\data_structures\\sorted_sets_with_score_based_ordering.md",
    "sections": [
      {
        "id": "redis-sorted-sets-with-score-based-ordering",
        "title": "Redis Sorted Sets with Score-Based Ordering",
        "level": 1,
        "wordCount": 24
      },
      {
        "id": "what-is-redis",
        "title": "What is Redis?",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "the-concept-of-sets",
        "title": "The Concept of Sets",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "from-sets-to-sorted-sets",
        "title": "From Sets to Sorted Sets",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "the-structure-of-sorted-sets",
        "title": "The Structure of Sorted Sets",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "creating-and-manipulating-sorted-sets",
        "title": "Creating and Manipulating Sorted Sets",
        "level": 2,
        "wordCount": 125
      },
      {
        "id": "retrieving-elements-from-sorted-sets",
        "title": "Retrieving Elements from Sorted Sets",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "first-principles-of-sorted-sets-operations",
        "title": "First Principles of Sorted Sets Operations",
        "level": 2,
        "wordCount": 145
      },
      {
        "id": "real-world-applications-of-sorted-sets",
        "title": "Real-World Applications of Sorted Sets",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "internal-implementation-and-performance-characteristics",
        "title": "Internal Implementation and Performance Characteristics",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "memory-considerations",
        "title": "Memory Considerations",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "example-building-a-simple-ranking-system",
        "title": "Example: Building a Simple Ranking System",
        "level": 2,
        "wordCount": 21
      },
      {
        "id": "advanced-features",
        "title": "Advanced Features",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 118
      }
    ],
    "totalWordCount": 1085,
    "estimatedReadingTime": 300000,
    "title": "sorted_sets_with_score_based_ordering",
    "frontmatter": {}
  },
  "public\\content\\redis\\data_structures\\sets_for_unique_collections.md": {
    "path": "public\\content\\redis\\data_structures\\sets_for_unique_collections.md",
    "sections": [
      {
        "id": "redis-sets-a-first-principles-exploration",
        "title": "Redis Sets: A First Principles Exploration",
        "level": 1,
        "wordCount": 25
      },
      {
        "id": "what-are-sets-fundamentally",
        "title": "What Are Sets, Fundamentally?",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "redis-sets-the-implementation",
        "title": "Redis Sets: The Implementation",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "basic-operations-on-redis-sets",
        "title": "Basic Operations on Redis Sets",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "set-operations-the-power-of-mathematical-set-theory",
        "title": "Set Operations: The Power of Mathematical Set Theory",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "practical-applications-of-redis-sets",
        "title": "Practical Applications of Redis Sets",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "performance-characteristics",
        "title": "Performance Characteristics",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "how-redis-sets-are-stored-internally",
        "title": "How Redis Sets Are Stored Internally",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "common-patterns-and-use-cases",
        "title": "Common Patterns and Use Cases",
        "level": 2,
        "wordCount": 27
      },
      {
        "id": "advanced-set-operations",
        "title": "Advanced Set Operations",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "comparing-sets-to-other-redis-data-types",
        "title": "Comparing Sets to Other Redis Data Types",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 74
      }
    ],
    "totalWordCount": 966,
    "estimatedReadingTime": 240000,
    "title": "sets_for_unique_collections",
    "frontmatter": {}
  },
  "public\\content\\redis\\data_structures\\lists_and_their_queue_stack_operations.md": {
    "path": "public\\content\\redis\\data_structures\\lists_and_their_queue_stack_operations.md",
    "sections": [
      {
        "id": "redis-lists-a-first-principles-explanation",
        "title": "Redis Lists: A First Principles Explanation",
        "level": 1,
        "wordCount": 27
      },
      {
        "id": "what-is-redis",
        "title": "What is Redis?",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "what-is-a-list",
        "title": "What is a List?",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "redis-lists-first-principles",
        "title": "Redis Lists: First Principles",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "redis-list-structure",
        "title": "Redis List Structure",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "basic-redis-list-commands",
        "title": "Basic Redis List Commands",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "queue-operations-with-redis-lists",
        "title": "Queue Operations with Redis Lists",
        "level": 2,
        "wordCount": 144
      },
      {
        "id": "stack-operations-with-redis-lists",
        "title": "Stack Operations with Redis Lists",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "blocking-operations",
        "title": "Blocking Operations",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "advanced-list-operations",
        "title": "Advanced List Operations",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "real-world-example-message-queue-system",
        "title": "Real-world Example: Message Queue System",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 149
      }
    ],
    "totalWordCount": 1078,
    "estimatedReadingTime": 300000,
    "title": "lists_and_their_queue_stack_operations",
    "frontmatter": {}
  },
  "public\\content\\redis\\data_structures\\hyperLogLog_for_cardinality_estimation.md": {
    "path": "public\\content\\redis\\data_structures\\hyperLogLog_for_cardinality_estimation.md",
    "sections": [
      {
        "id": "redis-hyperloglog-understanding-cardinality-estimation-from-first-principles",
        "title": "Redis HyperLogLog: Understanding Cardinality Estimation from First Principles",
        "level": 1,
        "wordCount": 68
      },
      {
        "id": "first-principles-the-counting-problem",
        "title": "First Principles: The Counting Problem",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "the-probabilistic-solution-hyperloglog",
        "title": "The Probabilistic Solution: HyperLogLog",
        "level": 2,
        "wordCount": 264
      },
      {
        "id": "hyperloglog-multiple-estimators-for-greater-accuracy",
        "title": "HyperLogLog: Multiple Estimators for Greater Accuracy",
        "level": 2,
        "wordCount": 158
      },
      {
        "id": "how-redis-implements-hyperloglog",
        "title": "How Redis Implements HyperLogLog",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "the-math-behind-hyperloglog",
        "title": "The Math Behind HyperLogLog",
        "level": 2,
        "wordCount": 152
      },
      {
        "id": "real-world-applications",
        "title": "Real-World Applications",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "redis-hyperloglog-implementation-details",
        "title": "Redis HyperLogLog Implementation Details",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "limitations-and-considerations",
        "title": "Limitations and Considerations",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 92
      }
    ],
    "totalWordCount": 1215,
    "estimatedReadingTime": 300000,
    "title": "hyperLogLog_for_cardinality_estimation",
    "frontmatter": {}
  },
  "public\\content\\redis\\data_structures\\hashes_for_field_value_pairs.md": {
    "path": "public\\content\\redis\\data_structures\\hashes_for_field_value_pairs.md",
    "sections": [
      {
        "id": "redis-hashes-field-value-pairs-from-first-principles",
        "title": "Redis Hashes: Field-Value Pairs from First Principles",
        "level": 1,
        "wordCount": 28
      },
      {
        "id": "what-is-redis",
        "title": "What is Redis?",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "key-value-structure-the-foundation",
        "title": "Key-Value Structure: The Foundation",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "what-are-redis-hashes",
        "title": "What are Redis Hashes?",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "redis-hash-commands-the-building-blocks",
        "title": "Redis Hash Commands: The Building Blocks",
        "level": 2,
        "wordCount": 174
      },
      {
        "id": "understanding-hashes-through-examples",
        "title": "Understanding Hashes Through Examples",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "redis-hashes-in-real-programming-scenarios",
        "title": "Redis Hashes in Real Programming Scenarios",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "design-patterns-and-use-cases-for-redis-hashes",
        "title": "Design Patterns and Use Cases for Redis Hashes",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "understanding-hash-memory-efficiency",
        "title": "Understanding Hash Memory Efficiency",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "limitations-and-considerations",
        "title": "Limitations and Considerations",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "practical-example-a-mini-user-management-system",
        "title": "Practical Example: A Mini User Management System",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 102
      }
    ],
    "totalWordCount": 1083,
    "estimatedReadingTime": 300000,
    "title": "hashes_for_field_value_pairs",
    "frontmatter": {}
  },
  "public\\content\\redis\\data_structures\\geospatial_data_with_geo_commands.md": {
    "path": "public\\content\\redis\\data_structures\\geospatial_data_with_geo_commands.md",
    "sections": [
      {
        "id": "redis-geospatial-data-with-geo-commands-a-first-principles-approach",
        "title": "Redis Geospatial Data with GEO Commands: A First Principles Approach",
        "level": 1,
        "wordCount": 28
      },
      {
        "id": "understanding-geospatial-data-the-fundamentals",
        "title": "Understanding Geospatial Data: The Fundamentals",
        "level": 2,
        "wordCount": 134
      },
      {
        "id": "redis-geo-core-concepts",
        "title": "Redis GEO: Core Concepts",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "example-1-adding-locations-with-geoadd",
        "title": "Example 1: Adding Locations with GEOADD",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "example-2-finding-distances-with-geodist",
        "title": "Example 2: Finding Distances with GEODIST",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "example-3-finding-locations-within-a-radius-with-georadius",
        "title": "Example 3: Finding Locations within a Radius with GEORADIUS",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "example-4-finding-locations-by-member-with-georadiusbymember",
        "title": "Example 4: Finding Locations by Member with GEORADIUSBYMEMBER",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "example-5-getting-coordinates-with-geopos",
        "title": "Example 5: Getting Coordinates with GEOPOS",
        "level": 2,
        "wordCount": 25
      },
      {
        "id": "example-6-converting-to-geohash-with-geohash",
        "title": "Example 6: Converting to Geohash with GEOHASH",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "example-7-finding-locations-within-a-rectangle-with-geosearch",
        "title": "Example 7: Finding Locations within a Rectangle with GEOSEARCH",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "example-8-storing-results-in-a-new-key-with-geosearchstore",
        "title": "Example 8: Storing Results in a New Key with GEOSEARCHSTORE",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "example-9-using-geospatial-data-for-a-simple-location-based-app",
        "title": "Example 9: Using Geospatial Data for a Simple Location-Based App",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "internal-implementation-details",
        "title": "Internal Implementation Details",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "limitations-and-considerations",
        "title": "Limitations and Considerations",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "practical-application-location-based-recommendations",
        "title": "Practical Application: Location-Based Recommendations",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 107
      }
    ],
    "totalWordCount": 1054,
    "estimatedReadingTime": 300000,
    "title": "geospatial_data_with_geo_commands",
    "frontmatter": {}
  },
  "public\\content\\redis\\data_structures\\choosing_the_right_data_structure_for_your_use_case.md": {
    "path": "public\\content\\redis\\data_structures\\choosing_the_right_data_structure_for_your_use_case.md",
    "sections": [
      {
        "id": "choosing-the-right-data-structure-for-your-use-case-in-redis",
        "title": "Choosing the Right Data Structure for Your Use Case in Redis",
        "level": 1,
        "wordCount": 54
      },
      {
        "id": "first-principles-what-is-redis",
        "title": "First Principles: What is Redis?",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "understanding-redis-data-structures",
        "title": "Understanding Redis Data Structures",
        "level": 2,
        "wordCount": 341
      },
      {
        "id": "first-principles-of-data-structure-selection",
        "title": "First Principles of Data Structure Selection",
        "level": 2,
        "wordCount": 160
      },
      {
        "id": "use-case-examples",
        "title": "Use Case Examples",
        "level": 2,
        "wordCount": 228
      },
      {
        "id": "making-the-decision-a-framework",
        "title": "Making the Decision: A Framework",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "advanced-considerations",
        "title": "Advanced Considerations",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "common-mistakes-to-avoid",
        "title": "Common Mistakes to Avoid",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 94
      }
    ],
    "totalWordCount": 1186,
    "estimatedReadingTime": 300000,
    "title": "choosing_the_right_data_structure_for_your_use_case",
    "frontmatter": {}
  },
  "public\\content\\redis\\data_structures\\bit_arrays_and_bitmap_operations.md": {
    "path": "public\\content\\redis\\data_structures\\bit_arrays_and_bitmap_operations.md",
    "sections": [
      {
        "id": "redis-bit-arrays-and-bitmap-operations-from-first-principles",
        "title": "Redis Bit Arrays and Bitmap Operations: From First Principles",
        "level": 1,
        "wordCount": 27
      },
      {
        "id": "what-are-bits-the-foundation",
        "title": "What Are Bits? The Foundation",
        "level": 2,
        "wordCount": 125
      },
      {
        "id": "what-are-bit-arrays",
        "title": "What Are Bit Arrays?",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "redis-bitmaps-bits-in-a-database",
        "title": "Redis Bitmaps: Bits in a Database",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "setbit-setting-individual-bits",
        "title": "SETBIT: Setting Individual Bits",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "getbit-reading-individual-bits",
        "title": "GETBIT: Reading Individual Bits",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "bitcount-counting-set-bits",
        "title": "BITCOUNT: Counting Set Bits",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "advanced-bitmap-operations",
        "title": "Advanced Bitmap Operations",
        "level": 2,
        "wordCount": 208
      },
      {
        "id": "real-world-applications-of-redis-bitmaps",
        "title": "Real-World Applications of Redis Bitmaps",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "the-math-behind-bitmap-efficiency",
        "title": "The Math Behind Bitmap Efficiency",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "performance-characteristics",
        "title": "Performance Characteristics",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "advanced-tip-handling-sparse-bitmaps",
        "title": "Advanced Tip: Handling Sparse Bitmaps",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "implementation-example-last-7-days-activity-tracker",
        "title": "Implementation Example: Last 7 Days Activity Tracker",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "memory-management-considerations",
        "title": "Memory Management Considerations",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "conclusion-the-power-of-simplicity",
        "title": "Conclusion: The Power of Simplicity",
        "level": 2,
        "wordCount": 129
      }
    ],
    "totalWordCount": 1454,
    "estimatedReadingTime": 360000,
    "title": "bit_arrays_and_bitmap_operations",
    "frontmatter": {}
  },
  "public\\content\\redis\\commands_deep_dive\\transaction_support_with_multi_exec.md": {
    "path": "public\\content\\redis\\commands_deep_dive\\transaction_support_with_multi_exec.md",
    "sections": [
      {
        "id": "redis-transaction-support-with-multiexec",
        "title": "Redis Transaction Support with MULTI/EXEC",
        "level": 1,
        "wordCount": 20
      },
      {
        "id": "what-is-a-transaction",
        "title": "What is a Transaction?",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "the-need-for-transactions-in-redis",
        "title": "The Need for Transactions in Redis",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "redis-transactions-the-basics",
        "title": "Redis Transactions: The Basics",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "how-redis-transactions-work-under-the-hood",
        "title": "How Redis Transactions Work Under the Hood",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "a-complete-transaction-example",
        "title": "A Complete Transaction Example",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "command-responses-in-transactions",
        "title": "Command Responses in Transactions",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "error-handling-in-redis-transactions",
        "title": "Error Handling in Redis Transactions",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "optimistic-locking-with-watch",
        "title": "Optimistic Locking with WATCH",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "discard-command",
        "title": "DISCARD Command",
        "level": 2,
        "wordCount": 16
      },
      {
        "id": "understanding-what-redis-transactions-are-not",
        "title": "Understanding What Redis Transactions Are NOT",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "practical-example-implementing-a-counter-with-safe-increment",
        "title": "Practical Example: Implementing a Counter with Safe Increment",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "combining-transactions-with-lua-scripts",
        "title": "Combining Transactions with Lua Scripts",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "best-practices-for-redis-transactions",
        "title": "Best Practices for Redis Transactions",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 96
      }
    ],
    "totalWordCount": 965,
    "estimatedReadingTime": 240000,
    "title": "transaction_support_with_multi_exec",
    "frontmatter": {}
  },
  "public\\content\\redis\\commands_deep_dive\\string_manipulation_commands.md": {
    "path": "public\\content\\redis\\commands_deep_dive\\string_manipulation_commands.md",
    "sections": [
      {
        "id": "redis-string-manipulation-commands-from-first-principles",
        "title": "Redis String Manipulation Commands: From First Principles",
        "level": 1,
        "wordCount": 30
      },
      {
        "id": "what-is-redis",
        "title": "What is Redis?",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "understanding-redis-data-types",
        "title": "Understanding Redis Data Types",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "redis-strings-the-foundation",
        "title": "Redis Strings: The Foundation",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "basic-string-commands",
        "title": "Basic String Commands",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "advanced-string-manipulation",
        "title": "Advanced String Manipulation",
        "level": 2,
        "wordCount": 162
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "common-patterns-and-best-practices",
        "title": "Common Patterns and Best Practices",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "comparing-with-other-redis-data-types",
        "title": "Comparing with Other Redis Data Types",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "string-command-summary",
        "title": "String Command Summary",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 89
      }
    ],
    "totalWordCount": 972,
    "estimatedReadingTime": 240000,
    "title": "string_manipulation_commands",
    "frontmatter": {}
  },
  "public\\content\\redis\\commands_deep_dive\\stream_consumer_groups_and_message_processing.md": {
    "path": "public\\content\\redis\\commands_deep_dive\\stream_consumer_groups_and_message_processing.md",
    "sections": [
      {
        "id": "redis-streams-consumer-groups-and-message-processing-from-first-principles",
        "title": "Redis Streams Consumer Groups and Message Processing: From First Principles",
        "level": 1,
        "wordCount": 31
      },
      {
        "id": "1-understanding-redis-streams-the-foundation",
        "title": "1. Understanding Redis Streams: The Foundation",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "2-the-problem-streams-solve",
        "title": "2. The Problem Streams Solve",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "3-basic-consumption-the-starting-point",
        "title": "3. Basic Consumption: The Starting Point",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "4-consumer-groups-the-collaborative-approach",
        "title": "4. Consumer Groups: The Collaborative Approach",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "5-creating-and-using-consumer-groups",
        "title": "5. Creating and Using Consumer Groups",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "6-reading-messages-with-consumer-groups",
        "title": "6. Reading Messages with Consumer Groups",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "7-message-acknowledgment-confirming-processing",
        "title": "7. Message Acknowledgment: Confirming Processing",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "8-pending-messages-handling-failures",
        "title": "8. Pending Messages: Handling Failures",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "9-claiming-messages-recovery-mechanism",
        "title": "9. Claiming Messages: Recovery Mechanism",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "10-practical-patterns-and-considerations",
        "title": "10. Practical Patterns and Considerations",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "11-monitoring-and-management",
        "title": "11. Monitoring and Management",
        "level": 2,
        "wordCount": 23
      },
      {
        "id": "12-scaling-considerations",
        "title": "12. Scaling Considerations",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "real-world-example-event-processing-system",
        "title": "Real-world Example: Event Processing System",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "advanced-concepts-going-beyond-the-basics",
        "title": "Advanced Concepts: Going Beyond the Basics",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "summary-key-principles-of-redis-streams-consumer-groups",
        "title": "Summary: Key Principles of Redis Streams Consumer Groups",
        "level": 2,
        "wordCount": 121
      }
    ],
    "totalWordCount": 1129,
    "estimatedReadingTime": 300000,
    "title": "stream_consumer_groups_and_message_processing",
    "frontmatter": {}
  },
  "public\\content\\redis\\commands_deep_dive\\sorted_set_range_and_aggregate_operations.md": {
    "path": "public\\content\\redis\\commands_deep_dive\\sorted_set_range_and_aggregate_operations.md",
    "sections": [
      {
        "id": "redis-sorted-sets-range-and-aggregate-operations-from-first-principles",
        "title": "Redis Sorted Sets: Range and Aggregate Operations from First Principles",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "1-what-are-redis-sorted-sets",
        "title": "1. What Are Redis Sorted Sets?",
        "level": 2,
        "wordCount": 140
      },
      {
        "id": "2-basic-operations-with-sorted-sets",
        "title": "2. Basic Operations with Sorted Sets",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "3-range-operations-on-sorted-sets",
        "title": "3. Range Operations on Sorted Sets",
        "level": 2,
        "wordCount": 249
      },
      {
        "id": "4-count-and-limit-operations",
        "title": "4. Count and Limit Operations",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "5-aggregate-operations-on-sorted-sets",
        "title": "5. Aggregate Operations on Sorted Sets",
        "level": 2,
        "wordCount": 403
      },
      {
        "id": "6-practical-applications",
        "title": "6. Practical Applications",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "7-performance-considerations",
        "title": "7. Performance Considerations",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "8-code-example-building-a-tag-based-content-system",
        "title": "8. Code Example: Building a Tag-based Content System",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "9-conclusion",
        "title": "9. Conclusion",
        "level": 2,
        "wordCount": 130
      }
    ],
    "totalWordCount": 1301,
    "estimatedReadingTime": 360000,
    "title": "sorted_set_range_and_aggregate_operations",
    "frontmatter": {}
  },
  "public\\content\\redis\\commands_deep_dive\\set_operations.md": {
    "path": "public\\content\\redis\\commands_deep_dive\\set_operations.md",
    "sections": [
      {
        "id": "redis-set-operations-understanding-from-first-principles",
        "title": "Redis Set Operations: Understanding from First Principles",
        "level": 1,
        "wordCount": 25
      },
      {
        "id": "what-are-sets-in-general",
        "title": "What Are Sets in General?",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "sets-in-redis",
        "title": "Sets in Redis",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "basic-set-commands-in-redis",
        "title": "Basic Set Commands in Redis",
        "level": 2,
        "wordCount": 25
      },
      {
        "id": "set-union-sunionsunionstore",
        "title": "Set Union (SUNION/SUNIONSTORE)",
        "level": 2,
        "wordCount": 155
      },
      {
        "id": "set-intersection-sintersinterstore",
        "title": "Set Intersection (SINTER/SINTERSTORE)",
        "level": 2,
        "wordCount": 132
      },
      {
        "id": "set-difference-sdiffsdiffstore",
        "title": "Set Difference (SDIFF/SDIFFSTORE)",
        "level": 2,
        "wordCount": 142
      },
      {
        "id": "working-with-multiple-sets",
        "title": "Working with Multiple Sets",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "time-complexity-considerations",
        "title": "Time Complexity Considerations",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "implementing-real-world-patterns",
        "title": "Implementing Real-World Patterns",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "writing-a-simple-python-example",
        "title": "Writing a Simple Python Example",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "performance-optimization-techniques",
        "title": "Performance Optimization Techniques",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "understanding-internal-implementation",
        "title": "Understanding Internal Implementation",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 81
      }
    ],
    "totalWordCount": 983,
    "estimatedReadingTime": 240000,
    "title": "set_operations",
    "frontmatter": {}
  },
  "public\\content\\redis\\commands_deep_dive\\list_traversal_and_manipulation.md": {
    "path": "public\\content\\redis\\commands_deep_dive\\list_traversal_and_manipulation.md",
    "sections": [
      {
        "id": "understanding-redis-list-traversal-and-manipulation-from-first-principles",
        "title": "Understanding Redis List Traversal and Manipulation from First Principles",
        "level": 1,
        "wordCount": 31
      },
      {
        "id": "1-what-is-redis",
        "title": "1. What is Redis?",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "2-understanding-redis-lists-at-a-fundamental-level",
        "title": "2. Understanding Redis Lists at a Fundamental Level",
        "level": 2,
        "wordCount": 154
      },
      {
        "id": "3-basic-redis-list-operations",
        "title": "3. Basic Redis List Operations",
        "level": 2,
        "wordCount": 161
      },
      {
        "id": "4-list-traversal-in-redis",
        "title": "4. List Traversal in Redis",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "5-advanced-list-manipulation",
        "title": "5. Advanced List Manipulation",
        "level": 2,
        "wordCount": 164
      },
      {
        "id": "6-practical-examples",
        "title": "6. Practical Examples",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "7-performance-considerations",
        "title": "7. Performance Considerations",
        "level": 2,
        "wordCount": 137
      },
      {
        "id": "8-redis-list-traversal-in-code",
        "title": "8. Redis List Traversal in Code",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "9-list-manipulation-patterns",
        "title": "9. List Manipulation Patterns",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "10-real-world-applications",
        "title": "10. Real-world Applications",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 119
      }
    ],
    "totalWordCount": 1297,
    "estimatedReadingTime": 360000,
    "title": "list_traversal_and_manipulation",
    "frontmatter": {}
  },
  "public\\content\\redis\\commands_deep_dive\\key_space_operations_and_pattern_matching.md": {
    "path": "public\\content\\redis\\commands_deep_dive\\key_space_operations_and_pattern_matching.md",
    "sections": [
      {
        "id": "redis-key-space-operations-and-pattern-matching-from-first-principles",
        "title": "Redis Key Space Operations and Pattern Matching from First Principles",
        "level": 1,
        "wordCount": 35
      },
      {
        "id": "1-what-is-the-redis-key-space",
        "title": "1. What is the Redis Key Space?",
        "level": 2,
        "wordCount": 139
      },
      {
        "id": "2-key-naming-conventions",
        "title": "2. Key Naming Conventions",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "3-basic-key-space-operations",
        "title": "3. Basic Key Space Operations",
        "level": 2,
        "wordCount": 207
      },
      {
        "id": "4-pattern-matching-and-key-scanning",
        "title": "4. Pattern Matching and Key Scanning",
        "level": 2,
        "wordCount": 276
      },
      {
        "id": "5-practical-applications-of-pattern-matching",
        "title": "5. Practical Applications of Pattern Matching",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "6-advanced-pattern-techniques",
        "title": "6. Advanced Pattern Techniques",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "7-performance-considerations",
        "title": "7. Performance Considerations",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "8-combining-with-other-redis-features",
        "title": "8. Combining with Other Redis Features",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "9-practical-example-session-management-system",
        "title": "9. Practical Example: Session Management System",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "10-conclusion",
        "title": "10. Conclusion",
        "level": 2,
        "wordCount": 164
      }
    ],
    "totalWordCount": 1178,
    "estimatedReadingTime": 300000,
    "title": "key_space_operations_and_pattern_matching",
    "frontmatter": {}
  },
  "public\\content\\redis\\commands_deep_dive\\hash_field_operations_and_atomic_updates.md": {
    "path": "public\\content\\redis\\commands_deep_dive\\hash_field_operations_and_atomic_updates.md",
    "sections": [
      {
        "id": "redis-hash-field-operations-and-atomic-updates-a-first-principles-explanation",
        "title": "Redis Hash Field Operations and Atomic Updates: A First Principles Explanation",
        "level": 1,
        "wordCount": 36
      },
      {
        "id": "1-what-is-redis-at-its-core",
        "title": "1. What is Redis at its core?",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "2-redis-hashes-the-fundamental-concept",
        "title": "2. Redis Hashes: The Fundamental Concept",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "3-basic-hash-operations",
        "title": "3. Basic Hash Operations",
        "level": 2,
        "wordCount": 153
      },
      {
        "id": "4-understanding-atomic-operations-in-redis",
        "title": "4. Understanding Atomic Operations in Redis",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "5-atomic-hash-field-updates",
        "title": "5. Atomic Hash Field Updates",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "6-conditional-updates-and-complex-atomic-operations",
        "title": "6. Conditional Updates and Complex Atomic Operations",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "7-practical-use-case-inventory-management",
        "title": "7. Practical Use Case: Inventory Management",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "8-advanced-pattern-optimistic-locking-with-hash-fields",
        "title": "8. Advanced Pattern: Optimistic Locking with Hash Fields",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "9-performance-considerations-for-hash-operations",
        "title": "9. Performance Considerations for Hash Operations",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "10-conclusion-and-best-practices",
        "title": "10. Conclusion and Best Practices",
        "level": 2,
        "wordCount": 161
      }
    ],
    "totalWordCount": 1139,
    "estimatedReadingTime": 300000,
    "title": "hash_field_operations_and_atomic_updates",
    "frontmatter": {}
  },
  "public\\content\\redis\\commands_deep_dive\\geospatial_queries_and_radius_searches.md": {
    "path": "public\\content\\redis\\commands_deep_dive\\geospatial_queries_and_radius_searches.md",
    "sections": [
      {
        "id": "redis-geospatial-queries-and-radius-searches-from-first-principles",
        "title": "Redis Geospatial Queries and Radius Searches: From First Principles",
        "level": 1,
        "wordCount": 36
      },
      {
        "id": "1-what-are-geospatial-concepts",
        "title": "1. What Are Geospatial Concepts?",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "2-what-is-redis",
        "title": "2. What is Redis?",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "3-how-redis-implements-geospatial-features",
        "title": "3. How Redis Implements Geospatial Features",
        "level": 2,
        "wordCount": 162
      },
      {
        "id": "4-core-redis-geospatial-commands",
        "title": "4. Core Redis Geospatial Commands",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "5-radius-searches-the-core-of-geospatial-queries",
        "title": "5. Radius Searches (The Core of Geospatial Queries)",
        "level": 2,
        "wordCount": 156
      },
      {
        "id": "6-practical-example-building-a-nearby-restaurant-finder",
        "title": "6. Practical Example: Building a Nearby Restaurant Finder",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "7-performance-considerations",
        "title": "7. Performance Considerations",
        "level": 2,
        "wordCount": 147
      },
      {
        "id": "8-advanced-geospatial-features-in-redis",
        "title": "8. Advanced Geospatial Features in Redis",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "9-real-world-applications",
        "title": "9. Real-World Applications",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "10-practical-considerations-and-limitations",
        "title": "10. Practical Considerations and Limitations",
        "level": 2,
        "wordCount": 143
      },
      {
        "id": "11-putting-it-all-together-building-a-complete-location-aware-system",
        "title": "11. Putting It All Together: Building a Complete Location-Aware System",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 126
      }
    ],
    "totalWordCount": 1259,
    "estimatedReadingTime": 360000,
    "title": "geospatial_queries_and_radius_searches",
    "frontmatter": {}
  },
  "public\\content\\redis\\commands_deep_dive\\bitmap_operations_and_bit_manipulation.md": {
    "path": "public\\content\\redis\\commands_deep_dive\\bitmap_operations_and_bit_manipulation.md",
    "sections": [
      {
        "id": "redis-bitmap-operations-and-bit-manipulation-from-first-principles",
        "title": "Redis Bitmap Operations and Bit Manipulation: From First Principles",
        "level": 1,
        "wordCount": 32
      },
      {
        "id": "1-understanding-bits-the-foundation",
        "title": "1. Understanding Bits: The Foundation",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "2-from-bits-to-bytes-and-strings",
        "title": "2. From Bits to Bytes and Strings",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "3-bitmap-concept-arrays-of-bits",
        "title": "3. Bitmap Concept: Arrays of Bits",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "4-redis-bitmap-commands-the-practical-tools",
        "title": "4. Redis Bitmap Commands: The Practical Tools",
        "level": 2,
        "wordCount": 289
      },
      {
        "id": "5-real-world-applications-putting-it-all-together",
        "title": "5. Real-World Applications: Putting It All Together",
        "level": 2,
        "wordCount": 136
      },
      {
        "id": "6-advanced-bitmap-operations",
        "title": "6. Advanced Bitmap Operations",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "7-performance-considerations",
        "title": "7. Performance Considerations",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "8-compression-and-sparse-bitmaps",
        "title": "8. Compression and Sparse Bitmaps",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 113
      }
    ],
    "totalWordCount": 1015,
    "estimatedReadingTime": 300000,
    "title": "bitmap_operations_and_bit_manipulation",
    "frontmatter": {}
  },
  "public\\content\\redis\\architecture\\virtual_memory_and_swap_behavior.md": {
    "path": "public\\content\\redis\\architecture\\virtual_memory_and_swap_behavior.md",
    "sections": [
      {
        "id": "redis-virtual-memory-and-swap-behavior-a-first-principles-approach",
        "title": "Redis Virtual Memory and Swap Behavior: A First Principles Approach",
        "level": 1,
        "wordCount": 33
      },
      {
        "id": "what-is-memory-management",
        "title": "What is Memory Management?",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "redis-and-memory",
        "title": "Redis and Memory",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "redis-virtual-memory-the-problem-it-solves",
        "title": "Redis Virtual Memory: The Problem It Solves",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "redis-virtual-memory-implementation",
        "title": "Redis Virtual Memory Implementation",
        "level": 2,
        "wordCount": 263
      },
      {
        "id": "redis-vm-configuration",
        "title": "Redis VM Configuration",
        "level": 2,
        "wordCount": 225
      },
      {
        "id": "code-example-basic-redis-vm-setup",
        "title": "Code Example: Basic Redis VM Setup",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "redis-swap-algorithm",
        "title": "Redis Swap Algorithm",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "redis-vm-performance-considerations",
        "title": "Redis VM Performance Considerations",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "deprecated-status-and-modern-alternatives",
        "title": "Deprecated Status and Modern Alternatives",
        "level": 2,
        "wordCount": 145
      },
      {
        "id": "using-the-operating-systems-swap",
        "title": "Using the Operating System's Swap",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "a-practical-example-redis-memory-management",
        "title": "A Practical Example: Redis Memory Management",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 124
      }
    ],
    "totalWordCount": 1477,
    "estimatedReadingTime": 360000,
    "title": "virtual_memory_and_swap_behavior",
    "frontmatter": {}
  },
  "public\\content\\redis\\architecture\\single_threaded_event_loop_model.md": {
    "path": "public\\content\\redis\\architecture\\single_threaded_event_loop_model.md",
    "sections": [
      {
        "id": "redis-single-threaded-event-loop-model-a-first-principles-explanation",
        "title": "Redis Single-threaded Event Loop Model: A First Principles Explanation",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "1-the-problem-fast-data-access",
        "title": "1. The Problem: Fast Data Access",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "2-what-makes-things-fast-or-slow",
        "title": "2. What Makes Things Fast or Slow?",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "3-the-emergence-of-in-memory-databases",
        "title": "3. The Emergence of In-Memory Databases",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "4-understanding-threading-models",
        "title": "4. Understanding Threading Models",
        "level": 2,
        "wordCount": 184
      },
      {
        "id": "5-rediss-event-loop-in-detail",
        "title": "5. Redis's Event Loop in Detail",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "6-why-is-this-model-fast",
        "title": "6. Why is This Model Fast?",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "7-but-what-about-slow-operations",
        "title": "7. But What About Slow Operations?",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "8-processing-model-for-different-operations",
        "title": "8. Processing Model for Different Operations",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "9-multiplexing-io-in-detail",
        "title": "9. Multiplexing I/O in Detail",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "10-real-world-analogy-the-restaurant-host",
        "title": "10. Real-World Analogy: The Restaurant Host",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "11-handling-persistence",
        "title": "11. Handling Persistence",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "12-evolution-redis-beyond-the-single-thread",
        "title": "12. Evolution: Redis Beyond the Single Thread",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "13-when-single-threaded-architecture-is-beneficial",
        "title": "13. When Single-Threaded Architecture is Beneficial",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 111
      }
    ],
    "totalWordCount": 1378,
    "estimatedReadingTime": 360000,
    "title": "single_threaded_event_loop_model",
    "frontmatter": {}
  },
  "public\\content\\redis\\architecture\\response_handling_mechanisms.md": {
    "path": "public\\content\\redis\\architecture\\response_handling_mechanisms.md",
    "sections": [
      {
        "id": "redis-response-handling-mechanisms",
        "title": "Redis Response Handling Mechanisms",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "the-foundation-client-server-communication",
        "title": "The Foundation: Client-Server Communication",
        "level": 2,
        "wordCount": 205
      },
      {
        "id": "connection-handling",
        "title": "Connection Handling",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "synchronous-vs-pipelined-responses",
        "title": "Synchronous vs. Pipelined Responses",
        "level": 2,
        "wordCount": 147
      },
      {
        "id": "transaction-handling",
        "title": "Transaction Handling",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "pubsub-response-pattern",
        "title": "Pub/Sub Response Pattern",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "lua-scripting-response-handling",
        "title": "Lua Scripting Response Handling",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "error-handling",
        "title": "Error Handling",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "response-types-and-transformations",
        "title": "Response Types and Transformations",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "advanced-response-handling-scan-commands",
        "title": "Advanced Response Handling: Scan Commands",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "network-level-response-handling",
        "title": "Network-Level Response Handling",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "asynchronous-response-handling",
        "title": "Asynchronous Response Handling",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "handling-large-responses",
        "title": "Handling Large Responses",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "monitoring-and-debugging-response-handling",
        "title": "Monitoring and Debugging Response Handling",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 103
      }
    ],
    "totalWordCount": 1343,
    "estimatedReadingTime": 360000,
    "title": "response_handling_mechanisms",
    "frontmatter": {}
  },
  "public\\content\\redis\\architecture\\redis_process_internals.md": {
    "path": "public\\content\\redis\\architecture\\redis_process_internals.md",
    "sections": [
      {
        "id": "redis-process-internals-a-first-principles-explanation",
        "title": "Redis Process Internals: A First Principles Explanation",
        "level": 1,
        "wordCount": 33
      },
      {
        "id": "1-what-is-redis-at-its-core",
        "title": "1. What is Redis at its Core?",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "2-the-event-loop-rediss-heart",
        "title": "2. The Event Loop: Redis's Heart",
        "level": 2,
        "wordCount": 170
      },
      {
        "id": "3-memory-management",
        "title": "3. Memory Management",
        "level": 2,
        "wordCount": 225
      },
      {
        "id": "4-data-structures",
        "title": "4. Data Structures",
        "level": 2,
        "wordCount": 309
      },
      {
        "id": "5-persistence-mechanisms",
        "title": "5. Persistence Mechanisms",
        "level": 2,
        "wordCount": 231
      },
      {
        "id": "6-master-replica-replication",
        "title": "6. Master-Replica Replication",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "7-the-command-execution-flow",
        "title": "7. The Command Execution Flow",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "8-transactions-in-redis",
        "title": "8. Transactions in Redis",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "9-redis-modules-system",
        "title": "9. Redis Modules System",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "10-redis-cluster",
        "title": "10. Redis Cluster",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 130
      }
    ],
    "totalWordCount": 1631,
    "estimatedReadingTime": 420000,
    "title": "redis_process_internals",
    "frontmatter": {}
  },
  "public\\content\\redis\\architecture\\redis_modules_system_architecture.md": {
    "path": "public\\content\\redis\\architecture\\redis_modules_system_architecture.md",
    "sections": [
      {
        "id": "redis-modules-system-architecture-from-first-principles",
        "title": "Redis Modules System Architecture: From First Principles",
        "level": 1,
        "wordCount": 28
      },
      {
        "id": "1-understanding-redis-the-foundation",
        "title": "1. Understanding Redis: The Foundation",
        "level": 2,
        "wordCount": 171
      },
      {
        "id": "2-the-need-for-extensibility",
        "title": "2. The Need for Extensibility",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "3-the-redis-modules-api-core-concepts",
        "title": "3. The Redis Modules API: Core Concepts",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "4-module-architecture-building-blocks",
        "title": "4. Module Architecture: Building Blocks",
        "level": 2,
        "wordCount": 213
      },
      {
        "id": "5-memory-management-in-modules",
        "title": "5. Memory Management in Modules",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "6-data-persistence",
        "title": "6. Data Persistence",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "7-multithreading-model",
        "title": "7. Multithreading Model",
        "level": 2,
        "wordCount": 176
      },
      {
        "id": "8-real-world-example-redis-modules-in-action",
        "title": "8. Real-World Example: Redis Modules in Action",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "9-notable-redis-modules",
        "title": "9. Notable Redis Modules",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "10-module-loading-and-configuration",
        "title": "10. Module Loading and Configuration",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "11-security-considerations",
        "title": "11. Security Considerations",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "12-integration-with-redis-enterprise",
        "title": "12. Integration with Redis Enterprise",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "13-future-directions",
        "title": "13. Future Directions",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 100
      }
    ],
    "totalWordCount": 1487,
    "estimatedReadingTime": 360000,
    "title": "redis_modules_system_architecture",
    "frontmatter": {}
  },
  "public\\content\\redis\\architecture\\memory_management_and_allocation.md": {
    "path": "public\\content\\redis\\architecture\\memory_management_and_allocation.md",
    "sections": [
      {
        "id": "redis-memory-management-and-allocation",
        "title": "Redis Memory Management and Allocation",
        "level": 1,
        "wordCount": 24
      },
      {
        "id": "understanding-memory-in-computing-systems",
        "title": "Understanding Memory in Computing Systems",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "redis-as-an-in-memory-data-store",
        "title": "Redis as an In-Memory Data Store",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "redis-memory-allocator",
        "title": "Redis Memory Allocator",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "redis-data-structures-and-memory",
        "title": "Redis Data Structures and Memory",
        "level": 2,
        "wordCount": 164
      },
      {
        "id": "memory-optimization-techniques",
        "title": "Memory Optimization Techniques",
        "level": 2,
        "wordCount": 192
      },
      {
        "id": "memory-limits-and-policies",
        "title": "Memory Limits and Policies",
        "level": 2,
        "wordCount": 125
      },
      {
        "id": "memory-fragmentation",
        "title": "Memory Fragmentation",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "redis-memory-commands-and-tools",
        "title": "Redis Memory Commands and Tools",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "redis-memory-lifecycle-example",
        "title": "Redis Memory Lifecycle Example",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "advanced-memory-management-features",
        "title": "Advanced Memory Management Features",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "best-practices-for-redis-memory-management",
        "title": "Best Practices for Redis Memory Management",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 113
      }
    ],
    "totalWordCount": 1493,
    "estimatedReadingTime": 360000,
    "title": "memory_management_and_allocation",
    "frontmatter": {}
  },
  "public\\content\\redis\\architecture\\internal_data_structure_implementation.md": {
    "path": "public\\content\\redis\\architecture\\internal_data_structure_implementation.md",
    "sections": [
      {
        "id": "redis-internal-data-structure-implementation",
        "title": "Redis Internal Data Structure Implementation",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "foundation-dynamic-strings-sds",
        "title": "Foundation: Dynamic Strings (SDS)",
        "level": 2,
        "wordCount": 233
      },
      {
        "id": "dictionary-implementation-hash-tables",
        "title": "Dictionary Implementation (Hash Tables)",
        "level": 2,
        "wordCount": 129
      },
      {
        "id": "lists-from-linked-lists-to-quicklists",
        "title": "Lists: From Linked Lists to QuickLists",
        "level": 2,
        "wordCount": 186
      },
      {
        "id": "sets-hash-tables-vs-intsets",
        "title": "Sets: Hash Tables vs. Intsets",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "sorted-sets-skip-lists-hash-tables",
        "title": "Sorted Sets: Skip Lists + Hash Tables",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "hyperloglog-probabilistic-counting",
        "title": "HyperLogLog: Probabilistic Counting",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "streams-radix-tree-listpacks",
        "title": "Streams: Radix Tree + Listpacks",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "code-example-using-redis-data-structures",
        "title": "Code Example: Using Redis Data Structures",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "redis-object-system",
        "title": "Redis Object System",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 124
      }
    ],
    "totalWordCount": 1143,
    "estimatedReadingTime": 300000,
    "title": "internal_data_structure_implementation",
    "frontmatter": {}
  },
  "public\\content\\redis\\architecture\\command_processing_pipeline.md": {
    "path": "public\\content\\redis\\architecture\\command_processing_pipeline.md",
    "sections": [
      {
        "id": "redis-command-processing-pipeline-a-first-principles-explanation",
        "title": "Redis Command Processing Pipeline: A First Principles Explanation",
        "level": 1,
        "wordCount": 45
      },
      {
        "id": "1-what-is-redis-at-its-core",
        "title": "1. What is Redis at its core?",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "2-the-basic-communication-model",
        "title": "2. The Basic Communication Model",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "3-the-command-processing-pipeline",
        "title": "3. The Command Processing Pipeline",
        "level": 2,
        "wordCount": 520
      },
      {
        "id": "4-the-big-picture-how-it-all-fits-together",
        "title": "4. The Big Picture: How It All Fits Together",
        "level": 2,
        "wordCount": 137
      },
      {
        "id": "5-important-optimizations-in-the-pipeline",
        "title": "5. Important Optimizations in the Pipeline",
        "level": 2,
        "wordCount": 147
      },
      {
        "id": "6-understanding-through-a-concrete-example",
        "title": "6. Understanding Through a Concrete Example",
        "level": 2,
        "wordCount": 175
      },
      {
        "id": "7-advanced-topics-in-the-redis-command-pipeline",
        "title": "7. Advanced Topics in the Redis Command Pipeline",
        "level": 2,
        "wordCount": 166
      },
      {
        "id": "8-understanding-redis-command-pipeline-performance",
        "title": "8. Understanding Redis Command Pipeline Performance",
        "level": 2,
        "wordCount": 150
      },
      {
        "id": "9-putting-it-all-together",
        "title": "9. Putting It All Together",
        "level": 2,
        "wordCount": 123
      }
    ],
    "totalWordCount": 1593,
    "estimatedReadingTime": 420000,
    "title": "command_processing_pipeline",
    "frontmatter": {}
  },
  "public\\content\\redis\\architecture\\client_connection_handling.md": {
    "path": "public\\content\\redis\\architecture\\client_connection_handling.md",
    "sections": [
      {
        "id": "redis-client-connection-handling-first-principles",
        "title": "Redis Client Connection Handling: First Principles",
        "level": 1,
        "wordCount": 29
      },
      {
        "id": "1-what-is-a-connection",
        "title": "1. What is a Connection?",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "2-basic-connection-lifecycle",
        "title": "2. Basic Connection Lifecycle",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "3-connection-pooling",
        "title": "3. Connection Pooling",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "4-connection-events-and-states",
        "title": "4. Connection Events and States",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "5-reconnection-strategies",
        "title": "5. Reconnection Strategies",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "6-connection-pipelining",
        "title": "6. Connection Pipelining",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "7-pubsub-connections",
        "title": "7. Pub/Sub Connections",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "8-sentinel-and-cluster-connection-handling",
        "title": "8. Sentinel and Cluster Connection Handling",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "9-connection-security",
        "title": "9. Connection Security",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "10-handling-connection-timeouts",
        "title": "10. Handling Connection Timeouts",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "11-connection-context-and-state-sharing",
        "title": "11. Connection Context and State Sharing",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "12-monitoring-connection-health",
        "title": "12. Monitoring Connection Health",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 78
      }
    ],
    "totalWordCount": 1032,
    "estimatedReadingTime": 300000,
    "title": "client_connection_handling",
    "frontmatter": {}
  },
  "public\\content\\redis\\architecture\\background_task_processing.md": {
    "path": "public\\content\\redis\\architecture\\background_task_processing.md",
    "sections": [
      {
        "id": "redis-background-task-processing-from-first-principles",
        "title": "Redis Background Task Processing: From First Principles",
        "level": 1,
        "wordCount": 26
      },
      {
        "id": "1-understanding-the-problem-space",
        "title": "1. Understanding the Problem Space",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "2-the-queue-pattern",
        "title": "2. The Queue Pattern",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "3-enter-redis",
        "title": "3. Enter Redis",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "4-redis-data-structures-for-task-queues",
        "title": "4. Redis Data Structures for Task Queues",
        "level": 2,
        "wordCount": 169
      },
      {
        "id": "5-task-queue-reliability-and-durability",
        "title": "5. Task Queue Reliability and Durability",
        "level": 2,
        "wordCount": 129
      },
      {
        "id": "6-practical-implementations-with-redis-libraries",
        "title": "6. Practical Implementations with Redis Libraries",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "7-scaling-background-processing",
        "title": "7. Scaling Background Processing",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "8-monitoring-and-observability",
        "title": "8. Monitoring and Observability",
        "level": 2,
        "wordCount": 25
      },
      {
        "id": "9-common-patterns-and-best-practices",
        "title": "9. Common Patterns and Best Practices",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "10-real-world-example-e-commerce-order-processing",
        "title": "10. Real-World Example: E-commerce Order Processing",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "11-conclusion-and-advanced-topics",
        "title": "11. Conclusion and Advanced Topics",
        "level": 2,
        "wordCount": 138
      }
    ],
    "totalWordCount": 1035,
    "estimatedReadingTime": 300000,
    "title": "background_task_processing",
    "frontmatter": {}
  },
  "public\\content\\react\\intermediate\\strict_mode.md": {
    "path": "public\\content\\react\\intermediate\\strict_mode.md",
    "sections": [
      {
        "id": "understanding-reacts-strict-mode-a-first-principles-approach",
        "title": "Understanding React's Strict Mode: A First Principles Approach",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "the-core-purpose-of-strict-mode",
        "title": "The Core Purpose of Strict Mode",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "how-strict-mode-works",
        "title": "How Strict Mode Works",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "implementing-strict-mode",
        "title": "Implementing Strict Mode",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "double-invocation-exposing-side-effects",
        "title": "Double Invocation: Exposing Side Effects",
        "level": 2,
        "wordCount": 152
      },
      {
        "id": "detecting-impure-rendering",
        "title": "Detecting Impure Rendering",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "detecting-legacy-lifecycle-methods",
        "title": "Detecting Legacy Lifecycle Methods",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "identifying-legacy-string-ref-api",
        "title": "Identifying Legacy String Ref API",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "finding-unexpected-side-effects",
        "title": "Finding Unexpected Side Effects",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "preparing-for-async-rendering",
        "title": "Preparing for Async Rendering",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "detecting-state-updates-in-useeffect-without-dependencies",
        "title": "Detecting State Updates in useEffect Without Dependencies",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "real-world-development-with-strict-mode",
        "title": "Real-World Development with Strict Mode",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "a-complete-strict-mode-example",
        "title": "A Complete Strict Mode Example",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "common-questions-about-strict-mode",
        "title": "Common Questions About Strict Mode",
        "level": 2,
        "wordCount": 173
      },
      {
        "id": "strict-mode-beyond-the-technical-details",
        "title": "Strict Mode: Beyond the Technical Details",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 133
      }
    ],
    "totalWordCount": 1437,
    "estimatedReadingTime": 360000,
    "title": "strict_mode",
    "frontmatter": {}
  },
  "public\\content\\react\\intermediate\\render_props.md": {
    "path": "public\\content\\react\\intermediate\\render_props.md",
    "sections": [
      {
        "id": "understanding-render-props-in-react-from-first-principles",
        "title": "Understanding Render Props in React from First Principles",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "the-component-reuse-problem",
        "title": "The Component Reuse Problem",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "what-is-a-render-prop",
        "title": "What Is a Render Prop?",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "the-anatomy-of-a-render-prop-component",
        "title": "The Anatomy of a Render Prop Component",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "using-a-render-prop-component",
        "title": "Using a Render Prop Component",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "the-children-prop-as-a-render-prop",
        "title": "The Children Prop as a Render Prop",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "real-world-example-creating-a-toggleable-component",
        "title": "Real-World Example: Creating a Toggleable Component",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "functional-components-with-render-props",
        "title": "Functional Components with Render Props",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "render-props-vs-higher-order-components",
        "title": "Render Props vs Higher-Order Components",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "advanced-patterns-with-render-props",
        "title": "Advanced Patterns with Render Props",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "render-props-with-typescript",
        "title": "Render Props with TypeScript",
        "level": 2,
        "wordCount": 21
      },
      {
        "id": "where-render-props-shine",
        "title": "Where Render Props Shine",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "render-props-vs-hooks",
        "title": "Render Props vs Hooks",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "real-world-examples-in-popular-libraries",
        "title": "Real-World Examples in Popular Libraries",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "building-a-complete-example-a-draggable-component",
        "title": "Building a Complete Example: A Draggable Component",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 141
      }
    ],
    "totalWordCount": 1182,
    "estimatedReadingTime": 300000,
    "title": "render_props",
    "frontmatter": {}
  },
  "public\\content\\react\\intermediate\\refs.md": {
    "path": "public\\content\\react\\intermediate\\refs.md",
    "sections": [
      {
        "id": "understanding-refs-in-react-from-first-principles",
        "title": "Understanding Refs in React from First Principles",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "the-core-problem-imperative-access-in-a-declarative-world",
        "title": "The Core Problem: Imperative Access in a Declarative World",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "what-are-refs-really",
        "title": "What Are Refs, Really?",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "creating-and-using-refs",
        "title": "Creating and Using Refs",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "the-anatomy-of-a-ref-object",
        "title": "The Anatomy of a Ref Object",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "refs-vs-state-a-critical-distinction",
        "title": "Refs vs. State: A Critical Distinction",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "common-use-cases-for-refs",
        "title": "Common Use Cases for Refs",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "forwarding-refs",
        "title": "Forwarding Refs",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "the-callback-ref-pattern",
        "title": "The Callback Ref Pattern",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "creating-custom-hooks-with-refs",
        "title": "Creating Custom Hooks with Refs",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "when-to-use-refs-vs-other-react-patterns",
        "title": "When to Use Refs vs. Other React Patterns",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 97
      }
    ],
    "totalWordCount": 837,
    "estimatedReadingTime": 240000,
    "title": "refs",
    "frontmatter": {}
  },
  "public\\content\\react\\intermediate\\portals.md": {
    "path": "public\\content\\react\\intermediate\\portals.md",
    "sections": [
      {
        "id": "understanding-react-portals-a-first-principles-exploration",
        "title": "Understanding React Portals: A First Principles Exploration",
        "level": 1,
        "wordCount": 59
      },
      {
        "id": "the-fundamental-problem-portals-solve",
        "title": "The Fundamental Problem Portals Solve",
        "level": 2,
        "wordCount": 150
      },
      {
        "id": "what-are-react-portals",
        "title": "What Are React Portals?",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "how-portals-work-the-fundamentals",
        "title": "How Portals Work: The Fundamentals",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "understanding-portal-behavior-key-principles",
        "title": "Understanding Portal Behavior: Key Principles",
        "level": 2,
        "wordCount": 221
      },
      {
        "id": "practical-examples-when-to-use-portals",
        "title": "Practical Examples: When to Use Portals",
        "level": 2,
        "wordCount": 156
      },
      {
        "id": "advanced-portal-techniques",
        "title": "Advanced Portal Techniques",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "understanding-portal-limitations-and-challenges",
        "title": "Understanding Portal Limitations and Challenges",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "building-reusable-portal-abstractions",
        "title": "Building Reusable Portal Abstractions",
        "level": 2,
        "wordCount": 24
      },
      {
        "id": "comparing-portals-with-alternative-approaches",
        "title": "Comparing Portals with Alternative Approaches",
        "level": 2,
        "wordCount": 182
      },
      {
        "id": "best-practices-for-using-portals",
        "title": "Best Practices for Using Portals",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 143
      }
    ],
    "totalWordCount": 1431,
    "estimatedReadingTime": 360000,
    "title": "portals",
    "frontmatter": {}
  },
  "public\\content\\react\\intermediate\\memo.md": {
    "path": "public\\content\\react\\intermediate\\memo.md",
    "sections": [
      {
        "id": "reactmemo-a-deep-exploration-from-first-principles",
        "title": "React.memo: A Deep Exploration From First Principles",
        "level": 1,
        "wordCount": 7
      },
      {
        "id": "understanding-performance-optimization-in-react",
        "title": "Understanding Performance Optimization in React",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "memoization-the-core-concept",
        "title": "Memoization: The Core Concept",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "reactmemo-component-level-memoization",
        "title": "React.memo: Component-Level Memoization",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "how-reactmemo-works-under-the-hood",
        "title": "How React.memo Works Under the Hood",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "shallow-comparison-a-critical-detail",
        "title": "Shallow Comparison: A Critical Detail",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "custom-comparison-function",
        "title": "Custom Comparison Function",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "a-better-solution-dependency-stability",
        "title": "A Better Solution: Dependency Stability",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "reactmemo-and-function-props",
        "title": "React.memo and Function Props",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "practical-example-a-complex-list",
        "title": "Practical Example: A Complex List",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "when-should-you-use-reactmemo",
        "title": "When Should You Use React.memo?",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "common-pitfalls-and-misconceptions",
        "title": "Common Pitfalls and Misconceptions",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "reactmemo-in-class-components-reactpurecomponent",
        "title": "React.memo in Class Components: React.PureComponent",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "beyond-reactmemo-other-performance-optimization-techniques",
        "title": "Beyond React.memo: Other Performance Optimization Techniques",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "advanced-reactmemo-performance-monitoring",
        "title": "Advanced React.memo: Performance Monitoring",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "putting-it-all-together-a-complete-example",
        "title": "Putting It All Together: A Complete Example",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "conclusion-reactmemo-in-the-react-ecosystem",
        "title": "Conclusion: React.memo in the React Ecosystem",
        "level": 2,
        "wordCount": 125
      }
    ],
    "totalWordCount": 1259,
    "estimatedReadingTime": 360000,
    "title": "memo",
    "frontmatter": {}
  },
  "public\\content\\react\\intermediate\\hoc.md": {
    "path": "public\\content\\react\\intermediate\\hoc.md",
    "sections": [
      {
        "id": "higher-order-components-hocs-in-react-a-first-principles-explanation",
        "title": "Higher-Order Components (HOCs) in React: A First Principles Explanation",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "understanding-functions-in-javascript",
        "title": "Understanding Functions in JavaScript",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "components-as-functions",
        "title": "Components as Functions",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "what-is-a-higher-order-component",
        "title": "What Is a Higher-Order Component?",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "a-simple-hoc-example-withlogging",
        "title": "A Simple HOC Example: withLogging",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "a-more-practical-example-withdata",
        "title": "A More Practical Example: withData",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "understanding-hoc-composition",
        "title": "Understanding HOC Composition",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "hoc-conventions-and-best-practices",
        "title": "HOC Conventions and Best Practices",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "common-use-cases-for-hocs",
        "title": "Common Use Cases for HOCs",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "the-evolution-beyond-hocs",
        "title": "The Evolution Beyond HOCs",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "when-to-use-hocs-vs-other-patterns",
        "title": "When to Use HOCs vs. Other Patterns",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 132
      }
    ],
    "totalWordCount": 707,
    "estimatedReadingTime": 180000,
    "title": "hoc",
    "frontmatter": {}
  },
  "public\\content\\react\\intermediate\\fragments.md": {
    "path": "public\\content\\react\\intermediate\\fragments.md",
    "sections": [
      {
        "id": "understanding-react-fragments-from-first-principles",
        "title": "Understanding React Fragments from First Principles",
        "level": 1,
        "wordCount": 37
      },
      {
        "id": "the-single-root-element-constraint",
        "title": "The Single Root Element Constraint",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "the-traditional-solution-wrapper-divs",
        "title": "The Traditional Solution: Wrapper Divs",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "enter-react-fragments",
        "title": "Enter React Fragments",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "the-shorthand-syntax",
        "title": "The Shorthand Syntax",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 192
      },
      {
        "id": "fragments-and-reacts-reconciliation",
        "title": "Fragments and React's Reconciliation",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "beyond-simple-grouping-fragment-props",
        "title": "Beyond Simple Grouping: Fragment Props",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "when-not-to-use-fragments",
        "title": "When Not to Use Fragments",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "under-the-hood-how-fragments-work",
        "title": "Under the Hood: How Fragments Work",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "practical-exercise-refactoring-to-use-fragments",
        "title": "Practical Exercise: Refactoring to Use Fragments",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "common-mistakes-and-misconceptions",
        "title": "Common Mistakes and Misconceptions",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "fragments-in-modern-react",
        "title": "Fragments in Modern React",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 124
      }
    ],
    "totalWordCount": 1038,
    "estimatedReadingTime": 300000,
    "title": "fragments",
    "frontmatter": {}
  },
  "public\\content\\react\\intermediate\\error_boundaries.md": {
    "path": "public\\content\\react\\intermediate\\error_boundaries.md",
    "sections": [
      {
        "id": "error-boundaries-in-react-from-first-principles",
        "title": "Error Boundaries in React: From First Principles",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "the-fundamental-problem",
        "title": "The Fundamental Problem",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "the-conceptual-solution",
        "title": "The Conceptual Solution",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "what-error-boundaries-actually-are",
        "title": "What Error Boundaries Actually Are",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "creating-an-error-boundary-component",
        "title": "Creating an Error Boundary Component",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "using-the-error-boundary-in-your-application",
        "title": "Using the Error Boundary in Your Application",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "a-real-world-example-error-in-data-fetching",
        "title": "A Real-World Example: Error in Data Fetching",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "strategic-placement-of-error-boundaries",
        "title": "Strategic Placement of Error Boundaries",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "key-limitations-of-error-boundaries",
        "title": "Key Limitations of Error Boundaries",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "handling-errors-outside-error-boundaries",
        "title": "Handling Errors Outside Error Boundaries",
        "level": 2,
        "wordCount": 17
      },
      {
        "id": "error-boundary-libraries",
        "title": "Error Boundary Libraries",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "best-practices-for-error-boundaries",
        "title": "Best Practices for Error Boundaries",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "understanding-the-error-recovery-flow",
        "title": "Understanding the Error Recovery Flow",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "practical-example-a-complete-implementation",
        "title": "Practical Example: A Complete Implementation",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 129
      }
    ],
    "totalWordCount": 976,
    "estimatedReadingTime": 240000,
    "title": "error_boundaries",
    "frontmatter": {}
  },
  "public\\content\\react\\intermediate\\context.md": {
    "path": "public\\content\\react\\intermediate\\context.md",
    "sections": [
      {
        "id": "understanding-the-context-api-in-react",
        "title": "Understanding the Context API in React",
        "level": 1,
        "wordCount": 55
      },
      {
        "id": "the-problem-prop-drilling",
        "title": "The Problem: Prop Drilling",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "enter-the-context-api",
        "title": "Enter the Context API",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "how-context-works-under-the-hood",
        "title": "How Context Works Under the Hood",
        "level": 2,
        "wordCount": 147
      },
      {
        "id": "advanced-context-patterns",
        "title": "Advanced Context Patterns",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "context-vs-other-state-management-solutions",
        "title": "Context vs. Other State Management Solutions",
        "level": 2,
        "wordCount": 151
      },
      {
        "id": "real-world-examples",
        "title": "Real-World Examples",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "best-practices-and-common-pitfalls",
        "title": "Best Practices and Common Pitfalls",
        "level": 2,
        "wordCount": 144
      },
      {
        "id": "building-a-complete-context-system",
        "title": "Building a Complete Context System",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 135
      }
    ],
    "totalWordCount": 1151,
    "estimatedReadingTime": 300000,
    "title": "context",
    "frontmatter": {}
  },
  "public\\content\\react\\intermediate\\code_splitting.md": {
    "path": "public\\content\\react\\intermediate\\code_splitting.md",
    "sections": [
      {
        "id": "code-splitting-in-react-a-first-principles-approach",
        "title": "Code Splitting in React: A First Principles Approach",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "the-problem-bundle-size",
        "title": "The Problem: Bundle Size",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "the-first-principle-load-only-what-you-need",
        "title": "The First Principle: Load Only What You Need",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "how-code-splitting-works-in-react",
        "title": "How Code Splitting Works in React",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "dynamic-imports-the-foundation",
        "title": "Dynamic Imports: The Foundation",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "reactlazy-and-suspense",
        "title": "React.lazy and Suspense",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "practical-example-1-route-based-code-splitting",
        "title": "Practical Example 1: Route-Based Code Splitting",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "practical-example-2-component-level-code-splitting",
        "title": "Practical Example 2: Component-Level Code Splitting",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "practical-example-3-library-splitting-with-webpack",
        "title": "Practical Example 3: Library Splitting with Webpack",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "named-chunks-for-better-organization",
        "title": "Named Chunks for Better Organization",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "implementing-a-loading-strategy",
        "title": "Implementing a Loading Strategy",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "preloading-for-better-performance",
        "title": "Preloading for Better Performance",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "error-handling-in-code-splitting",
        "title": "Error Handling in Code Splitting",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "measuring-the-impact",
        "title": "Measuring the Impact",
        "level": 2,
        "wordCount": 24
      },
      {
        "id": "advanced-patterns-selective-chunking",
        "title": "Advanced Patterns: Selective Chunking",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "real-world-implementation-complete-example",
        "title": "Real-World Implementation: Complete Example",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "visualizing-the-bundle-output",
        "title": "Visualizing the Bundle Output",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "tradeoffs-and-considerations",
        "title": "Tradeoffs and Considerations",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "best-practices-for-react-code-splitting",
        "title": "Best Practices for React Code Splitting",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 96
      }
    ],
    "totalWordCount": 1411,
    "estimatedReadingTime": 360000,
    "title": "code_splitting",
    "frontmatter": {}
  },
  "public\\content\\react\\hooks\\useState.md": {
    "path": "public\\content\\react\\hooks\\useState.md",
    "sections": [
      {
        "id": "reacts-usestate-hook-understanding-from-first-principles",
        "title": "React's useState Hook: Understanding from First Principles",
        "level": 1,
        "wordCount": 28
      },
      {
        "id": "1-the-problem-why-we-need-state",
        "title": "1. The Problem: Why We Need State",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "2-the-mental-model-components-as-functions-of-state",
        "title": "2. The Mental Model: Components as Functions of State",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "3-enter-usestate-reacts-state-management-solution",
        "title": "3. Enter useState: React's State Management Solution",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "4-how-usestate-works-under-the-hood",
        "title": "4. How useState Works Under the Hood",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "5-the-rules-of-usestate",
        "title": "5. The Rules of useState",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "6-functional-updates-handling-state-based-on-previous-state",
        "title": "6. Functional Updates: Handling State Based on Previous State",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "7-managing-complex-state",
        "title": "7. Managing Complex State",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "8-multiple-state-variables",
        "title": "8. Multiple State Variables",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "9-lazy-initial-state",
        "title": "9. Lazy Initial State",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "10-practical-example-a-complete-todo-application",
        "title": "10. Practical Example: A Complete Todo Application",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "11-common-usestate-pitfalls-and-solutions",
        "title": "11. Common useState Pitfalls and Solutions",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "12-when-to-use-usestate-vs-other-state-management-solutions",
        "title": "12. When to Use useState vs. Other State Management Solutions",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "13-conclusion-thinking-in-react-state",
        "title": "13. Conclusion: Thinking in React State",
        "level": 2,
        "wordCount": 114
      }
    ],
    "totalWordCount": 1063,
    "estimatedReadingTime": 300000,
    "title": "useState",
    "frontmatter": {}
  },
  "public\\content\\react\\hooks\\useRef.md": {
    "path": "public\\content\\react\\hooks\\useRef.md",
    "sections": [
      {
        "id": "reacts-useref-hook-understanding-from-first-principles",
        "title": "React's useRef Hook: Understanding from First Principles",
        "level": 1,
        "wordCount": 25
      },
      {
        "id": "1-the-problem-why-we-need-references",
        "title": "1. The Problem: Why We Need References",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "2-the-mental-model-a-persistent-container",
        "title": "2. The Mental Model: A Persistent Container",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "3-the-basic-syntax-and-usage",
        "title": "3. The Basic Syntax and Usage",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "4-how-useref-works-under-the-hood",
        "title": "4. How useRef Works Under the Hood",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "5-key-differences-between-useref-and-usestate",
        "title": "5. Key Differences Between useRef and useState",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "6-common-use-cases-for-useref",
        "title": "6. Common Use Cases for useRef",
        "level": 2,
        "wordCount": 162
      },
      {
        "id": "7-advanced-patterns-with-useref",
        "title": "7. Advanced Patterns with useRef",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "8-useref-and-cleanup-preventing-memory-leaks",
        "title": "8. useRef and Cleanup: Preventing Memory Leaks",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "9-common-useref-pitfalls-and-solutions",
        "title": "9. Common useRef Pitfalls and Solutions",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "10-performance-optimization-with-useref",
        "title": "10. Performance Optimization with useRef",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "11-real-world-example-a-complete-form-with-validation",
        "title": "11. Real-World Example: A Complete Form with Validation",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "12-when-to-use-useref-vs-other-solutions",
        "title": "12. When to Use useRef vs. Other Solutions",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "13-conclusion-thinking-in-react-references",
        "title": "13. Conclusion: Thinking in React References",
        "level": 2,
        "wordCount": 149
      }
    ],
    "totalWordCount": 1223,
    "estimatedReadingTime": 300000,
    "title": "useRef",
    "frontmatter": {}
  },
  "public\\content\\react\\hooks\\useMemo.md": {
    "path": "public\\content\\react\\hooks\\useMemo.md",
    "sections": [
      {
        "id": "reacts-usememo-hook-understanding-from-first-principles",
        "title": "React's useMemo Hook: Understanding from First Principles",
        "level": 1,
        "wordCount": 27
      },
      {
        "id": "1-the-problem-expensive-calculations-in-react-components",
        "title": "1. The Problem: Expensive Calculations in React Components",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "2-the-mental-model-a-computation-cache-with-dependencies",
        "title": "2. The Mental Model: A Computation Cache with Dependencies",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "3-the-basic-syntax-and-usage",
        "title": "3. The Basic Syntax and Usage",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "4-how-usememo-works-under-the-hood",
        "title": "4. How useMemo Works Under the Hood",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "5-a-simple-example-memoizing-expensive-calculations",
        "title": "5. A Simple Example: Memoizing Expensive Calculations",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "6-when-to-use-usememo-performance-optimization-scenarios",
        "title": "6. When to Use useMemo: Performance Optimization Scenarios",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "7-common-usememo-patterns",
        "title": "7. Common useMemo Patterns",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "8-advanced-usememo-techniques",
        "title": "8. Advanced useMemo Techniques",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "9-common-usememo-pitfalls-and-solutions",
        "title": "9. Common useMemo Pitfalls and Solutions",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "10-usememo-vs-other-react-patterns",
        "title": "10. useMemo vs. Other React Patterns",
        "level": 2,
        "wordCount": 125
      },
      {
        "id": "11-a-complete-real-world-example",
        "title": "11. A Complete Real-World Example",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "12-usememo-and-server-components",
        "title": "12. useMemo and Server Components",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "13-performance-measurement-and-optimization",
        "title": "13. Performance Measurement and Optimization",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "14-usememo-and-typescript",
        "title": "14. useMemo and TypeScript",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "15-testing-components-with-usememo",
        "title": "15. Testing Components with useMemo",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "16-conclusion-mental-models-for-usememo",
        "title": "16. Conclusion: Mental Models for useMemo",
        "level": 2,
        "wordCount": 225
      }
    ],
    "totalWordCount": 1523,
    "estimatedReadingTime": 420000,
    "title": "useMemo",
    "frontmatter": {}
  },
  "public\\content\\react\\hooks\\useLayoutEffect.md": {
    "path": "public\\content\\react\\hooks\\useLayoutEffect.md",
    "sections": [
      {
        "id": "understanding-uselayouteffect-from-first-principles",
        "title": "Understanding `useLayoutEffect` from First Principles",
        "level": 1,
        "wordCount": 26
      },
      {
        "id": "1-the-core-problem-synchronizing-with-the-dom",
        "title": "1. The Core Problem: Synchronizing with the DOM",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "2-effect-hooks-in-react-the-foundation",
        "title": "2. Effect Hooks in React: The Foundation",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "3-the-browser-rendering-pipeline",
        "title": "3. The Browser Rendering Pipeline",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "4-basic-usage-pattern",
        "title": "4. Basic Usage Pattern",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "5-useeffect-vs-uselayouteffect-a-practical-comparison",
        "title": "5. `useEffect` vs `useLayoutEffect`: A Practical Comparison",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "6-performance-considerations",
        "title": "6. Performance Considerations",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "7-the-cleanup-function",
        "title": "7. The Cleanup Function",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "8-server-side-rendering-considerations",
        "title": "8. Server-Side Rendering Considerations",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "9-dependency-array-pattern",
        "title": "9. Dependency Array Pattern",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "10-common-use-cases",
        "title": "10. Common Use Cases",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "11-advanced-pattern-coordinating-multiple-effects",
        "title": "11. Advanced Pattern: Coordinating Multiple Effects",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "12-edge-cases-and-gotchas",
        "title": "12. Edge Cases and Gotchas",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 109
      }
    ],
    "totalWordCount": 734,
    "estimatedReadingTime": 180000,
    "title": "useLayoutEffect",
    "frontmatter": {}
  },
  "public\\content\\react\\hooks\\useImperativeHandle.md": {
    "path": "public\\content\\react\\hooks\\useImperativeHandle.md",
    "sections": [
      {
        "id": "reacts-useimperativehandle-hook-understanding-from-first-principles",
        "title": "React's useImperativeHandle Hook: Understanding from First Principles",
        "level": 1,
        "wordCount": 28
      },
      {
        "id": "1-the-problem-accessing-component-internals",
        "title": "1. The Problem: Accessing Component Internals",
        "level": 2,
        "wordCount": 188
      },
      {
        "id": "2-the-mental-model-customizing-ref-exposure",
        "title": "2. The Mental Model: Customizing Ref Exposure",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "3-the-basic-syntax-and-required-setup",
        "title": "3. The Basic Syntax and Required Setup",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "4-how-useimperativehandle-works-under-the-hood",
        "title": "4. How useImperativeHandle Works Under the Hood",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "5-a-simple-example-custom-input-component",
        "title": "5. A Simple Example: Custom Input Component",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "6-common-useimperativehandle-patterns",
        "title": "6. Common useImperativeHandle Patterns",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "7-using-dependencies-with-useimperativehandle",
        "title": "7. Using Dependencies with useImperativeHandle",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "8-advanced-useimperativehandle-techniques",
        "title": "8. Advanced useImperativeHandle Techniques",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "9-common-useimperativehandle-pitfalls-and-solutions",
        "title": "9. Common useImperativeHandle Pitfalls and Solutions",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "10-a-complete-real-world-example",
        "title": "10. A Complete Real-World Example",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "11-useimperativehandle-in-the-modern-react-ecosystem",
        "title": "11. useImperativeHandle in the Modern React Ecosystem",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "12-testing-components-with-useimperativehandle",
        "title": "12. Testing Components with useImperativeHandle",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "13-typescript-integration-with-useimperativehandle",
        "title": "13. TypeScript Integration with useImperativeHandle",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "14-performance-considerations-with-useimperativehandle",
        "title": "14. Performance Considerations with useImperativeHandle",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "15-conclusion-mental-models-for-useimperativehandle",
        "title": "15. Conclusion: Mental Models for useImperativeHandle",
        "level": 2,
        "wordCount": 292
      }
    ],
    "totalWordCount": 1518,
    "estimatedReadingTime": 420000,
    "title": "useImperativeHandle",
    "frontmatter": {}
  },
  "public\\content\\react\\hooks\\useEffect.md": {
    "path": "public\\content\\react\\hooks\\useEffect.md",
    "sections": [
      {
        "id": "reacts-useeffect-hook-understanding-from-first-principles",
        "title": "React's useEffect Hook: Understanding from First Principles",
        "level": 1,
        "wordCount": 27
      },
      {
        "id": "1-the-problem-side-effects-in-react-components",
        "title": "1. The Problem: Side Effects in React Components",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "2-the-mental-model-synchronizing-with-external-systems",
        "title": "2. The Mental Model: Synchronizing with External Systems",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "3-the-basic-syntax-and-usage",
        "title": "3. The Basic Syntax and Usage",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "4-how-useeffect-works-under-the-hood",
        "title": "4. How useEffect Works Under the Hood",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "5-effect-cleanup-preventing-memory-leaks",
        "title": "5. Effect Cleanup: Preventing Memory Leaks",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "6-understanding-the-dependency-array",
        "title": "6. Understanding the Dependency Array",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "7-common-useeffect-patterns",
        "title": "7. Common useEffect Patterns",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "8-advanced-useeffect-techniques",
        "title": "8. Advanced useEffect Techniques",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "9-common-useeffect-pitfalls-and-solutions",
        "title": "9. Common useEffect Pitfalls and Solutions",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "10-real-world-example-a-complete-component",
        "title": "10. Real-World Example: A Complete Component",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "11-useeffect-and-data-fetching-modern-approaches",
        "title": "11. useEffect and Data Fetching: Modern Approaches",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "12-useeffect-and-server-components-modern-react",
        "title": "12. useEffect and Server Components (Modern React)",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "13-useeffect-and-animations",
        "title": "13. useEffect and Animations",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "14-when-to-use-useeffect-vs-other-hooks",
        "title": "14. When to Use useEffect vs. Other Hooks",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "15-testing-components-with-useeffect",
        "title": "15. Testing Components with useEffect",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "16-conclusion-mental-models-for-useeffect",
        "title": "16. Conclusion: Mental Models for useEffect",
        "level": 2,
        "wordCount": 197
      }
    ],
    "totalWordCount": 1561,
    "estimatedReadingTime": 420000,
    "title": "useEffect",
    "frontmatter": {}
  },
  "public\\content\\react\\hooks\\useCallback.md": {
    "path": "public\\content\\react\\hooks\\useCallback.md",
    "sections": [
      {
        "id": "reacts-usecallback-hook-understanding-from-first-principles",
        "title": "React's useCallback Hook: Understanding from First Principles",
        "level": 1,
        "wordCount": 27
      },
      {
        "id": "1-the-problem-function-recreation-in-react-components",
        "title": "1. The Problem: Function Recreation in React Components",
        "level": 2,
        "wordCount": 158
      },
      {
        "id": "2-the-mental-model-a-memoized-function-reference",
        "title": "2. The Mental Model: A Memoized Function Reference",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "3-the-basic-syntax-and-usage",
        "title": "3. The Basic Syntax and Usage",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "4-how-usecallback-works-under-the-hood",
        "title": "4. How useCallback Works Under the Hood",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "5-a-simple-example-preventing-unnecessary-effect-runs",
        "title": "5. A Simple Example: Preventing Unnecessary Effect Runs",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "6-when-to-use-usecallback-common-scenarios",
        "title": "6. When to Use useCallback: Common Scenarios",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "7-common-usecallback-patterns",
        "title": "7. Common useCallback Patterns",
        "level": 2,
        "wordCount": 143
      },
      {
        "id": "8-advanced-usecallback-techniques",
        "title": "8. Advanced useCallback Techniques",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "9-common-usecallback-pitfalls-and-solutions",
        "title": "9. Common useCallback Pitfalls and Solutions",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "10-usecallback-vs-other-react-patterns",
        "title": "10. useCallback vs. Other React Patterns",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "11-a-complete-real-world-example",
        "title": "11. A Complete Real-World Example",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "12-usecallback-and-server-components",
        "title": "12. useCallback and Server Components",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "13-performance-measurement-with-usecallback",
        "title": "13. Performance Measurement with useCallback",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "14-usecallback-and-typescript",
        "title": "14. useCallback and TypeScript",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "15-testing-components-with-usecallback",
        "title": "15. Testing Components with useCallback",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "16-conclusion-mental-models-for-usecallback",
        "title": "16. Conclusion: Mental Models for useCallback",
        "level": 2,
        "wordCount": 216
      }
    ],
    "totalWordCount": 1558,
    "estimatedReadingTime": 420000,
    "title": "useCallback",
    "frontmatter": {}
  },
  "public\\content\\react\\beginner\\virtual_dom.md": {
    "path": "public\\content\\react\\beginner\\virtual_dom.md",
    "sections": [
      {
        "id": "understanding-the-virtual-dom-in-react",
        "title": "Understanding the Virtual DOM in React",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "what-is-the-dom",
        "title": "What is the DOM?",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "the-problem-with-direct-dom-manipulation",
        "title": "The Problem with Direct DOM Manipulation",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "enter-the-virtual-dom",
        "title": "Enter the Virtual DOM",
        "level": 2,
        "wordCount": 466
      },
      {
        "id": "example-list-rendering-with-keys",
        "title": "Example: List Rendering with Keys",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "how-react-implements-the-virtual-dom",
        "title": "How React Implements the Virtual DOM",
        "level": 2,
        "wordCount": 179
      },
      {
        "id": "practical-benefits-of-the-virtual-dom",
        "title": "Practical Benefits of the Virtual DOM",
        "level": 2,
        "wordCount": 218
      },
      {
        "id": "common-misconceptions-about-the-virtual-dom",
        "title": "Common Misconceptions About the Virtual DOM",
        "level": 2,
        "wordCount": 169
      },
      {
        "id": "practical-example-a-todo-list",
        "title": "Practical Example: A Todo List",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 124
      }
    ],
    "totalWordCount": 1636,
    "estimatedReadingTime": 420000,
    "title": "virtual_dom",
    "frontmatter": {}
  },
  "public\\content\\react\\beginner\\state.md": {
    "path": "public\\content\\react\\beginner\\state.md",
    "sections": [
      {
        "id": "understanding-react-state-from-first-principles",
        "title": "Understanding React State from First Principles",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "what-is-state-the-fundamental-concept",
        "title": "What is State? The Fundamental Concept",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "why-do-we-need-state",
        "title": "Why Do We Need State?",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "basic-state-implementation-class-components-vs-hooks",
        "title": "Basic State Implementation: Class Components vs. Hooks",
        "level": 2,
        "wordCount": 155
      },
      {
        "id": "the-state-update-mechanism-a-deeper-look",
        "title": "The State Update Mechanism: A Deeper Look",
        "level": 2,
        "wordCount": 184
      },
      {
        "id": "object-state-immutability-principle",
        "title": "Object State: Immutability Principle",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "state-organization-simple-vs-complex-state",
        "title": "State Organization: Simple vs. Complex State",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "derived-state-avoid-redundancy",
        "title": "Derived State: Avoid Redundancy",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "state-initialization-lazy-initial-state",
        "title": "State Initialization: Lazy Initial State",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "state-lifting-sharing-state-between-components",
        "title": "State Lifting: Sharing State Between Components",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "the-component-lifecycle-and-state",
        "title": "The Component Lifecycle and State",
        "level": 2,
        "wordCount": 145
      },
      {
        "id": "state-transitions-and-batching",
        "title": "State Transitions and Batching",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "advanced-state-patterns-custom-hooks",
        "title": "Advanced State Patterns: Custom Hooks",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "deep-dive-usereducer-for-complex-state-logic",
        "title": "Deep Dive: useReducer for Complex State Logic",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "state-and-context-global-state-management",
        "title": "State and Context: Global State Management",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "state-performance-considerations",
        "title": "State Performance Considerations",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "state-keys-and-resetting-state",
        "title": "State, Keys, and Resetting State",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "conclusion-the-state-of-react-state",
        "title": "Conclusion: The State of React State",
        "level": 2,
        "wordCount": 164
      }
    ],
    "totalWordCount": 1426,
    "estimatedReadingTime": 360000,
    "title": "state",
    "frontmatter": {}
  },
  "public\\content\\react\\beginner\\lists_and_keys.md": {
    "path": "public\\content\\react\\beginner\\lists_and_keys.md",
    "sections": [
      {
        "id": "lists-and-keys-in-react-from-first-principles",
        "title": "Lists and Keys in React: From First Principles",
        "level": 1,
        "wordCount": 68
      },
      {
        "id": "the-fundamental-concept-transforming-data-into-ui",
        "title": "The Fundamental Concept: Transforming Data into UI",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "basic-list-rendering-with-map",
        "title": "Basic List Rendering with map()",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "what-are-keys-and-why-are-they-essential",
        "title": "What Are Keys and Why Are They Essential?",
        "level": 2,
        "wordCount": 242
      },
      {
        "id": "using-ids-as-keys",
        "title": "Using IDs as Keys",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "the-anti-pattern-using-array-indices-as-keys",
        "title": "The Anti-Pattern: Using Array Indices as Keys",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "when-is-it-okay-to-use-index-keys",
        "title": "When Is It Okay to Use Index Keys?",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "generating-keys-when-you-dont-have-ids",
        "title": "Generating Keys When You Don't Have IDs",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "nested-lists-and-key-scope",
        "title": "Nested Lists and Key Scope",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "complex-list-items-and-component-extraction",
        "title": "Complex List Items and Component Extraction",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "common-patterns-for-dynamic-lists",
        "title": "Common Patterns for Dynamic Lists",
        "level": 2,
        "wordCount": 160
      },
      {
        "id": "performance-considerations-for-large-lists",
        "title": "Performance Considerations for Large Lists",
        "level": 2,
        "wordCount": 136
      },
      {
        "id": "common-anti-patterns-and-mistakes",
        "title": "Common Anti-Patterns and Mistakes",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "advanced-list-patterns",
        "title": "Advanced List Patterns",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "testing-lists-in-react",
        "title": "Testing Lists in React",
        "level": 2,
        "wordCount": 119
      },
      {
        "id": "real-world-list-patterns-in-react",
        "title": "Real-World List Patterns in React",
        "level": 2,
        "wordCount": 228
      },
      {
        "id": "working-with-dynamic-lists-and-keys-in-react",
        "title": "Working with Dynamic Lists and Keys in React",
        "level": 2,
        "wordCount": 169
      },
      {
        "id": "optimizing-list-rendering",
        "title": "Optimizing List Rendering",
        "level": 2,
        "wordCount": 249
      },
      {
        "id": "specialized-list-types-in-react",
        "title": "Specialized List Types in React",
        "level": 2,
        "wordCount": 137
      },
      {
        "id": "managing-list-state-patterns",
        "title": "Managing List State Patterns",
        "level": 2,
        "wordCount": 160
      },
      {
        "id": "handling-lists-in-forms",
        "title": "Handling Lists in Forms",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "error-handling-in-lists",
        "title": "Error Handling in Lists",
        "level": 2,
        "wordCount": 142
      },
      {
        "id": "advanced-list-rendering-techniques",
        "title": "Advanced List Rendering Techniques",
        "level": 2,
        "wordCount": 129
      },
      {
        "id": "conclusion-best-practices-for-lists-and-keys-in-react",
        "title": "Conclusion: Best Practices for Lists and Keys in React",
        "level": 2,
        "wordCount": 337
      }
    ],
    "totalWordCount": 3201,
    "estimatedReadingTime": 780000,
    "title": "lists_and_keys",
    "frontmatter": {}
  },
  "public\\content\\react\\beginner\\event_handling.md": {
    "path": "public\\content\\react\\beginner\\event_handling.md",
    "sections": [
      {
        "id": "event-handling-in-react-a-comprehensive-guide",
        "title": "Event Handling in React: A Comprehensive Guide",
        "level": 1,
        "wordCount": 44
      },
      {
        "id": "the-core-concept-of-events-in-react",
        "title": "The Core Concept of Events in React",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "basic-event-handling-syntax",
        "title": "Basic Event Handling Syntax",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "event-handler-patterns",
        "title": "Event Handler Patterns",
        "level": 2,
        "wordCount": 160
      },
      {
        "id": "the-synthetic-event-object",
        "title": "The Synthetic Event Object",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "preventing-default-behavior",
        "title": "Preventing Default Behavior",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "understanding-event-propagation",
        "title": "Understanding Event Propagation",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "common-react-events",
        "title": "Common React Events",
        "level": 2,
        "wordCount": 144
      },
      {
        "id": "handling-forms-in-react",
        "title": "Handling Forms in React",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "event-delegation-in-react",
        "title": "Event Delegation in React",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "custom-events-in-react",
        "title": "Custom Events in React",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "event-handling-with-class-components",
        "title": "Event Handling with Class Components",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "advanced-event-handling-patterns",
        "title": "Advanced Event Handling Patterns",
        "level": 2,
        "wordCount": 154
      },
      {
        "id": "common-event-handling-pitfalls-and-solutions",
        "title": "Common Event Handling Pitfalls and Solutions",
        "level": 2,
        "wordCount": 173
      },
      {
        "id": "testing-event-handlers",
        "title": "Testing Event Handlers",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "event-handling-in-complex-applications",
        "title": "Event Handling in Complex Applications",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "handling-events-in-context-providers",
        "title": "Handling Events in Context Providers",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "event-handling-with-react-hooks",
        "title": "Event Handling with React Hooks",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "performance-optimization-for-event-handlers",
        "title": "Performance Optimization for Event Handlers",
        "level": 2,
        "wordCount": 126
      },
      {
        "id": "advanced-event-patterns",
        "title": "Advanced Event Patterns",
        "level": 2,
        "wordCount": 232
      },
      {
        "id": "event-handling-in-react-18-and-beyond",
        "title": "Event Handling in React 18 and Beyond",
        "level": 2,
        "wordCount": 173
      },
      {
        "id": "building-an-event-driven-architecture-in-react",
        "title": "Building an Event-Driven Architecture in React",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "conclusion-mastering-event-handling-in-react",
        "title": "Conclusion: Mastering Event Handling in React",
        "level": 2,
        "wordCount": 265
      }
    ],
    "totalWordCount": 2538,
    "estimatedReadingTime": 660000,
    "title": "event_handling",
    "frontmatter": {}
  },
  "public\\content\\react\\beginner\\controlled_vs_uncontrolled.md": {
    "path": "public\\content\\react\\beginner\\controlled_vs_uncontrolled.md",
    "sections": [
      {
        "id": "controlled-vs-uncontrolled-components-in-react",
        "title": "Controlled vs Uncontrolled Components in React",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "first-principles-of-component-state-management",
        "title": "First Principles of Component State Management",
        "level": 2,
        "wordCount": 150
      },
      {
        "id": "controlled-components",
        "title": "Controlled Components",
        "level": 2,
        "wordCount": 237
      },
      {
        "id": "uncontrolled-components",
        "title": "Uncontrolled Components",
        "level": 2,
        "wordCount": 165
      },
      {
        "id": "key-differences-controlled-vs-uncontrolled",
        "title": "Key Differences: Controlled vs. Uncontrolled",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "when-to-use-each-approach",
        "title": "When to Use Each Approach",
        "level": 2,
        "wordCount": 165
      },
      {
        "id": "common-patterns-and-best-practices",
        "title": "Common Patterns and Best Practices",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "real-world-examples-and-edge-cases",
        "title": "Real-World Examples and Edge Cases",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "common-pitfalls-and-how-to-avoid-them",
        "title": "Common Pitfalls and How to Avoid Them",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 195
      }
    ],
    "totalWordCount": 1403,
    "estimatedReadingTime": 360000,
    "title": "controlled_vs_uncontrolled",
    "frontmatter": {}
  },
  "public\\content\\react\\beginner\\component_lifecycle.md": {
    "path": "public\\content\\react\\beginner\\component_lifecycle.md",
    "sections": [
      {
        "id": "react-component-lifecycle-with-functional-components",
        "title": "React Component Lifecycle with Functional Components",
        "level": 1,
        "wordCount": 44
      },
      {
        "id": "mounting-phase",
        "title": "Mounting Phase",
        "level": 2,
        "wordCount": 186
      },
      {
        "id": "updating-phase",
        "title": "Updating Phase",
        "level": 2,
        "wordCount": 289
      },
      {
        "id": "unmounting-phase",
        "title": "Unmounting Phase",
        "level": 2,
        "wordCount": 157
      },
      {
        "id": "complete-lifecycle-example",
        "title": "Complete Lifecycle Example",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "key-differences-from-class-components",
        "title": "Key Differences from Class Components",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "best-practices-for-lifecycle-management",
        "title": "Best Practices for Lifecycle Management",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 77
      }
    ],
    "totalWordCount": 1044,
    "estimatedReadingTime": 300000,
    "title": "component_lifecycle",
    "frontmatter": {}
  },
  "public\\content\\react\\beginner\\component_communication.md": {
    "path": "public\\content\\react\\beginner\\component_communication.md",
    "sections": [
      {
        "id": "component-communication-in-react-a-first-principles-approach",
        "title": "Component Communication in React: A First Principles Approach",
        "level": 1,
        "wordCount": 56
      },
      {
        "id": "the-foundation-component-hierarchy",
        "title": "The Foundation: Component Hierarchy",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "downward-communication-props",
        "title": "Downward Communication: Props",
        "level": 2,
        "wordCount": 125
      },
      {
        "id": "upward-communication-callback-functions",
        "title": "Upward Communication: Callback Functions",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "practical-example-a-todo-list",
        "title": "Practical Example: A Todo List",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "understanding-state-and-its-role",
        "title": "Understanding State and Its Role",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "the-context-api-for-distant-communication",
        "title": "The Context API: For \"Distant\" Communication",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "summary-the-flow-of-communication",
        "title": "Summary: The Flow of Communication",
        "level": 2,
        "wordCount": 126
      }
    ],
    "totalWordCount": 814,
    "estimatedReadingTime": 240000,
    "title": "component_communication",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\working_with_iterables.md": {
    "path": "public\\content\\python\\standard_library\\working_with_iterables.md",
    "sections": [
      {
        "id": "understanding-python-iterables-and-itertools-from-first-principles",
        "title": "Understanding Python Iterables and itertools from First Principles",
        "level": 1,
        "wordCount": 25
      },
      {
        "id": "what-is-iteration-the-core-concept",
        "title": "What is Iteration? The Core Concept",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "what-makes-something-iterable",
        "title": "What Makes Something Iterable?",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "iterators-vs-iterables-a-critical-distinction",
        "title": "Iterators vs. Iterables: A Critical Distinction",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "why-are-iterables-important",
        "title": "Why Are Iterables Important?",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "enter-itertools-pythons-iteration-laboratory",
        "title": "Enter itertools: Python's Iteration Laboratory",
        "level": 2,
        "wordCount": 312
      },
      {
        "id": "building-your-own-tools-with-itertools",
        "title": "Building Your Own Tools with itertools",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "memory-efficiency-a-deeper-look",
        "title": "Memory Efficiency: A Deeper Look",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "creating-your-own-iterables",
        "title": "Creating Your Own Iterables",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "practical-applications-of-itertools",
        "title": "Practical Applications of itertools",
        "level": 2,
        "wordCount": 25
      },
      {
        "id": "common-pitfalls-and-how-to-avoid-them",
        "title": "Common Pitfalls and How to Avoid Them",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 105
      }
    ],
    "totalWordCount": 1099,
    "estimatedReadingTime": 300000,
    "title": "working_with_iterables",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\text_processing_services.md": {
    "path": "public\\content\\python\\standard_library\\text_processing_services.md",
    "sections": [
      {
        "id": "python-standard-library-text-processing-services-from-first-principles",
        "title": "Python Standard Library Text Processing Services: From First Principles",
        "level": 1,
        "wordCount": 32
      },
      {
        "id": "the-nature-of-text-in-computing",
        "title": "The Nature of Text in Computing",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "core-text-processing-modules",
        "title": "Core Text Processing Modules",
        "level": 2,
        "wordCount": 229
      },
      {
        "id": "text-tokenization-and-parsing",
        "title": "Text Tokenization and Parsing",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "advanced-text-processing",
        "title": "Advanced Text Processing",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "text-encodings-and-internationalization",
        "title": "Text Encodings and Internationalization",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 166
      }
    ],
    "totalWordCount": 722,
    "estimatedReadingTime": 180000,
    "title": "text_processing_services",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\structured_markup_processing_tools.md": {
    "path": "public\\content\\python\\standard_library\\structured_markup_processing_tools.md",
    "sections": [
      {
        "id": "python-structured-markup-processing-tools-a-first-principles-approach",
        "title": "Python Structured Markup Processing Tools: A First Principles Approach",
        "level": 1,
        "wordCount": 53
      },
      {
        "id": "what-is-structured-markup",
        "title": "What Is Structured Markup?",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "xml-processing-in-python",
        "title": "XML Processing in Python",
        "level": 2,
        "wordCount": 208
      },
      {
        "id": "html-processing-in-python",
        "title": "HTML Processing in Python",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "json-processing-in-python",
        "title": "JSON Processing in Python",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "yaml-processing-in-python",
        "title": "YAML Processing in Python",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "real-world-example-processing-configuration-files",
        "title": "Real-World Example: Processing Configuration Files",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "common-patterns-and-best-practices",
        "title": "Common Patterns and Best Practices",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "from-theory-to-practice-a-complete-example",
        "title": "From Theory to Practice: A Complete Example",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "conclusion-the-power-of-abstraction",
        "title": "Conclusion: The Power of Abstraction",
        "level": 2,
        "wordCount": 148
      }
    ],
    "totalWordCount": 886,
    "estimatedReadingTime": 240000,
    "title": "structured_markup_processing_tools",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\string_processing_capabilities.md": {
    "path": "public\\content\\python\\standard_library\\string_processing_capabilities.md",
    "sections": [
      {
        "id": "python-string-processing-a-first-principles-exploration",
        "title": "Python String Processing: A First Principles Exploration",
        "level": 1,
        "wordCount": 33
      },
      {
        "id": "understanding-strings-at-the-most-basic-level",
        "title": "Understanding Strings at the Most Basic Level",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "string-methods-the-building-blocks",
        "title": "String Methods: The Building Blocks",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "string-transformation",
        "title": "String Transformation",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "advanced-string-operations",
        "title": "Advanced String Operations",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "string-slicing",
        "title": "String Slicing",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "practical-applications",
        "title": "Practical Applications",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "special-string-operations-in-the-standard-library",
        "title": "Special String Operations in the Standard Library",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "understanding-string-internals",
        "title": "Understanding String Internals",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "string-performance-considerations",
        "title": "String Performance Considerations",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 105
      }
    ],
    "totalWordCount": 749,
    "estimatedReadingTime": 180000,
    "title": "string_processing_capabilities",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\mathematics_and_numeric_operations.md": {
    "path": "public\\content\\python\\standard_library\\mathematics_and_numeric_operations.md",
    "sections": [
      {
        "id": "mathematics-and-numeric-operations-in-pythons-standard-library",
        "title": "Mathematics and Numeric Operations in Python's Standard Library",
        "level": 1,
        "wordCount": 34
      },
      {
        "id": "fundamentals-of-numbers-in-python",
        "title": "Fundamentals of Numbers in Python",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "basic-arithmetic-operations",
        "title": "Basic Arithmetic Operations",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "the-math-module",
        "title": "The `math` Module",
        "level": 2,
        "wordCount": 203
      },
      {
        "id": "the-statistics-module",
        "title": "The `statistics` Module",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "random-number-generation",
        "title": "Random Number Generation",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "decimal-module-for-precision-arithmetic",
        "title": "Decimal Module for Precision Arithmetic",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "fractions-module-for-rational-numbers",
        "title": "Fractions Module for Rational Numbers",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "complex-numbers",
        "title": "Complex Numbers",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "number-theory-functions",
        "title": "Number Theory Functions",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "numerical-representation-and-conversion",
        "title": "Numerical Representation and Conversion",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 198
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 129
      }
    ],
    "totalWordCount": 995,
    "estimatedReadingTime": 240000,
    "title": "mathematics_and_numeric_operations",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\interprocess_communication.md": {
    "path": "public\\content\\python\\standard_library\\interprocess_communication.md",
    "sections": [
      {
        "id": "python-interprocess-communication-ipc-from-first-principles",
        "title": "Python Interprocess Communication (IPC): From First Principles",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "what-is-a-process",
        "title": "What is a Process?",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "why-interprocess-communication",
        "title": "Why Interprocess Communication?",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "ipc-mechanisms-in-python",
        "title": "IPC Mechanisms in Python",
        "level": 2,
        "wordCount": 344
      },
      {
        "id": "advanced-concepts-and-best-practices",
        "title": "Advanced Concepts and Best Practices",
        "level": 2,
        "wordCount": 138
      },
      {
        "id": "real-world-application-a-simple-task-distribution-system",
        "title": "Real-World Application: A Simple Task Distribution System",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "choosing-the-right-ipc-mechanism",
        "title": "Choosing the Right IPC Mechanism",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 118
      }
    ],
    "totalWordCount": 896,
    "estimatedReadingTime": 240000,
    "title": "interprocess_communication",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\internet_protocols_and_support.md": {
    "path": "public\\content\\python\\standard_library\\internet_protocols_and_support.md",
    "sections": [
      {
        "id": "python-internet-protocols-and-support",
        "title": "Python Internet Protocols and Support",
        "level": 1,
        "wordCount": 26
      },
      {
        "id": "1-what-are-internet-protocols",
        "title": "1. What are Internet Protocols?",
        "level": 2,
        "wordCount": 119
      },
      {
        "id": "2-socket-programming-the-foundation",
        "title": "2. Socket Programming: The Foundation",
        "level": 2,
        "wordCount": 214
      },
      {
        "id": "3-tcp-vs-udp-in-python",
        "title": "3. TCP vs UDP in Python",
        "level": 2,
        "wordCount": 151
      },
      {
        "id": "4-higher-level-protocol-modules",
        "title": "4. Higher-Level Protocol Modules",
        "level": 2,
        "wordCount": 186
      },
      {
        "id": "5-working-with-ip-addresses",
        "title": "5. Working with IP Addresses",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "6-asynchronous-network-programming",
        "title": "6. Asynchronous Network Programming",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "7-web-scraping",
        "title": "7. Web Scraping",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "8-working-with-apis",
        "title": "8. Working with APIs",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "9-creating-a-rest-api-with-flask",
        "title": "9. Creating a REST API with Flask",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "10-websockets-for-real-time-communication",
        "title": "10. WebSockets for Real-Time Communication",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 126
      }
    ],
    "totalWordCount": 1215,
    "estimatedReadingTime": 300000,
    "title": "internet_protocols_and_support",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\functional_programming_tools.md": {
    "path": "public\\content\\python\\standard_library\\functional_programming_tools.md",
    "sections": [
      {
        "id": "python-functional-programming-tools-functools-from-first-principles",
        "title": "Python Functional Programming Tools: functools from First Principles",
        "level": 1,
        "wordCount": 53
      },
      {
        "id": "1-what-is-functional-programming",
        "title": "1. What is Functional Programming?",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "2-understanding-the-functools-module",
        "title": "2. Understanding the functools Module",
        "level": 2,
        "wordCount": 707
      },
      {
        "id": "3-advanced-applications",
        "title": "3. Advanced Applications",
        "level": 2,
        "wordCount": 218
      },
      {
        "id": "4-real-world-use-cases",
        "title": "4. Real-World Use Cases",
        "level": 2,
        "wordCount": 177
      },
      {
        "id": "5-conclusion",
        "title": "5. Conclusion",
        "level": 2,
        "wordCount": 109
      }
    ],
    "totalWordCount": 1348,
    "estimatedReadingTime": 360000,
    "title": "functional_programming_tools",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\file_and_directory_access.md": {
    "path": "public\\content\\python\\standard_library\\file_and_directory_access.md",
    "sections": [
      {
        "id": "file-and-directory-access-in-python-from-first-principles",
        "title": "File and Directory Access in Python from First Principles",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "what-is-a-file-system",
        "title": "What is a File System?",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "files-as-streams-of-bytes",
        "title": "Files as Streams of Bytes",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "pythons-file-and-directory-access-modules",
        "title": "Python's File and Directory Access Modules",
        "level": 2,
        "wordCount": 189
      },
      {
        "id": "file-operations-in-python",
        "title": "File Operations in Python",
        "level": 2,
        "wordCount": 154
      },
      {
        "id": "advanced-directory-operations",
        "title": "Advanced Directory Operations",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "working-with-file-paths-in-a-cross-platform-way",
        "title": "Working with File Paths in a Cross-Platform Way",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "practical-example-a-file-search-utility",
        "title": "Practical Example: A File Search Utility",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "examples-using-shutil-for-higher-level-operations",
        "title": "Examples Using `shutil` for Higher-Level Operations",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "error-handling-in-file-operations",
        "title": "Error Handling in File Operations",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 136
      }
    ],
    "totalWordCount": 960,
    "estimatedReadingTime": 240000,
    "title": "file_and_directory_access",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\development_tools_in_the_standard_library.md": {
    "path": "public\\content\\python\\standard_library\\development_tools_in_the_standard_library.md",
    "sections": [
      {
        "id": "python-development-tools-in-the-standard-library-a-first-principles-approach",
        "title": "Python Development Tools in the Standard Library: A First Principles Approach",
        "level": 1,
        "wordCount": 56
      },
      {
        "id": "1-the-unittest-framework",
        "title": "1. The `unittest` Framework",
        "level": 2,
        "wordCount": 155
      },
      {
        "id": "2-the-doctest-module",
        "title": "2. The `doctest` Module",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "3-the-pdb-module-python-debugger",
        "title": "3. The `pdb` Module - Python Debugger",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "4-the-logging-module",
        "title": "4. The `logging` Module",
        "level": 2,
        "wordCount": 189
      },
      {
        "id": "5-the-profile-and-cprofile-modules",
        "title": "5. The `profile` and `cProfile` Modules",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "6-the-timeit-module",
        "title": "6. The `timeit` Module",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "7-the-trace-module",
        "title": "7. The `trace` Module",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "8-the-venv-module",
        "title": "8. The `venv` Module",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "9-argparse-command-line-argument-parsing",
        "title": "9. `argparse` - Command Line Argument Parsing",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "10-the-configparser-module",
        "title": "10. The `configparser` Module",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 125
      }
    ],
    "totalWordCount": 1332,
    "estimatedReadingTime": 360000,
    "title": "development_tools_in_the_standard_library",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\deep_dive_into_built_in_functions.md": {
    "path": "public\\content\\python\\standard_library\\deep_dive_into_built_in_functions.md",
    "sections": [
      {
        "id": "python-deep-dive-built-in-functions-from-first-principles",
        "title": "Python Deep Dive: Built-in Functions from First Principles",
        "level": 1,
        "wordCount": 44
      },
      {
        "id": "the-concept-of-built-in-functions",
        "title": "The Concept of Built-in Functions",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "why-built-in-functions-exist",
        "title": "Why Built-in Functions Exist",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "key-categories-of-built-in-functions",
        "title": "Key Categories of Built-in Functions",
        "level": 2,
        "wordCount": 796
      },
      {
        "id": "creating-custom-objects-that-work-with-built-in-functions",
        "title": "Creating Custom Objects That Work with Built-in Functions",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "when-to-use-built-in-functions-vs-standard-library",
        "title": "When to Use Built-in Functions vs. Standard Library",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "the-evolution-of-built-in-functions",
        "title": "The Evolution of Built-in Functions",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 114
      }
    ],
    "totalWordCount": 1287,
    "estimatedReadingTime": 360000,
    "title": "deep_dive_into_built_in_functions",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\date_and_time_handling.md": {
    "path": "public\\content\\python\\standard_library\\date_and_time_handling.md",
    "sections": [
      {
        "id": "date-and-time-handling-in-python-from-first-principles",
        "title": "Date and Time Handling in Python: From First Principles",
        "level": 1,
        "wordCount": 45
      },
      {
        "id": "1-why-we-need-special-date-and-time-types",
        "title": "1. Why We Need Special Date and Time Types",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "2-pythons-datetime-module",
        "title": "2. Python's DateTime Module",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "3-the-date-class-working-with-calendar-dates",
        "title": "3. The `date` Class: Working with Calendar Dates",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "4-the-time-class-working-with-clock-times",
        "title": "4. The `time` Class: Working with Clock Times",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "5-the-datetime-class-combining-date-and-time",
        "title": "5. The `datetime` Class: Combining Date and Time",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "6-the-timedelta-class-working-with-time-durations",
        "title": "6. The `timedelta` Class: Working with Time Durations",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "7-parsing-dates-and-times-from-strings",
        "title": "7. Parsing Dates and Times from Strings",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "8-common-format-codes-for-strftime-and-strptime",
        "title": "8. Common Format Codes for `strftime()` and `strptime()`",
        "level": 2,
        "wordCount": 143
      },
      {
        "id": "9-working-with-time-zones",
        "title": "9. Working with Time Zones",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "10-alternative-using-time-module-for-unix-timestamps",
        "title": "10. Alternative: Using `time` Module for Unix Timestamps",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "11-calendar-module-working-with-whole-calendars",
        "title": "11. Calendar Module: Working with Whole Calendars",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "12-working-with-iso-format-and-iso-8601",
        "title": "12. Working with ISO format and ISO 8601",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "13-real-world-example-event-scheduler",
        "title": "13. Real-World Example: Event Scheduler",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "14-summary-and-best-practices",
        "title": "14. Summary and Best Practices",
        "level": 2,
        "wordCount": 162
      }
    ],
    "totalWordCount": 1159,
    "estimatedReadingTime": 300000,
    "title": "date_and_time_handling",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\data_persistence_and_serialization.md": {
    "path": "public\\content\\python\\standard_library\\data_persistence_and_serialization.md",
    "sections": [
      {
        "id": "data-persistence-and-serialization-in-python-from-first-principles",
        "title": "Data Persistence and Serialization in Python: From First Principles",
        "level": 1,
        "wordCount": 56
      },
      {
        "id": "1-why-data-persistence-matters",
        "title": "1. Why Data Persistence Matters",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "2-understanding-serialization",
        "title": "2. Understanding Serialization",
        "level": 2,
        "wordCount": 136
      },
      {
        "id": "3-basic-serialization-methods-in-python",
        "title": "3. Basic Serialization Methods in Python",
        "level": 2,
        "wordCount": 188
      },
      {
        "id": "4-deep-dive-how-serialization-works",
        "title": "4. Deep Dive: How Serialization Works",
        "level": 2,
        "wordCount": 137
      },
      {
        "id": "5-choosing-the-right-serialization-method",
        "title": "5. Choosing the Right Serialization Method",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "6-advanced-serialization-techniques",
        "title": "6. Advanced Serialization Techniques",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "7-object-relational-mapping-orm",
        "title": "7. Object-Relational Mapping (ORM)",
        "level": 2,
        "wordCount": 18
      },
      {
        "id": "8-custom-serialization",
        "title": "8. Custom Serialization",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "9-best-practices-for-data-persistence",
        "title": "9. Best Practices for Data Persistence",
        "level": 2,
        "wordCount": 157
      },
      {
        "id": "10-a-complete-example-persistent-task-manager",
        "title": "10. A Complete Example: Persistent Task Manager",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 82
      }
    ],
    "totalWordCount": 1151,
    "estimatedReadingTime": 300000,
    "title": "data_persistence_and_serialization",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\data_encoding_and_decoding.md": {
    "path": "public\\content\\python\\standard_library\\data_encoding_and_decoding.md",
    "sections": [
      {
        "id": "python-standard-library-data-encoding-and-decoding",
        "title": "Python Standard Library: Data Encoding and Decoding",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "what-is-data-encoding-and-why-do-we-need-it",
        "title": "What is Data Encoding and Why Do We Need It?",
        "level": 2,
        "wordCount": 168
      },
      {
        "id": "pythons-base64-module",
        "title": "Python's `base64` Module",
        "level": 2,
        "wordCount": 158
      },
      {
        "id": "the-codecs-module",
        "title": "The `codecs` Module",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "the-binascii-module",
        "title": "The `binascii` Module",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "the-json-module-encoding-and-decoding-json",
        "title": "The `json` Module: Encoding and Decoding JSON",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "the-pickle-module-python-specific-serialization",
        "title": "The `pickle` Module: Python-specific Serialization",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "url-encoding-with-urllibparse",
        "title": "URL Encoding with `urllib.parse`",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "html-encoding-with-html-module",
        "title": "HTML Encoding with `html` Module",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "working-with-binary-data-struct-module",
        "title": "Working with Binary Data: `struct` Module",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "compression-and-encoding-zlib-gzip-bz2-and-lzma",
        "title": "Compression and Encoding: `zlib`, `gzip`, `bz2`, and `lzma`",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "base16-base32-and-base85-encoding",
        "title": "Base16, Base32, and Base85 Encoding",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "character-encodingdecoding",
        "title": "Character Encoding/Decoding",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "encoding-binary-data-for-output-quopri-module",
        "title": "Encoding Binary Data for Output: `quopri` Module",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 143
      }
    ],
    "totalWordCount": 1355,
    "estimatedReadingTime": 360000,
    "title": "data_encoding_and_decoding",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\data_compression_and_archiving.md": {
    "path": "public\\content\\python\\standard_library\\data_compression_and_archiving.md",
    "sections": [
      {
        "id": "data-compression-and-archiving-in-python-from-first-principles",
        "title": "Data Compression and Archiving in Python: From First Principles",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "the-fundamental-principle-of-compression",
        "title": "The Fundamental Principle of Compression",
        "level": 2,
        "wordCount": 174
      },
      {
        "id": "pythons-built-in-compression-tools",
        "title": "Python's Built-in Compression Tools",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "basic-string-compression-with-zlib",
        "title": "Basic String Compression with zlib",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "how-deflate-works-the-algorithm-behind-zlib",
        "title": "How DEFLATE Works (The Algorithm Behind zlib)",
        "level": 2,
        "wordCount": 175
      },
      {
        "id": "file-compression-with-gzip",
        "title": "File Compression with gzip",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "different-compression-algorithms-a-comparison",
        "title": "Different Compression Algorithms: A Comparison",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "working-with-zip-archives",
        "title": "Working with ZIP Archives",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "working-with-tar-archives",
        "title": "Working with TAR Archives",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "practical-application-compressing-log-files",
        "title": "Practical Application: Compressing Log Files",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "lossy-compression-principles",
        "title": "Lossy Compression Principles",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "memory-efficient-compression-with-streaming",
        "title": "Memory-Efficient Compression with Streaming",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "compression-level-trade-offs",
        "title": "Compression Level Trade-offs",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 137
      }
    ],
    "totalWordCount": 1280,
    "estimatedReadingTime": 360000,
    "title": "data_compression_and_archiving",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\cryptographic_services.md": {
    "path": "public\\content\\python\\standard_library\\cryptographic_services.md",
    "sections": [
      {
        "id": "python-cryptographic-services-first-principles",
        "title": "Python Cryptographic Services: First Principles",
        "level": 1,
        "wordCount": 26
      },
      {
        "id": "what-is-cryptography",
        "title": "What is Cryptography?",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "fundamental-principles-of-cryptography",
        "title": "Fundamental Principles of Cryptography",
        "level": 2,
        "wordCount": 198
      },
      {
        "id": "types-of-cryptographic-algorithms",
        "title": "Types of Cryptographic Algorithms",
        "level": 2,
        "wordCount": 252
      },
      {
        "id": "pythons-cryptographic-ecosystem",
        "title": "Python's Cryptographic Ecosystem",
        "level": 2,
        "wordCount": 202
      },
      {
        "id": "common-cryptographic-applications-in-python",
        "title": "Common Cryptographic Applications in Python",
        "level": 2,
        "wordCount": 204
      },
      {
        "id": "advanced-topics",
        "title": "Advanced Topics",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "best-practices-for-cryptography-in-python",
        "title": "Best Practices for Cryptography in Python",
        "level": 2,
        "wordCount": 164
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 103
      }
    ],
    "totalWordCount": 1314,
    "estimatedReadingTime": 360000,
    "title": "cryptographic_services",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\concurrent_execution.md": {
    "path": "public\\content\\python\\standard_library\\concurrent_execution.md",
    "sections": [
      {
        "id": "python-concurrent-execution-from-first-principles",
        "title": "Python Concurrent Execution: From First Principles",
        "level": 1,
        "wordCount": 36
      },
      {
        "id": "understanding-sequential-vs-concurrent-execution",
        "title": "Understanding Sequential vs. Concurrent Execution",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "the-core-concepts-of-concurrency",
        "title": "The Core Concepts of Concurrency",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "pythons-concurrency-models",
        "title": "Python's Concurrency Models",
        "level": 2,
        "wordCount": 259
      },
      {
        "id": "choosing-the-right-concurrency-model",
        "title": "Choosing the Right Concurrency Model",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "concurrency-challenges-and-solutions",
        "title": "Concurrency Challenges and Solutions",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "advanced-concurrency-patterns",
        "title": "Advanced Concurrency Patterns",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 131
      }
    ],
    "totalWordCount": 964,
    "estimatedReadingTime": 240000,
    "title": "concurrent_execution",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\binary_data_services.md": {
    "path": "public\\content\\python\\standard_library\\binary_data_services.md",
    "sections": [
      {
        "id": "binary-data-services-in-python-from-first-principles",
        "title": "Binary Data Services in Python: From First Principles",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "what-is-binary-data",
        "title": "What is Binary Data?",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "core-binary-data-types-in-python",
        "title": "Core Binary Data Types in Python",
        "level": 2,
        "wordCount": 175
      },
      {
        "id": "binary-data-operations",
        "title": "Binary Data Operations",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "structured-binary-data",
        "title": "Structured Binary Data",
        "level": 2,
        "wordCount": 180
      },
      {
        "id": "binary-data-processing",
        "title": "Binary Data Processing",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "real-world-applications",
        "title": "Real-World Applications",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "advanced-binary-data-techniques",
        "title": "Advanced Binary Data Techniques",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "binary-data-security-considerations",
        "title": "Binary Data Security Considerations",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 134
      }
    ],
    "totalWordCount": 1110,
    "estimatedReadingTime": 300000,
    "title": "binary_data_services",
    "frontmatter": {}
  },
  "public\\content\\python\\standard_library\\advanced_collections.md": {
    "path": "public\\content\\python\\standard_library\\advanced_collections.md",
    "sections": [
      {
        "id": "python-advanced-collections-understanding-from-first-principles",
        "title": "Python Advanced Collections: Understanding from First Principles",
        "level": 1,
        "wordCount": 37
      },
      {
        "id": "what-are-collections",
        "title": "What Are Collections?",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "first-principles-what-makes-an-effective-collection",
        "title": "First Principles: What Makes an Effective Collection?",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "key-collection-types",
        "title": "Key Collection Types",
        "level": 2,
        "wordCount": 785
      },
      {
        "id": "practical-applications-of-collections",
        "title": "Practical Applications of Collections",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "when-to-use-each-collection-type",
        "title": "When to Use Each Collection Type",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 108
      }
    ],
    "totalWordCount": 1305,
    "estimatedReadingTime": 360000,
    "title": "advanced_collections",
    "frontmatter": {}
  },
  "public\\content\\python\\python_fundamentals\\variables_naming_conventions_and_memory_model.md": {
    "path": "public\\content\\python\\python_fundamentals\\variables_naming_conventions_and_memory_model.md",
    "sections": [
      {
        "id": "python-variables-naming-conventions-and-memory-model-a-first-principles-approach",
        "title": "Python Variables, Naming Conventions, and Memory Model: A First Principles Approach",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "i-what-are-variables-the-fundamental-concept",
        "title": "I. What Are Variables? The Fundamental Concept",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "ii-variable-assignment-creating-references",
        "title": "II. Variable Assignment: Creating References",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "iii-pythons-dynamic-typing",
        "title": "III. Python's Dynamic Typing",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "iv-naming-conventions-the-pep-8-guidelines",
        "title": "IV. Naming Conventions: The PEP 8 Guidelines",
        "level": 2,
        "wordCount": 152
      },
      {
        "id": "v-pythons-memory-model-objects-and-references",
        "title": "V. Python's Memory Model: Objects and References",
        "level": 2,
        "wordCount": 164
      },
      {
        "id": "vi-memory-management-in-python",
        "title": "VI. Memory Management in Python",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "vii-common-pitfalls-and-best-practices",
        "title": "VII. Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "viii-variable-lifecycle",
        "title": "VIII. Variable Lifecycle",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "ix-practical-examples",
        "title": "IX. Practical Examples",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "x-memory-optimization-techniques",
        "title": "X. Memory Optimization Techniques",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 155
      }
    ],
    "totalWordCount": 1127,
    "estimatedReadingTime": 300000,
    "title": "variables_naming_conventions_and_memory_model",
    "frontmatter": {}
  },
  "public\\content\\python\\python_fundamentals\\type_conversion_and_type_checking.md": {
    "path": "public\\content\\python\\python_fundamentals\\type_conversion_and_type_checking.md",
    "sections": [
      {
        "id": "python-type-conversion-and-type-checking-a-first-principles-approach",
        "title": "Python Type Conversion and Type Checking: A First Principles Approach",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "part-1-understanding-types-in-python",
        "title": "Part 1: Understanding Types in Python",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "part-2-type-conversion-typecasting",
        "title": "Part 2: Type Conversion (Typecasting)",
        "level": 2,
        "wordCount": 149
      },
      {
        "id": "part-3-type-checking",
        "title": "Part 3: Type Checking",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "part-4-practical-applications-and-examples",
        "title": "Part 4: Practical Applications and Examples",
        "level": 2,
        "wordCount": 136
      },
      {
        "id": "part-5-type-annotations-python-35",
        "title": "Part 5: Type Annotations (Python 3.5+)",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "part-6-duck-typing-in-python",
        "title": "Part 6: Duck Typing in Python",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 123
      }
    ],
    "totalWordCount": 807,
    "estimatedReadingTime": 240000,
    "title": "type_conversion_and_type_checking",
    "frontmatter": {}
  },
  "public\\content\\python\\python_fundamentals\\setting_up_development_environment.md": {
    "path": "public\\content\\python\\python_fundamentals\\setting_up_development_environment.md",
    "sections": [
      {
        "id": "setting-up-a-python-development-environment-a-first-principles-guide",
        "title": "Setting up a Python Development Environment: A First Principles Guide",
        "level": 1,
        "wordCount": 45
      },
      {
        "id": "understanding-what-a-development-environment-is",
        "title": "Understanding What a Development Environment Is",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "starting-with-python-itself",
        "title": "Starting with Python Itself",
        "level": 2,
        "wordCount": 239
      },
      {
        "id": "understanding-virtual-environments",
        "title": "Understanding Virtual Environments",
        "level": 2,
        "wordCount": 216
      },
      {
        "id": "package-management-with-pip",
        "title": "Package Management with pip",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "code-editors-and-ides",
        "title": "Code Editors and IDEs",
        "level": 2,
        "wordCount": 165
      },
      {
        "id": "version-control-with-git",
        "title": "Version Control with Git",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "project-organization",
        "title": "Project Organization",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "putting-it-all-together-a-full-example",
        "title": "Putting It All Together: A Full Example",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "advanced-development-environment-components",
        "title": "Advanced Development Environment Components",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 106
      }
    ],
    "totalWordCount": 1284,
    "estimatedReadingTime": 360000,
    "title": "setting_up_development_environment",
    "frontmatter": {}
  },
  "public\\content\\python\\python_fundamentals\\python_versions_differences_2_vs_3.md": {
    "path": "public\\content\\python\\python_fundamentals\\python_versions_differences_2_vs_3.md",
    "sections": [
      {
        "id": "python-2-vs-python-3-understanding-the-differences-from-first-principles",
        "title": "Python 2 vs Python 3: Understanding the Differences from First Principles",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "historical-context",
        "title": "Historical Context",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "core-philosophical-differences",
        "title": "Core Philosophical Differences",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "print-statement-vs-print-function",
        "title": "Print Statement vs. Print Function",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "division-operation",
        "title": "Division Operation",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "unicode-and-string-handling",
        "title": "Unicode and String Handling",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "integer-types",
        "title": "Integer Types",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "range-and-xrange",
        "title": "Range and xrange",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "exception-handling",
        "title": "Exception Handling",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "input-function",
        "title": "Input Function",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "variable-unpacking",
        "title": "Variable Unpacking",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "dictionary-methods",
        "title": "Dictionary Methods",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "ordering-comparisons",
        "title": "Ordering Comparisons",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "iterator-behavior",
        "title": "Iterator Behavior",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "f-strings-formatted-string-literals",
        "title": "f-strings (Formatted String Literals)",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "type-annotations",
        "title": "Type Annotations",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "practical-transition-example",
        "title": "Practical Transition Example",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "why-these-changes-matter",
        "title": "Why These Changes Matter",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 86
      }
    ],
    "totalWordCount": 1029,
    "estimatedReadingTime": 300000,
    "title": "python_versions_differences_2_vs_3",
    "frontmatter": {}
  },
  "public\\content\\python\\python_fundamentals\\python_philosophy_and_design_principles.md": {
    "path": "public\\content\\python\\python_fundamentals\\python_philosophy_and_design_principles.md",
    "sections": [
      {
        "id": "pythons-philosophy-and-design-principles-a-first-principles-exploration",
        "title": "Python's Philosophy and Design Principles: A First Principles Exploration",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "the-birth-of-pythons-philosophy",
        "title": "The Birth of Python's Philosophy",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "beautiful-is-better-than-ugly",
        "title": "Beautiful is Better Than Ugly",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "explicit-is-better-than-implicit",
        "title": "Explicit is Better Than Implicit",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "simple-is-better-than-complex",
        "title": "Simple is Better Than Complex",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "complex-is-better-than-complicated",
        "title": "Complex is Better Than Complicated",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "flat-is-better-than-nested",
        "title": "Flat is Better Than Nested",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "sparse-is-better-than-dense",
        "title": "Sparse is Better Than Dense",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "readability-counts",
        "title": "Readability Counts",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "special-cases-arent-special-enough-to-break-the-rules",
        "title": "Special Cases Aren't Special Enough to Break the Rules",
        "level": 2,
        "wordCount": 16
      },
      {
        "id": "although-practicality-beats-purity",
        "title": "Although Practicality Beats Purity",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "errors-should-never-pass-silently",
        "title": "Errors Should Never Pass Silently",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "in-the-face-of-ambiguity-refuse-the-temptation-to-guess",
        "title": "In the Face of Ambiguity, Refuse the Temptation to Guess",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "there-should-be-oneand-preferably-only-oneobvious-way-to-do-it",
        "title": "There Should Be One—and Preferably Only One—Obvious Way to Do It",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "namespaces-are-one-honking-great-idea",
        "title": "Namespaces Are One Honking Great Idea",
        "level": 2,
        "wordCount": 27
      },
      {
        "id": "the-pythonic-style-practical-application",
        "title": "The Pythonic Style: Practical Application",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "pythons-implementation-of-its-philosophy",
        "title": "Python's Implementation of Its Philosophy",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "the-impact-of-pythons-philosophy",
        "title": "The Impact of Python's Philosophy",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "python-vs-other-languages",
        "title": "Python vs. Other Languages",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 117
      }
    ],
    "totalWordCount": 1118,
    "estimatedReadingTime": 300000,
    "title": "python_philosophy_and_design_principles",
    "frontmatter": {}
  },
  "public\\content\\python\\python_fundamentals\\python_interpreter_and_execution_model.md": {
    "path": "public\\content\\python\\python_fundamentals\\python_interpreter_and_execution_model.md",
    "sections": [
      {
        "id": "the-python-interpreter-and-execution-model-from-first-principles",
        "title": "The Python Interpreter and Execution Model: From First Principles",
        "level": 1,
        "wordCount": 31
      },
      {
        "id": "what-is-a-programming-language",
        "title": "What Is a Programming Language?",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "the-core-components-python-interpreter",
        "title": "The Core Components: Python Interpreter",
        "level": 2,
        "wordCount": 436
      },
      {
        "id": "memory-management-and-variables",
        "title": "Memory Management and Variables",
        "level": 2,
        "wordCount": 174
      },
      {
        "id": "the-global-interpreter-lock-gil",
        "title": "The Global Interpreter Lock (GIL)",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "name-resolution-and-scopes",
        "title": "Name Resolution and Scopes",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "function-execution-model",
        "title": "Function Execution Model",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "classes-and-objects",
        "title": "Classes and Objects",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "imports-and-modules",
        "title": "Imports and Modules",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "exception-handling",
        "title": "Exception Handling",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "pythons-garbage-collection",
        "title": "Python's Garbage Collection",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 130
      }
    ],
    "totalWordCount": 1638,
    "estimatedReadingTime": 420000,
    "title": "python_interpreter_and_execution_model",
    "frontmatter": {}
  },
  "public\\content\\python\\python_fundamentals\\python_indentation_and_code_style.md": {
    "path": "public\\content\\python\\python_fundamentals\\python_indentation_and_code_style.md",
    "sections": [
      {
        "id": "pythons-indentation-and-code-style-pep-8-first-principles",
        "title": "Python's Indentation and Code Style (PEP 8): First Principles",
        "level": 1,
        "wordCount": 54
      },
      {
        "id": "the-fundamental-role-of-indentation-in-python",
        "title": "The Fundamental Role of Indentation in Python",
        "level": 2,
        "wordCount": 233
      },
      {
        "id": "pep-8-pythons-style-guide",
        "title": "PEP 8: Python's Style Guide",
        "level": 2,
        "wordCount": 255
      },
      {
        "id": "practical-examples-to-deepen-understanding",
        "title": "Practical Examples to Deepen Understanding",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "tools-for-pep-8-compliance",
        "title": "Tools for PEP 8 Compliance",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "conceptual-understanding-why-indentation-matters",
        "title": "Conceptual Understanding: Why Indentation Matters",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 121
      }
    ],
    "totalWordCount": 947,
    "estimatedReadingTime": 240000,
    "title": "python_indentation_and_code_style",
    "frontmatter": {}
  },
  "public\\content\\python\\python_fundamentals\\introduction_to_python_memory_management.md": {
    "path": "public\\content\\python\\python_fundamentals\\introduction_to_python_memory_management.md",
    "sections": [
      {
        "id": "introduction-to-pythons-memory-management",
        "title": "Introduction to Python's Memory Management",
        "level": 1,
        "wordCount": 49
      },
      {
        "id": "what-is-memory",
        "title": "What is Memory?",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "the-core-memory-management-challenge",
        "title": "The Core Memory Management Challenge",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "pythons-memory-management-architecture",
        "title": "Python's Memory Management Architecture",
        "level": 2,
        "wordCount": 297
      },
      {
        "id": "pythons-object-system-and-memory",
        "title": "Python's Object System and Memory",
        "level": 2,
        "wordCount": 143
      },
      {
        "id": "memory-optimization-techniques",
        "title": "Memory Optimization Techniques",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "common-memory-issues-in-python",
        "title": "Common Memory Issues in Python",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "pythons-memory-management-in-practice",
        "title": "Python's Memory Management in Practice",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 110
      }
    ],
    "totalWordCount": 924,
    "estimatedReadingTime": 240000,
    "title": "introduction_to_python_memory_management",
    "frontmatter": {}
  },
  "public\\content\\python\\python_fundamentals\\function_basics.md": {
    "path": "public\\content\\python\\python_fundamentals\\function_basics.md",
    "sections": [
      {
        "id": "python-functions-understanding-from-first-principles",
        "title": "Python Functions: Understanding from First Principles",
        "level": 1,
        "wordCount": 30
      },
      {
        "id": "what-is-a-function-the-basic-concept",
        "title": "What Is a Function? The Basic Concept",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "why-do-we-need-functions",
        "title": "Why Do We Need Functions?",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "defining-functions-in-python",
        "title": "Defining Functions in Python",
        "level": 2,
        "wordCount": 142
      },
      {
        "id": "function-parameters-inputs-to-your-function",
        "title": "Function Parameters: Inputs to Your Function",
        "level": 2,
        "wordCount": 160
      },
      {
        "id": "return-values-outputs-from-your-function",
        "title": "Return Values: Outputs from Your Function",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "scope-and-function-variables",
        "title": "Scope and Function Variables",
        "level": 2,
        "wordCount": 17
      },
      {
        "id": "practical-example-building-a-simple-calculator",
        "title": "Practical Example: Building a Simple Calculator",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "functions-as-building-blocks",
        "title": "Functions as Building Blocks",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "advanced-function-concepts",
        "title": "Advanced Function Concepts",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "a-final-practical-example-text-analysis",
        "title": "A Final, Practical Example: Text Analysis",
        "level": 2,
        "wordCount": 67
      }
    ],
    "totalWordCount": 885,
    "estimatedReadingTime": 240000,
    "title": "function_basics",
    "frontmatter": {}
  },
  "public\\content\\python\\python_fundamentals\\control_flow_statements.md": {
    "path": "public\\content\\python\\python_fundamentals\\control_flow_statements.md",
    "sections": [
      {
        "id": "control-flow-statements-in-python-from-first-principles",
        "title": "Control Flow Statements in Python: From First Principles",
        "level": 1,
        "wordCount": 53
      },
      {
        "id": "1-understanding-sequential-execution",
        "title": "1. Understanding Sequential Execution",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "2-conditional-execution-with-if-else-statements",
        "title": "2. Conditional Execution with if-else Statements",
        "level": 2,
        "wordCount": 228
      },
      {
        "id": "3-repetition-with-loops",
        "title": "3. Repetition with Loops",
        "level": 2,
        "wordCount": 253
      },
      {
        "id": "4-the-else-clause-in-loops",
        "title": "4. The else Clause in Loops",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "5-putting-it-all-together-practical-examples",
        "title": "5. Putting It All Together: Practical Examples",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "6-common-pitfalls-and-best-practices",
        "title": "6. Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "7-advanced-control-flow-concepts",
        "title": "7. Advanced Control Flow Concepts",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 114
      }
    ],
    "totalWordCount": 994,
    "estimatedReadingTime": 240000,
    "title": "control_flow_statements",
    "frontmatter": {}
  },
  "public\\content\\python\\python_fundamentals\\basic_syntax_and_language_structure.md": {
    "path": "public\\content\\python\\python_fundamentals\\basic_syntax_and_language_structure.md",
    "sections": [
      {
        "id": "python-from-first-principles",
        "title": "Python: From First Principles",
        "level": 1,
        "wordCount": 30
      },
      {
        "id": "the-philosophy-of-python",
        "title": "The Philosophy of Python",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "basic-elements-of-python",
        "title": "Basic Elements of Python",
        "level": 2,
        "wordCount": 210
      },
      {
        "id": "control-flow",
        "title": "Control Flow",
        "level": 2,
        "wordCount": 191
      },
      {
        "id": "functions",
        "title": "Functions",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "data-structures-in-detail",
        "title": "Data Structures in Detail",
        "level": 2,
        "wordCount": 15
      },
      {
        "id": "modules-and-imports",
        "title": "Modules and Imports",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "object-oriented-programming",
        "title": "Object-Oriented Programming",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "exception-handling",
        "title": "Exception Handling",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "putting-it-all-together",
        "title": "Putting It All Together",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 120
      }
    ],
    "totalWordCount": 959,
    "estimatedReadingTime": 240000,
    "title": "basic_syntax_and_language_structure",
    "frontmatter": {}
  },
  "public\\content\\python\\python_fundamentals\\basic_string_manipulation_and_formatting.md": {
    "path": "public\\content\\python\\python_fundamentals\\basic_string_manipulation_and_formatting.md",
    "sections": [
      {
        "id": "python-basic-string-manipulation-and-formatting-a-first-principles-approach",
        "title": "Python Basic String Manipulation and Formatting: A First Principles Approach",
        "level": 1,
        "wordCount": 50
      },
      {
        "id": "what-is-a-string",
        "title": "What Is a String?",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "accessing-characters-in-strings",
        "title": "Accessing Characters in Strings",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "string-slicing",
        "title": "String Slicing",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "basic-string-operations",
        "title": "Basic String Operations",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "string-methods",
        "title": "String Methods",
        "level": 2,
        "wordCount": 144
      },
      {
        "id": "string-formatting",
        "title": "String Formatting",
        "level": 2,
        "wordCount": 169
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 131
      }
    ],
    "totalWordCount": 858,
    "estimatedReadingTime": 240000,
    "title": "basic_string_manipulation_and_formatting",
    "frontmatter": {}
  },
  "public\\content\\python\\python_fundamentals\\basic_math_operations.md": {
    "path": "public\\content\\python\\python_fundamentals\\basic_math_operations.md",
    "sections": [
      {
        "id": "basic-mathematical-operations-in-python",
        "title": "Basic Mathematical Operations in Python",
        "level": 1,
        "wordCount": 43
      },
      {
        "id": "understanding-numbers-in-python",
        "title": "Understanding Numbers in Python",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "addition",
        "title": "Addition (+)",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "subtraction",
        "title": "Subtraction (-)",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "multiplication",
        "title": "Multiplication (*)",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "division",
        "title": "Division (/)",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "integer-division",
        "title": "Integer Division (//)",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "modulo-operation",
        "title": "Modulo Operation (%)",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "exponentiation",
        "title": "Exponentiation (**)",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "operator-precedence",
        "title": "Operator Precedence",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "combined-assignment-operators",
        "title": "Combined Assignment Operators",
        "level": 2,
        "wordCount": 27
      },
      {
        "id": "built-in-math-functions",
        "title": "Built-in Math Functions",
        "level": 2,
        "wordCount": 21
      },
      {
        "id": "the-math-module",
        "title": "The Math Module",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "common-pitfalls-and-tips",
        "title": "Common Pitfalls and Tips",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 70
      }
    ],
    "totalWordCount": 727,
    "estimatedReadingTime": 180000,
    "title": "basic_math_operations",
    "frontmatter": {}
  },
  "public\\content\\python\\python_fundamentals\\basic_input_output_operations.md": {
    "path": "public\\content\\python\\python_fundamentals\\basic_input_output_operations.md",
    "sections": [
      {
        "id": "python-basic-inputoutput-operations-from-first-principles",
        "title": "Python Basic Input/Output Operations: From First Principles",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "the-essence-of-input-and-output",
        "title": "The Essence of Input and Output",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "standard-output-displaying-information",
        "title": "Standard Output: Displaying Information",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "standard-input-receiving-user-data",
        "title": "Standard Input: Receiving User Data",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "working-with-files-persistent-io",
        "title": "Working with Files: Persistent I/O",
        "level": 2,
        "wordCount": 143
      },
      {
        "id": "real-world-example-a-simple-contact-manager",
        "title": "Real-World Example: A Simple Contact Manager",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "advanced-io-topics",
        "title": "Advanced I/O Topics",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "common-io-patterns-and-best-practices",
        "title": "Common I/O Patterns and Best Practices",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 83
      }
    ],
    "totalWordCount": 741,
    "estimatedReadingTime": 180000,
    "title": "basic_input_output_operations",
    "frontmatter": {}
  },
  "public\\content\\python\\python_fundamentals\\basic_data_types.md": {
    "path": "public\\content\\python\\python_fundamentals\\basic_data_types.md",
    "sections": [
      {
        "id": "python-basic-data-types-first-principles",
        "title": "Python Basic Data Types: First Principles",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "what-are-data-types",
        "title": "What Are Data Types?",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "1-integers-int",
        "title": "1. Integers (`int`)",
        "level": 2,
        "wordCount": 149
      },
      {
        "id": "2-floating-point-numbers-float",
        "title": "2. Floating-Point Numbers (`float`)",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "3-strings-str",
        "title": "3. Strings (`str`)",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "4-boolean-bool",
        "title": "4. Boolean (`bool`)",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "checking-and-converting-between-data-types",
        "title": "Checking and Converting Between Data Types",
        "level": 2,
        "wordCount": 16
      },
      {
        "id": "memory-model-and-object-identity",
        "title": "Memory Model and Object Identity",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "practical-applications",
        "title": "Practical Applications",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "key-differences-between-basic-data-types",
        "title": "Key Differences Between Basic Data Types",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 131
      }
    ],
    "totalWordCount": 855,
    "estimatedReadingTime": 240000,
    "title": "basic_data_types",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\testing_and_debugging_oop_code.md": {
    "path": "public\\content\\python\\object_oriented_python\\testing_and_debugging_oop_code.md",
    "sections": [
      {
        "id": "testing-and-debugging-object-oriented-python-code",
        "title": "Testing and Debugging Object-Oriented Python Code",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "i-understanding-the-foundations",
        "title": "I. Understanding the Foundations",
        "level": 2,
        "wordCount": 138
      },
      {
        "id": "ii-unit-testing-oop-code",
        "title": "II. Unit Testing OOP Code",
        "level": 2,
        "wordCount": 143
      },
      {
        "id": "iii-mock-objects-and-dependencies",
        "title": "III. Mock Objects and Dependencies",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "iv-test-driven-development-for-oop",
        "title": "IV. Test-Driven Development for OOP",
        "level": 2,
        "wordCount": 126
      },
      {
        "id": "v-debugging-oop-code",
        "title": "V. Debugging OOP Code",
        "level": 2,
        "wordCount": 201
      },
      {
        "id": "vi-testing-strategies-for-complex-oop-systems",
        "title": "VI. Testing Strategies for Complex OOP Systems",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "vii-advanced-testing-techniques",
        "title": "VII. Advanced Testing Techniques",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "viii-debugging-complex-oop-systems",
        "title": "VIII. Debugging Complex OOP Systems",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "ix-best-practices-for-oop-testing-and-debugging",
        "title": "IX. Best Practices for OOP Testing and Debugging",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "x-practical-example-testing-a-banking-system",
        "title": "X. Practical Example: Testing a Banking System",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 109
      }
    ],
    "totalWordCount": 1210,
    "estimatedReadingTime": 300000,
    "title": "testing_and_debugging_oop_code",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\solid_principles_application.md": {
    "path": "public\\content\\python\\object_oriented_python\\solid_principles_application.md",
    "sections": [
      {
        "id": "solid-principles-in-python-a-first-principles-approach",
        "title": "SOLID Principles in Python: A First Principles Approach",
        "level": 1,
        "wordCount": 44
      },
      {
        "id": "what-are-solid-principles",
        "title": "What Are SOLID Principles?",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "1-single-responsibility-principle-srp",
        "title": "1. Single Responsibility Principle (SRP)",
        "level": 2,
        "wordCount": 221
      },
      {
        "id": "2-openclosed-principle-ocp",
        "title": "2. Open/Closed Principle (OCP)",
        "level": 2,
        "wordCount": 176
      },
      {
        "id": "3-liskov-substitution-principle-lsp",
        "title": "3. Liskov Substitution Principle (LSP)",
        "level": 2,
        "wordCount": 181
      },
      {
        "id": "4-interface-segregation-principle-isp",
        "title": "4. Interface Segregation Principle (ISP)",
        "level": 2,
        "wordCount": 139
      },
      {
        "id": "5-dependency-inversion-principle-dip",
        "title": "5. Dependency Inversion Principle (DIP)",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "putting-it-all-together-a-comprehensive-example",
        "title": "Putting It All Together: A Comprehensive Example",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "key-insights-and-benefits-of-solid-in-python",
        "title": "Key Insights and Benefits of SOLID in Python",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "things-to-remember-about-solid-in-python",
        "title": "Things to Remember About SOLID in Python",
        "level": 2,
        "wordCount": 116
      }
    ],
    "totalWordCount": 1282,
    "estimatedReadingTime": 360000,
    "title": "solid_principles_application",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\slots_and_memory_optimization.md": {
    "path": "public\\content\\python\\object_oriented_python\\slots_and_memory_optimization.md",
    "sections": [
      {
        "id": "understanding-python-slots-from-first-principles",
        "title": "Understanding Python Slots from First Principles",
        "level": 1,
        "wordCount": 44
      },
      {
        "id": "1-how-regular-python-objects-store-attributes",
        "title": "1. How Regular Python Objects Store Attributes",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "2-the-memory-cost-of-dictionaries",
        "title": "2. The Memory Cost of Dictionaries",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "3-enter-__slots__-fixed-attribute-storage",
        "title": "3. Enter `__slots__`: Fixed Attribute Storage",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "4-memory-comparison-slots-vs-regular-classes",
        "title": "4. Memory Comparison: Slots vs. Regular Classes",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "5-how-slots-work-under-the-hood",
        "title": "5. How Slots Work Under the Hood",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "6-demonstrating-direct-memory-access",
        "title": "6. Demonstrating Direct Memory Access",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "7-limitations-of-slots",
        "title": "7. Limitations of Slots",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "8-real-world-example-memory-optimization-for-data-classes",
        "title": "8. Real-World Example: Memory Optimization for Data Classes",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "9-best-practices-for-using-slots",
        "title": "9. Best Practices for Using Slots",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "10-when-to-use-slots-in-real-projects",
        "title": "10. When to Use Slots in Real Projects",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 179
      }
    ],
    "totalWordCount": 947,
    "estimatedReadingTime": 240000,
    "title": "slots_and_memory_optimization",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\properties_and_descriptors.md": {
    "path": "public\\content\\python\\object_oriented_python\\properties_and_descriptors.md",
    "sections": [
      {
        "id": "python-properties-and-descriptors-a-first-principles-exploration",
        "title": "Python Properties and Descriptors: A First Principles Exploration",
        "level": 1,
        "wordCount": 30
      },
      {
        "id": "part-1-the-problem-properties-solve",
        "title": "Part 1: The Problem Properties Solve",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "part-2-getters-and-setters-a-first-approach",
        "title": "Part 2: Getters and Setters - A First Approach",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "part-3-properties-the-pythonic-solution",
        "title": "Part 3: Properties - The Pythonic Solution",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "part-4-property-use-cases",
        "title": "Part 4: Property Use Cases",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "part-5-descriptors-going-deeper",
        "title": "Part 5: Descriptors - Going Deeper",
        "level": 2,
        "wordCount": 208
      },
      {
        "id": "part-6-advanced-property-and-descriptor-features",
        "title": "Part 6: Advanced Property and Descriptor Features",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 98
      }
    ],
    "totalWordCount": 785,
    "estimatedReadingTime": 240000,
    "title": "properties_and_descriptors",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\polymorphism_in_python.md": {
    "path": "public\\content\\python\\object_oriented_python\\polymorphism_in_python.md",
    "sections": [
      {
        "id": "polymorphism-in-python-a-first-principles-explanation",
        "title": "Polymorphism in Python: A First-Principles Explanation",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "what-is-polymorphism-at-its-core",
        "title": "What is Polymorphism at its Core?",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "types-of-polymorphism-in-python",
        "title": "Types of Polymorphism in Python",
        "level": 2,
        "wordCount": 282
      },
      {
        "id": "why-is-polymorphism-useful",
        "title": "Why is Polymorphism Useful?",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "advanced-polymorphism-abstract-base-classes",
        "title": "Advanced Polymorphism: Abstract Base Classes",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "real-world-scenario-a-file-processing-system",
        "title": "Real-World Scenario: A File Processing System",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "common-patterns-and-best-practices",
        "title": "Common Patterns and Best Practices",
        "level": 2,
        "wordCount": 149
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 111
      }
    ],
    "totalWordCount": 1019,
    "estimatedReadingTime": 300000,
    "title": "polymorphism_in_python",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\object_serialization_techniques.md": {
    "path": "public\\content\\python\\object_oriented_python\\object_serialization_techniques.md",
    "sections": [
      {
        "id": "python-object-serialization-from-first-principles",
        "title": "Python Object Serialization from First Principles",
        "level": 1,
        "wordCount": 44
      },
      {
        "id": "what-is-serialization",
        "title": "What is Serialization?",
        "level": 2,
        "wordCount": 147
      },
      {
        "id": "why-do-we-need-serialization",
        "title": "Why Do We Need Serialization?",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "pythons-built-in-serialization-pickle",
        "title": "Python's Built-in Serialization: pickle",
        "level": 2,
        "wordCount": 185
      },
      {
        "id": "json-serialization-universal-text-based-approach",
        "title": "JSON Serialization: Universal Text-Based Approach",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "messagepack-binary-alternative-to-json",
        "title": "MessagePack: Binary Alternative to JSON",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "protocol-buffers-schema-based-serialization",
        "title": "Protocol Buffers: Schema-Based Serialization",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "yaml-human-friendly-serialization",
        "title": "YAML: Human-Friendly Serialization",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "serializing-custom-objects",
        "title": "Serializing Custom Objects",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "security-considerations",
        "title": "Security Considerations",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "advanced-serialization-topics",
        "title": "Advanced Serialization Topics",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "real-world-use-cases",
        "title": "Real-World Use Cases",
        "level": 2,
        "wordCount": 8
      },
      {
        "id": "summary-choosing-the-right-serialization-method",
        "title": "Summary: Choosing the Right Serialization Method",
        "level": 2,
        "wordCount": 196
      }
    ],
    "totalWordCount": 1091,
    "estimatedReadingTime": 300000,
    "title": "object_serialization_techniques",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\multiple_inheritance_and_mixins.md": {
    "path": "public\\content\\python\\object_oriented_python\\multiple_inheritance_and_mixins.md",
    "sections": [
      {
        "id": "python-multiple-inheritance-and-mixins-from-first-principles",
        "title": "Python Multiple Inheritance and Mixins: From First Principles",
        "level": 1,
        "wordCount": 37
      },
      {
        "id": "1-understanding-inheritance-the-foundation",
        "title": "1. Understanding Inheritance: The Foundation",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "2-multiple-inheritance-the-concept",
        "title": "2. Multiple Inheritance: The Concept",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "3-method-resolution-order-mro-the-critical-mechanism",
        "title": "3. Method Resolution Order (MRO): The Critical Mechanism",
        "level": 2,
        "wordCount": 119
      },
      {
        "id": "4-the-diamond-problem-and-how-python-solves-it",
        "title": "4. The Diamond Problem and How Python Solves It",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "5-the-super-function-collaborative-inheritance",
        "title": "5. The `super()` Function: Collaborative Inheritance",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "6-mixins-reusable-feature-sets",
        "title": "6. Mixins: Reusable Feature Sets",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "7-mixin-design-patterns",
        "title": "7. Mixin Design Patterns",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "8-real-world-examples-from-python-libraries",
        "title": "8. Real-World Examples from Python Libraries",
        "level": 2,
        "wordCount": 21
      },
      {
        "id": "9-best-practices-and-potential-pitfalls",
        "title": "9. Best Practices and Potential Pitfalls",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "10-advanced-concepts",
        "title": "10. Advanced Concepts",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 109
      }
    ],
    "totalWordCount": 984,
    "estimatedReadingTime": 240000,
    "title": "multiple_inheritance_and_mixins",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\method_overriding_and_super.md": {
    "path": "public\\content\\python\\object_oriented_python\\method_overriding_and_super.md",
    "sections": [
      {
        "id": "python-method-overriding-and-super",
        "title": "Python Method Overriding and super()",
        "level": 1,
        "wordCount": 35
      },
      {
        "id": "object-oriented-programming-foundations",
        "title": "Object-Oriented Programming Foundations",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "method-overriding-modifying-inherited-behavior",
        "title": "Method Overriding: Modifying Inherited Behavior",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "the-need-for-super",
        "title": "The Need for super()",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "understanding-super-in-depth",
        "title": "Understanding super() in Depth",
        "level": 2,
        "wordCount": 175
      },
      {
        "id": "common-use-cases-for-super",
        "title": "Common Use Cases for super()",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "real-world-example-custom-exception-classes",
        "title": "Real-World Example: Custom Exception Classes",
        "level": 2,
        "wordCount": 21
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 123
      }
    ],
    "totalWordCount": 792,
    "estimatedReadingTime": 240000,
    "title": "method_overriding_and_super",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\metaclasses_and_class_creation.md": {
    "path": "public\\content\\python\\object_oriented_python\\metaclasses_and_class_creation.md",
    "sections": [
      {
        "id": "understanding-metaclasses-in-python-from-first-principles",
        "title": "Understanding Metaclasses in Python: From First Principles",
        "level": 1,
        "wordCount": 33
      },
      {
        "id": "1-everything-in-python-is-an-object",
        "title": "1. Everything in Python is an Object",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "2-class-creation-process",
        "title": "2. Class Creation Process",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "3-what-is-a-metaclass",
        "title": "3. What is a Metaclass?",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "4-custom-metaclasses",
        "title": "4. Custom Metaclasses",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "5-the-class-creation-process-in-detail",
        "title": "5. The Class Creation Process in Detail",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "6-practical-use-cases-for-metaclasses",
        "title": "6. Practical Use Cases for Metaclasses",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "7-metaclasses-vs-class-decorators",
        "title": "7. Metaclasses vs. Class Decorators",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "8-the-__prepare__-method",
        "title": "8. The `__prepare__` Method",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "9-multiple-inheritance-and-metaclass-conflicts",
        "title": "9. Multiple Inheritance and Metaclass Conflicts",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "10-built-in-metaclasses-in-python",
        "title": "10. Built-in Metaclasses in Python",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 134
      }
    ],
    "totalWordCount": 877,
    "estimatedReadingTime": 240000,
    "title": "metaclasses_and_class_creation",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\managing_object_lifecycle.md": {
    "path": "public\\content\\python\\object_oriented_python\\managing_object_lifecycle.md",
    "sections": [
      {
        "id": "python-object-lifecycle-from-first-principles",
        "title": "Python Object Lifecycle: From First Principles",
        "level": 1,
        "wordCount": 36
      },
      {
        "id": "what-is-an-object",
        "title": "What Is an Object?",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "object-creation",
        "title": "Object Creation",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "reference-counting",
        "title": "Reference Counting",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "object-lifecycle-phases",
        "title": "Object Lifecycle Phases",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "garbage-collection",
        "title": "Garbage Collection",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "context-managers-for-deterministic-cleanup",
        "title": "Context Managers for Deterministic Cleanup",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "weak-references",
        "title": "Weak References",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "memory-management-patterns",
        "title": "Memory Management Patterns",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "special-methods-for-object-lifecycle",
        "title": "Special Methods for Object Lifecycle",
        "level": 2,
        "wordCount": 18
      },
      {
        "id": "memory-leaks-in-python",
        "title": "Memory Leaks in Python",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "best-practices-for-object-lifecycle-management",
        "title": "Best Practices for Object Lifecycle Management",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 121
      }
    ],
    "totalWordCount": 706,
    "estimatedReadingTime": 180000,
    "title": "managing_object_lifecycle",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\interfaces_and_protocols.md": {
    "path": "public\\content\\python\\object_oriented_python\\interfaces_and_protocols.md",
    "sections": [
      {
        "id": "interfaces-and-protocols-in-python-from-first-principles",
        "title": "Interfaces and Protocols in Python: From First Principles",
        "level": 1,
        "wordCount": 32
      },
      {
        "id": "what-are-interfaces-the-fundamental-concept",
        "title": "What Are Interfaces? The Fundamental Concept",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "pythons-duck-typing-philosophy",
        "title": "Python's Duck Typing Philosophy",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "informal-interfaces-in-python",
        "title": "Informal Interfaces in Python",
        "level": 2,
        "wordCount": 152
      },
      {
        "id": "protocols-the-modern-python-interface",
        "title": "Protocols: The Modern Python Interface",
        "level": 2,
        "wordCount": 151
      },
      {
        "id": "real-world-examples-understanding-context-managers",
        "title": "Real-World Examples: Understanding Context Managers",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "structural-subtyping-vs-nominal-subtyping",
        "title": "Structural Subtyping vs. Nominal Subtyping",
        "level": 2,
        "wordCount": 143
      },
      {
        "id": "runtime-protocol-checking",
        "title": "Runtime Protocol Checking",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "protocol-composition",
        "title": "Protocol Composition",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "practical-example-building-a-plugin-system",
        "title": "Practical Example: Building a Plugin System",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "benefits-of-using-protocols-and-interfaces",
        "title": "Benefits of Using Protocols and Interfaces",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "when-to-use-each-approach",
        "title": "When to Use Each Approach",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 103
      }
    ],
    "totalWordCount": 1265,
    "estimatedReadingTime": 360000,
    "title": "interfaces_and_protocols",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\instance_variables_vs_class_variables.md": {
    "path": "public\\content\\python\\object_oriented_python\\instance_variables_vs_class_variables.md",
    "sections": [
      {
        "id": "instance-variables-vs-class-variables-in-python-a-first-principles-approach",
        "title": "Instance Variables vs. Class Variables in Python: A First Principles Approach",
        "level": 1,
        "wordCount": 32
      },
      {
        "id": "the-core-concept-objects-and-classes",
        "title": "The Core Concept: Objects and Classes",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "memory-and-data-where-variables-live",
        "title": "Memory and Data: Where Variables Live",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "instance-variables",
        "title": "Instance Variables",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "class-variables",
        "title": "Class Variables",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "the-confusion-point-accessing-class-variables",
        "title": "The Confusion Point: Accessing Class Variables",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "a-tricky-example-modifying-class-variables",
        "title": "A Tricky Example: Modifying Class Variables",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "use-cases-when-to-use-each",
        "title": "Use Cases: When to Use Each",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "a-practical-example-default-values-with-class-variables",
        "title": "A Practical Example: Default Values with Class Variables",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "visualizing-the-difference",
        "title": "Visualizing the Difference",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "deep-dive-memory-model",
        "title": "Deep Dive: Memory Model",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "common-pitfalls-and-how-to-avoid-them",
        "title": "Common Pitfalls and How to Avoid Them",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 164
      }
    ],
    "totalWordCount": 1079,
    "estimatedReadingTime": 300000,
    "title": "instance_variables_vs_class_variables",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\instance_methods_vs_class_methods_vs_static_methods.md": {
    "path": "public\\content\\python\\object_oriented_python\\instance_methods_vs_class_methods_vs_static_methods.md",
    "sections": [
      {
        "id": "python-methods-instance-class-and-static-methods-from-first-principles",
        "title": "Python Methods: Instance, Class, and Static Methods From First Principles",
        "level": 1,
        "wordCount": 52
      },
      {
        "id": "foundation-what-is-a-method",
        "title": "Foundation: What Is a Method?",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "instance-methods-the-default-behavior",
        "title": "Instance Methods: The Default Behavior",
        "level": 2,
        "wordCount": 136
      },
      {
        "id": "class-methods-operating-on-the-class",
        "title": "Class Methods: Operating on the Class",
        "level": 2,
        "wordCount": 179
      },
      {
        "id": "static-methods-independent-functions-within-a-class",
        "title": "Static Methods: Independent Functions Within a Class",
        "level": 2,
        "wordCount": 182
      },
      {
        "id": "comparing-the-three-method-types",
        "title": "Comparing the Three Method Types",
        "level": 2,
        "wordCount": 27
      },
      {
        "id": "method-access-abilities-at-a-glance",
        "title": "Method Access Abilities: At a Glance",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "when-to-use-each-method-type",
        "title": "When to Use Each Method Type",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "practical-applications",
        "title": "Practical Applications",
        "level": 2,
        "wordCount": 16
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 104
      }
    ],
    "totalWordCount": 918,
    "estimatedReadingTime": 240000,
    "title": "instance_methods_vs_class_methods_vs_static_methods",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\inheritance_and_method_resolution_order_mro.md": {
    "path": "public\\content\\python\\object_oriented_python\\inheritance_and_method_resolution_order_mro.md",
    "sections": [
      {
        "id": "python-inheritance-and-method-resolution-order-mro",
        "title": "Python Inheritance and Method Resolution Order (MRO)",
        "level": 1,
        "wordCount": 28
      },
      {
        "id": "inheritance-the-fundamental-concept",
        "title": "Inheritance: The Fundamental Concept",
        "level": 2,
        "wordCount": 196
      },
      {
        "id": "types-of-inheritance",
        "title": "Types of Inheritance",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "the-super-function",
        "title": "The `super()` Function",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "method-resolution-order-mro",
        "title": "Method Resolution Order (MRO)",
        "level": 2,
        "wordCount": 273
      },
      {
        "id": "practical-applications",
        "title": "Practical Applications",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "real-world-example-django-class-based-views",
        "title": "Real-World Example: Django Class-Based Views",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "summary-and-key-takeaways",
        "title": "Summary and Key Takeaways",
        "level": 2,
        "wordCount": 166
      }
    ],
    "totalWordCount": 1041,
    "estimatedReadingTime": 300000,
    "title": "inheritance_and_method_resolution_order_mro",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\encapsulation_and_name_mangling.md": {
    "path": "public\\content\\python\\object_oriented_python\\encapsulation_and_name_mangling.md",
    "sections": [
      {
        "id": "python-encapsulation-and-name-mangling-a-first-principles-approach",
        "title": "Python Encapsulation and Name Mangling: A First Principles Approach",
        "level": 1,
        "wordCount": 36
      },
      {
        "id": "the-foundation-why-we-need-encapsulation",
        "title": "The Foundation: Why We Need Encapsulation",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "encapsulation-in-python",
        "title": "Encapsulation in Python",
        "level": 2,
        "wordCount": 171
      },
      {
        "id": "name-mangling-the-python-approach-to-privacy",
        "title": "Name Mangling: The Python Approach to Privacy",
        "level": 2,
        "wordCount": 151
      },
      {
        "id": "practical-example-building-a-secure-user-profile-system",
        "title": "Practical Example: Building a Secure User Profile System",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "benefits-and-limitations-of-pythons-approach",
        "title": "Benefits and Limitations of Python's Approach",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "how-to-implement-proper-encapsulation-in-python",
        "title": "How to Implement Proper Encapsulation in Python",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "practical-guidelines-for-using-encapsulation-in-python",
        "title": "Practical Guidelines for Using Encapsulation in Python",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 113
      }
    ],
    "totalWordCount": 875,
    "estimatedReadingTime": 240000,
    "title": "encapsulation_and_name_mangling",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\design_patterns_in_python.md": {
    "path": "public\\content\\python\\object_oriented_python\\design_patterns_in_python.md",
    "sections": [
      {
        "id": "design-patterns-in-python-a-first-principles-approach",
        "title": "Design Patterns in Python: A First Principles Approach",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "what-are-design-patterns",
        "title": "What Are Design Patterns?",
        "level": 2,
        "wordCount": 162
      },
      {
        "id": "categories-of-design-patterns",
        "title": "Categories of Design Patterns",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "creational-patterns",
        "title": "Creational Patterns",
        "level": 2,
        "wordCount": 203
      },
      {
        "id": "structural-patterns",
        "title": "Structural Patterns",
        "level": 2,
        "wordCount": 183
      },
      {
        "id": "behavioral-patterns",
        "title": "Behavioral Patterns",
        "level": 2,
        "wordCount": 196
      },
      {
        "id": "real-world-example-a-logger-system",
        "title": "Real-World Example: A Logger System",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "python-specific-design-pattern-considerations",
        "title": "Python-Specific Design Pattern Considerations",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "when-to-use-design-patterns",
        "title": "When to Use Design Patterns",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "common-pitfalls-to-avoid",
        "title": "Common Pitfalls to Avoid",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 108
      }
    ],
    "totalWordCount": 1273,
    "estimatedReadingTime": 360000,
    "title": "design_patterns_in_python",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\customizing_class_behavior_with_special_methods.md": {
    "path": "public\\content\\python\\object_oriented_python\\customizing_class_behavior_with_special_methods.md",
    "sections": [
      {
        "id": "customizing-python-class-behavior-with-special-methods",
        "title": "Customizing Python Class Behavior with Special Methods",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "what-are-special-methods",
        "title": "What Are Special Methods?",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "starting-with-object-representation",
        "title": "Starting with Object Representation",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "making-objects-behave-like-collections",
        "title": "Making Objects Behave Like Collections",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "customizing-arithmetic-operations",
        "title": "Customizing Arithmetic Operations",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "context-managers-with-__enter__-and-__exit__",
        "title": "Context Managers with `__enter__` and `__exit__`",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "customizing-object-creation-and-initialization",
        "title": "Customizing Object Creation and Initialization",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "attribute-access-and-descriptor-protocol",
        "title": "Attribute Access and Descriptor Protocol",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "customizing-callable-objects",
        "title": "Customizing Callable Objects",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "multiple-special-methods-working-together",
        "title": "Multiple Special Methods Working Together",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "practical-example-a-temperature-class",
        "title": "Practical Example: A Temperature Class",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "summary-of-common-special-methods",
        "title": "Summary of Common Special Methods",
        "level": 2,
        "wordCount": 290
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 128
      }
    ],
    "totalWordCount": 1038,
    "estimatedReadingTime": 300000,
    "title": "customizing_class_behavior_with_special_methods",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\clean_oop_architecture.md": {
    "path": "public\\content\\python\\object_oriented_python\\clean_oop_architecture.md",
    "sections": [
      {
        "id": "pythons-clean-oop-architecture-a-first-principles-approach",
        "title": "Python's Clean OOP Architecture: A First Principles Approach",
        "level": 1,
        "wordCount": 50
      },
      {
        "id": "1-what-is-oop-the-foundational-concept",
        "title": "1. What is OOP? The Foundational Concept",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "2-the-four-pillars-of-oop",
        "title": "2. The Four Pillars of OOP",
        "level": 2,
        "wordCount": 257
      },
      {
        "id": "3-solid-principles-for-clean-oop-architecture",
        "title": "3. SOLID Principles for Clean OOP Architecture",
        "level": 2,
        "wordCount": 234
      },
      {
        "id": "4-design-patterns-for-clean-python-oop",
        "title": "4. Design Patterns for Clean Python OOP",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "5-practical-project-structure-for-clean-python-oop",
        "title": "5. Practical Project Structure for Clean Python OOP",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "6-testing-clean-oop-architecture",
        "title": "6. Testing Clean OOP Architecture",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "7-common-pitfalls-and-best-practices",
        "title": "7. Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "8-advanced-python-oop-features",
        "title": "8. Advanced Python OOP Features",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "9-real-world-application-a-complete-banking-system",
        "title": "9. Real-world Application: A Complete Banking System",
        "level": 2,
        "wordCount": 23
      },
      {
        "id": "10-best-practices-for-evolving-clean-python-oop-architecture",
        "title": "10. Best Practices for Evolving Clean Python OOP Architecture",
        "level": 2,
        "wordCount": 149
      },
      {
        "id": "11-performance-optimization-in-python-oop",
        "title": "11. Performance Optimization in Python OOP",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "12-conclusion-the-power-of-clean-python-oop-architecture",
        "title": "12. Conclusion: The Power of Clean Python OOP Architecture",
        "level": 2,
        "wordCount": 197
      }
    ],
    "totalWordCount": 1482,
    "estimatedReadingTime": 360000,
    "title": "clean_oop_architecture",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\class_definition_and_instantiation.md": {
    "path": "public\\content\\python\\object_oriented_python\\class_definition_and_instantiation.md",
    "sections": [
      {
        "id": "python-classes-and-objects-from-first-principles",
        "title": "Python Classes and Objects: From First Principles",
        "level": 1,
        "wordCount": 32
      },
      {
        "id": "what-is-a-class",
        "title": "What is a Class?",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "defining-a-class-in-python",
        "title": "Defining a Class in Python",
        "level": 2,
        "wordCount": 143
      },
      {
        "id": "class-instantiation-creating-objects",
        "title": "Class Instantiation: Creating Objects",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "using-the-object",
        "title": "Using the Object",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "self-parameter-understanding-its-role",
        "title": "Self Parameter: Understanding Its Role",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "modifying-objects-after-creation",
        "title": "Modifying Objects after Creation",
        "level": 2,
        "wordCount": 15
      },
      {
        "id": "a-more-complex-example-banking-account",
        "title": "A More Complex Example: Banking Account",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "inheritance-building-on-existing-classes",
        "title": "Inheritance: Building on Existing Classes",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "advanced-concepts-class-methods-and-static-methods",
        "title": "Advanced Concepts: Class Methods and Static Methods",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "properties-controlled-access-to-attributes",
        "title": "Properties: Controlled Access to Attributes",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 127
      }
    ],
    "totalWordCount": 787,
    "estimatedReadingTime": 240000,
    "title": "class_definition_and_instantiation",
    "frontmatter": {}
  },
  "public\\content\\python\\object_oriented_python\\abstract_base_classes_and_interfaces.md": {
    "path": "public\\content\\python\\object_oriented_python\\abstract_base_classes_and_interfaces.md",
    "sections": [
      {
        "id": "python-abstract-base-classes-and-interfaces-first-principles",
        "title": "Python Abstract Base Classes and Interfaces: First Principles",
        "level": 1,
        "wordCount": 30
      },
      {
        "id": "the-fundamental-problem-type-checking-and-polymorphism",
        "title": "The Fundamental Problem: Type Checking and Polymorphism",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "duck-typing-pythons-initial-approach",
        "title": "Duck Typing: Python's Initial Approach",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "enter-abstract-base-classes-abcs",
        "title": "Enter Abstract Base Classes (ABCs)",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "the-difference-between-abcs-and-interfaces",
        "title": "The Difference Between ABCs and Interfaces",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "real-world-example-building-a-framework",
        "title": "Real-World Example: Building a Framework",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "registering-non-subclasses-with-abcs",
        "title": "Registering Non-Subclasses with ABCs",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "abstract-properties",
        "title": "Abstract Properties",
        "level": 2,
        "wordCount": 13
      },
      {
        "id": "virtual-subclasses-with-__subclasshook__",
        "title": "Virtual Subclasses with `__subclasshook__`",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "protocol-classes-python-38",
        "title": "Protocol Classes (Python 3.8+)",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "practical-use-case-building-a-plugin-system",
        "title": "Practical Use Case: Building a Plugin System",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "when-to-use-abcs-vs-protocols",
        "title": "When to Use ABCs vs. Protocols",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "best-practices-for-abcs-and-interfaces",
        "title": "Best Practices for ABCs and Interfaces",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 92
      }
    ],
    "totalWordCount": 826,
    "estimatedReadingTime": 240000,
    "title": "abstract_base_classes_and_interfaces",
    "frontmatter": {}
  },
  "public\\content\\python\\data_structures_and_algorithms\\tree_implementations.md": {
    "path": "public\\content\\python\\data_structures_and_algorithms\\tree_implementations.md",
    "sections": [
      {
        "id": "tree-implementations-in-python-from-first-principles",
        "title": "Tree Implementations in Python: From First Principles",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "what-is-a-tree",
        "title": "What is a Tree?",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "binary-trees",
        "title": "Binary Trees",
        "level": 2,
        "wordCount": 234
      },
      {
        "id": "avl-trees",
        "title": "AVL Trees",
        "level": 2,
        "wordCount": 185
      },
      {
        "id": "red-black-trees",
        "title": "Red-Black Trees",
        "level": 2,
        "wordCount": 198
      },
      {
        "id": "comparing-the-tree-implementations",
        "title": "Comparing the Tree Implementations",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "example-using-trees-for-real-problems",
        "title": "Example: Using Trees for Real Problems",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 107
      }
    ],
    "totalWordCount": 1057,
    "estimatedReadingTime": 300000,
    "title": "tree_implementations",
    "frontmatter": {}
  },
  "public\\content\\python\\data_structures_and_algorithms\\stacks_queues_and_deques.md": {
    "path": "public\\content\\python\\data_structures_and_algorithms\\stacks_queues_and_deques.md",
    "sections": [
      {
        "id": "python-data-structures-stacks-queues-and-deques",
        "title": "Python Data Structures: Stacks, Queues, and Deques",
        "level": 1,
        "wordCount": 27
      },
      {
        "id": "1-stack-the-lifo-structure",
        "title": "1. Stack - The LIFO Structure",
        "level": 2,
        "wordCount": 225
      },
      {
        "id": "2-queue-the-fifo-structure",
        "title": "2. Queue - The FIFO Structure",
        "level": 2,
        "wordCount": 244
      },
      {
        "id": "3-deque-the-double-ended-queue",
        "title": "3. Deque - The Double-Ended Queue",
        "level": 2,
        "wordCount": 200
      },
      {
        "id": "comparison-of-stack-queue-and-deque",
        "title": "Comparison of Stack, Queue, and Deque",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "built-in-python-implementations",
        "title": "Built-in Python Implementations",
        "level": 2,
        "wordCount": 12
      },
      {
        "id": "choosing-the-right-data-structure",
        "title": "Choosing the Right Data Structure",
        "level": 2,
        "wordCount": 85
      }
    ],
    "totalWordCount": 876,
    "estimatedReadingTime": 240000,
    "title": "stacks_queues_and_deques",
    "frontmatter": {}
  },
  "public\\content\\python\\data_structures_and_algorithms\\sorting_algorithms_and_python_timsort.md": {
    "path": "public\\content\\python\\data_structures_and_algorithms\\sorting_algorithms_and_python_timsort.md",
    "sections": [
      {
        "id": "python-sorting-algorithms-timsort-a-first-principles-exploration",
        "title": "Python Sorting Algorithms & Timsort: A First Principles Exploration",
        "level": 1,
        "wordCount": 28
      },
      {
        "id": "what-is-sorting",
        "title": "What is Sorting?",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "why-do-we-need-sorting",
        "title": "Why Do We Need Sorting?",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "understanding-algorithm-complexity",
        "title": "Understanding Algorithm Complexity",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "basic-sorting-algorithms-in-python",
        "title": "Basic Sorting Algorithms in Python",
        "level": 2,
        "wordCount": 432
      },
      {
        "id": "pythons-built-in-sorting",
        "title": "Python's Built-in Sorting",
        "level": 2,
        "wordCount": 27
      },
      {
        "id": "timsort-pythons-sorting-algorithm",
        "title": "Timsort: Python's Sorting Algorithm",
        "level": 2,
        "wordCount": 377
      },
      {
        "id": "practical-examples-of-when-each-algorithm-shines",
        "title": "Practical Examples of When Each Algorithm Shines",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "when-to-use-what-in-python",
        "title": "When to Use What in Python",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 116
      }
    ],
    "totalWordCount": 1408,
    "estimatedReadingTime": 360000,
    "title": "sorting_algorithms_and_python_timsort",
    "frontmatter": {}
  },
  "public\\content\\python\\data_structures_and_algorithms\\sets_and_frozen_sets.md": {
    "path": "public\\content\\python\\data_structures_and_algorithms\\sets_and_frozen_sets.md",
    "sections": [
      {
        "id": "understanding-python-sets-and-frozen-sets-from-first-principles",
        "title": "Understanding Python Sets and Frozen Sets from First Principles",
        "level": 1,
        "wordCount": 35
      },
      {
        "id": "what-are-sets-the-foundation",
        "title": "What Are Sets? The Foundation",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "creating-python-sets",
        "title": "Creating Python Sets",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "set-operations-mathematical-roots",
        "title": "Set Operations: Mathematical Roots",
        "level": 2,
        "wordCount": 136
      },
      {
        "id": "set-properties-and-behaviors",
        "title": "Set Properties and Behaviors",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "frozen-sets-immutable-sets",
        "title": "Frozen Sets: Immutable Sets",
        "level": 2,
        "wordCount": 190
      },
      {
        "id": "real-world-applications-of-sets-and-frozen-sets",
        "title": "Real-World Applications of Sets and Frozen Sets",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "performance-characteristics",
        "title": "Performance Characteristics",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "limitations-and-considerations",
        "title": "Limitations and Considerations",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "summary-key-differences-between-sets-and-frozen-sets",
        "title": "Summary: Key Differences Between Sets and Frozen Sets",
        "level": 2,
        "wordCount": 159
      }
    ],
    "totalWordCount": 964,
    "estimatedReadingTime": 240000,
    "title": "sets_and_frozen_sets",
    "frontmatter": {}
  },
  "public\\content\\python\\data_structures_and_algorithms\\search_algorithms_and_their_implementations.md": {
    "path": "public\\content\\python\\data_structures_and_algorithms\\search_algorithms_and_their_implementations.md",
    "sections": [
      {
        "id": "search-algorithms-from-first-principles",
        "title": "Search Algorithms: From First Principles",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "what-is-searching",
        "title": "What is Searching?",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "linear-search-the-most-intuitive-approach",
        "title": "Linear Search: The Most Intuitive Approach",
        "level": 2,
        "wordCount": 214
      },
      {
        "id": "binary-search-dividing-and-conquering",
        "title": "Binary Search: Dividing and Conquering",
        "level": 2,
        "wordCount": 349
      },
      {
        "id": "jump-search-a-middle-ground",
        "title": "Jump Search: A Middle Ground",
        "level": 2,
        "wordCount": 184
      },
      {
        "id": "interpolation-search-making-educated-guesses",
        "title": "Interpolation Search: Making Educated Guesses",
        "level": 2,
        "wordCount": 171
      },
      {
        "id": "exponential-search-unbounded-binary-search",
        "title": "Exponential Search: Unbounded Binary Search",
        "level": 2,
        "wordCount": 207
      },
      {
        "id": "tree-based-search-algorithms",
        "title": "Tree-Based Search Algorithms",
        "level": 2,
        "wordCount": 366
      },
      {
        "id": "a-search-algorithm-intelligent-pathfinding",
        "title": "A* Search Algorithm: Intelligent Pathfinding",
        "level": 2,
        "wordCount": 249
      },
      {
        "id": "practical-considerations-for-search-algorithms",
        "title": "Practical Considerations for Search Algorithms",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 94
      }
    ],
    "totalWordCount": 2052,
    "estimatedReadingTime": 540000,
    "title": "search_algorithms_and_their_implementations",
    "frontmatter": {}
  },
  "public\\content\\python\\data_structures_and_algorithms\\recursion_techniques_and_optimization.md": {
    "path": "public\\content\\python\\data_structures_and_algorithms\\recursion_techniques_and_optimization.md",
    "sections": [
      {
        "id": "python-recursion-techniques-and-optimization",
        "title": "Python Recursion Techniques and Optimization",
        "level": 1,
        "wordCount": 35
      },
      {
        "id": "first-principles-of-recursion",
        "title": "First Principles of Recursion",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "the-call-stack",
        "title": "The Call Stack",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "common-recursion-patterns",
        "title": "Common Recursion Patterns",
        "level": 2,
        "wordCount": 180
      },
      {
        "id": "recursive-data-structures-and-algorithms",
        "title": "Recursive Data Structures and Algorithms",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "recursion-optimization-techniques",
        "title": "Recursion Optimization Techniques",
        "level": 2,
        "wordCount": 181
      },
      {
        "id": "complex-example-tower-of-hanoi",
        "title": "Complex Example: Tower of Hanoi",
        "level": 2,
        "wordCount": 178
      },
      {
        "id": "when-to-use-recursion",
        "title": "When to Use Recursion",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "practice-problems",
        "title": "Practice Problems",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 83
      }
    ],
    "totalWordCount": 1097,
    "estimatedReadingTime": 300000,
    "title": "recursion_techniques_and_optimization",
    "frontmatter": {}
  },
  "public\\content\\python\\data_structures_and_algorithms\\lists_tuples_and_their_internal_implementation.md": {
    "path": "public\\content\\python\\data_structures_and_algorithms\\lists_tuples_and_their_internal_implementation.md",
    "sections": [
      {
        "id": "python-lists-and-tuples-from-first-principles",
        "title": "Python Lists and Tuples: From First Principles",
        "level": 1,
        "wordCount": 34
      },
      {
        "id": "1-memory-and-data-storage-the-foundation",
        "title": "1. Memory and Data Storage: The Foundation",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "2-the-need-for-collections",
        "title": "2. The Need for Collections",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "3-python-lists-dynamic-arrays",
        "title": "3. Python Lists: Dynamic Arrays",
        "level": 2,
        "wordCount": 262
      },
      {
        "id": "4-python-tuples-immutable-sequences",
        "title": "4. Python Tuples: Immutable Sequences",
        "level": 2,
        "wordCount": 137
      },
      {
        "id": "5-performance-characteristics",
        "title": "5. Performance Characteristics",
        "level": 2,
        "wordCount": 129
      },
      {
        "id": "6-practical-examples",
        "title": "6. Practical Examples",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "7-when-to-use-lists-vs-tuples",
        "title": "7. When to Use Lists vs Tuples",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "8-common-pitfalls-and-nuances",
        "title": "8. Common Pitfalls and Nuances",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "9-advanced-topics",
        "title": "9. Advanced Topics",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "10-memory-management",
        "title": "10. Memory Management",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 104
      }
    ],
    "totalWordCount": 1115,
    "estimatedReadingTime": 300000,
    "title": "lists_tuples_and_their_internal_implementation",
    "frontmatter": {}
  },
  "public\\content\\python\\data_structures_and_algorithms\\hashing_and_hash_functions.md": {
    "path": "public\\content\\python\\data_structures_and_algorithms\\hashing_and_hash_functions.md",
    "sections": [
      {
        "id": "hashing-and-hash-functions-in-python-from-first-principles",
        "title": "Hashing and Hash Functions in Python: From First Principles",
        "level": 1,
        "wordCount": 48
      },
      {
        "id": "what-is-hashing",
        "title": "What is Hashing?",
        "level": 2,
        "wordCount": 168
      },
      {
        "id": "why-do-we-need-hashing",
        "title": "Why Do We Need Hashing?",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "hash-functions-in-python",
        "title": "Hash Functions in Python",
        "level": 2,
        "wordCount": 471
      },
      {
        "id": "cryptographic-hash-functions",
        "title": "Cryptographic Hash Functions",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "hash-functions-for-data-integrity",
        "title": "Hash Functions for Data Integrity",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "creating-a-bloom-filter",
        "title": "Creating a Bloom Filter",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "consistent-hashing",
        "title": "Consistent Hashing",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 155
      }
    ],
    "totalWordCount": 1241,
    "estimatedReadingTime": 300000,
    "title": "hashing_and_hash_functions",
    "frontmatter": {}
  },
  "public\\content\\python\\data_structures_and_algorithms\\graph_representations_and_algorithms.md": {
    "path": "public\\content\\python\\data_structures_and_algorithms\\graph_representations_and_algorithms.md",
    "sections": [
      {
        "id": "graph-representations-and-algorithms-from-first-principles",
        "title": "Graph Representations and Algorithms from First Principles",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "what-is-a-graph",
        "title": "What Is a Graph?",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "types-of-graphs",
        "title": "Types of Graphs",
        "level": 2,
        "wordCount": 144
      },
      {
        "id": "graph-representations-in-python",
        "title": "Graph Representations in Python",
        "level": 2,
        "wordCount": 301
      },
      {
        "id": "graph-traversal-algorithms",
        "title": "Graph Traversal Algorithms",
        "level": 2,
        "wordCount": 224
      },
      {
        "id": "path-finding-algorithms",
        "title": "Path Finding Algorithms",
        "level": 2,
        "wordCount": 204
      },
      {
        "id": "graph-applications-and-advanced-algorithms",
        "title": "Graph Applications and Advanced Algorithms",
        "level": 2,
        "wordCount": 165
      },
      {
        "id": "real-world-applications",
        "title": "Real-World Applications",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 103
      }
    ],
    "totalWordCount": 1363,
    "estimatedReadingTime": 360000,
    "title": "graph_representations_and_algorithms",
    "frontmatter": {}
  },
  "public\\content\\python\\data_structures_and_algorithms\\dictionaries_and_their_hash_based_implementation.md": {
    "path": "public\\content\\python\\data_structures_and_algorithms\\dictionaries_and_their_hash_based_implementation.md",
    "sections": [
      {
        "id": "python-dictionaries-and-their-hash-based-implementation",
        "title": "Python Dictionaries and Their Hash-Based Implementation",
        "level": 1,
        "wordCount": 34
      },
      {
        "id": "1-what-is-a-dictionary",
        "title": "1. What is a Dictionary?",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "2-the-need-for-efficient-lookups",
        "title": "2. The Need for Efficient Lookups",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "3-hash-functions-the-foundation",
        "title": "3. Hash Functions: The Foundation",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "4-from-hash-to-index-the-modulo-operation",
        "title": "4. From Hash to Index: The Modulo Operation",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "5-handling-collisions-when-different-keys-hash-to-the-same-index",
        "title": "5. Handling Collisions: When Different Keys Hash to the Same Index",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "6-dictionary-implementation-in-python",
        "title": "6. Dictionary Implementation in Python",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "7-dictionary-performance-characteristics",
        "title": "7. Dictionary Performance Characteristics",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "8-dictionary-methods-and-operations",
        "title": "8. Dictionary Methods and Operations",
        "level": 2,
        "wordCount": 22
      },
      {
        "id": "9-dictionary-comprehensions",
        "title": "9. Dictionary Comprehensions",
        "level": 2,
        "wordCount": 15
      },
      {
        "id": "10-hash-table-resizing",
        "title": "10. Hash Table Resizing",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "11-requirements-for-dictionary-keys",
        "title": "11. Requirements for Dictionary Keys",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "12-under-the-hood-cpython-implementation",
        "title": "12. Under the Hood: CPython Implementation",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "13-practical-examples",
        "title": "13. Practical Examples",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "14-advanced-dictionary-features",
        "title": "14. Advanced Dictionary Features",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "15-real-world-connections-hash-tables-beyond-python",
        "title": "15. Real-world Connections: Hash Tables Beyond Python",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 84
      }
    ],
    "totalWordCount": 1041,
    "estimatedReadingTime": 300000,
    "title": "dictionaries_and_their_hash_based_implementation",
    "frontmatter": {}
  },
  "public\\content\\python\\data_structures_and_algorithms\\collections_module_deep_dive.md": {
    "path": "public\\content\\python\\data_structures_and_algorithms\\collections_module_deep_dive.md",
    "sections": [
      {
        "id": "python-collections-module-a-first-principles-deep-dive",
        "title": "Python Collections Module: A First Principles Deep Dive",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "what-are-collections",
        "title": "What Are Collections?",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "why-do-we-need-specialized-collections",
        "title": "Why Do We Need Specialized Collections?",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "core-components-of-the-collections-module",
        "title": "Core Components of the Collections Module",
        "level": 2,
        "wordCount": 570
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 179
      },
      {
        "id": "practical-applications",
        "title": "Practical Applications",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "going-beyond-the-collections-module",
        "title": "Going Beyond the Collections Module",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 126
      }
    ],
    "totalWordCount": 1206,
    "estimatedReadingTime": 300000,
    "title": "collections_module_deep_dive",
    "frontmatter": {}
  },
  "public\\content\\python\\data_structures_and_algorithms\\arrays_and_byte_arrays.md": {
    "path": "public\\content\\python\\data_structures_and_algorithms\\arrays_and_byte_arrays.md",
    "sections": [
      {
        "id": "understanding-python-arrays-and-byte-arrays-from-first-principles",
        "title": "Understanding Python Arrays and Byte Arrays from First Principles",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "1-the-foundation-computer-memory",
        "title": "1. The Foundation: Computer Memory",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "2-what-is-an-array",
        "title": "2. What Is an Array?",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "3-python-lists-vs-arrays",
        "title": "3. Python Lists vs. Arrays",
        "level": 2,
        "wordCount": 125
      },
      {
        "id": "4-true-arrays-in-python-with-the-array-module",
        "title": "4. True Arrays in Python with the `array` Module",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "5-understanding-byte-arrays-bytearray",
        "title": "5. Understanding Byte Arrays: `bytearray`",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "6-real-world-applications",
        "title": "6. Real-World Applications",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "7-memory-representation-and-performance",
        "title": "7. Memory Representation and Performance",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "8-working-with-byte-arrays-and-encoding",
        "title": "8. Working with Byte Arrays and Encoding",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "9-array-slicing-and-operations",
        "title": "9. Array Slicing and Operations",
        "level": 2,
        "wordCount": 19
      },
      {
        "id": "10-performance-considerations",
        "title": "10. Performance Considerations",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 135
      }
    ],
    "totalWordCount": 925,
    "estimatedReadingTime": 240000,
    "title": "arrays_and_byte_arrays",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\working_with_dates_and_times.md": {
    "path": "public\\content\\python\\core_python_concepts\\working_with_dates_and_times.md",
    "sections": [
      {
        "id": "understanding-dates-and-times-in-python-a-first-principles-approach",
        "title": "Understanding Dates and Times in Python: A First Principles Approach",
        "level": 1,
        "wordCount": 45
      },
      {
        "id": "the-fundamental-problem-of-time",
        "title": "The Fundamental Problem of Time",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "the-key-python-datetime-libraries",
        "title": "The Key Python DateTime Libraries",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "the-datetime-module-core-classes",
        "title": "The `datetime` Module: Core Classes",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "creating-date-objects",
        "title": "Creating Date Objects",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "creating-time-objects",
        "title": "Creating Time Objects",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "creating-datetime-objects",
        "title": "Creating DateTime Objects",
        "level": 2,
        "wordCount": 23
      },
      {
        "id": "understanding-time-deltas",
        "title": "Understanding Time Deltas",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "formatting-and-parsing-dates-and-times",
        "title": "Formatting and Parsing Dates and Times",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "working-with-time-zones",
        "title": "Working with Time Zones",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "timestamps-and-unix-time",
        "title": "Timestamps and Unix Time",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 158
      },
      {
        "id": "common-challenges-and-best-practices",
        "title": "Common Challenges and Best Practices",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 121
      }
    ],
    "totalWordCount": 848,
    "estimatedReadingTime": 240000,
    "title": "working_with_dates_and_times",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\type_annotations_and_hints.md": {
    "path": "public\\content\\python\\core_python_concepts\\type_annotations_and_hints.md",
    "sections": [
      {
        "id": "python-type-annotations-and-hints-a-first-principles-approach",
        "title": "Python Type Annotations and Hints: A First-Principles Approach",
        "level": 1,
        "wordCount": 51
      },
      {
        "id": "the-foundations-static-vs-dynamic-typing",
        "title": "The Foundations: Static vs. Dynamic Typing",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "the-birth-of-python-type-annotations",
        "title": "The Birth of Python Type Annotations",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "the-basic-syntax",
        "title": "The Basic Syntax",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "type-annotations-without-initial-values",
        "title": "Type Annotations Without Initial Values",
        "level": 2,
        "wordCount": 19
      },
      {
        "id": "function-annotations",
        "title": "Function Annotations",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "the-python-typing-module",
        "title": "The Python `typing` Module",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "why-use-type-annotations-the-first-principles-benefits",
        "title": "Why Use Type Annotations? The First-Principles Benefits",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "advanced-type-annotations",
        "title": "Advanced Type Annotations",
        "level": 2,
        "wordCount": 125
      },
      {
        "id": "python-38-type-annotation-improvements",
        "title": "Python 3.8+ Type Annotation Improvements",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "type-annotations-in-python-39-and-beyond",
        "title": "Type Annotations in Python 3.9+ and Beyond",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "practical-example-a-type-annotated-user-management-system",
        "title": "Practical Example: A Type-Annotated User Management System",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "common-misconceptions-and-limitations",
        "title": "Common Misconceptions and Limitations",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "tools-and-ecosystem",
        "title": "Tools and Ecosystem",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 102
      }
    ],
    "totalWordCount": 1060,
    "estimatedReadingTime": 300000,
    "title": "type_annotations_and_hints",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\string_operations_and_advanced_formatting.md": {
    "path": "public\\content\\python\\core_python_concepts\\string_operations_and_advanced_formatting.md",
    "sections": [
      {
        "id": "python-string-operations-and-advanced-formatting-a-first-principles-approach",
        "title": "Python String Operations and Advanced Formatting: A First Principles Approach",
        "level": 1,
        "wordCount": 33
      },
      {
        "id": "what-is-a-string",
        "title": "What Is a String?",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "string-immutability",
        "title": "String Immutability",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "basic-string-operations",
        "title": "Basic String Operations",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "string-methods",
        "title": "String Methods",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "string-formatting",
        "title": "String Formatting",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "advanced-string-formatting-techniques",
        "title": "Advanced String Formatting Techniques",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "real-world-examples",
        "title": "Real-World Examples",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "string-operations-performance-considerations",
        "title": "String Operations Performance Considerations",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 130
      }
    ],
    "totalWordCount": 918,
    "estimatedReadingTime": 240000,
    "title": "string_operations_and_advanced_formatting",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\scope_and_namespaces.md": {
    "path": "public\\content\\python\\core_python_concepts\\scope_and_namespaces.md",
    "sections": [
      {
        "id": "understanding-scope-and-namespaces-in-python-the-legb-rule",
        "title": "Understanding Scope and Namespaces in Python: The LEGB Rule",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "what-are-namespaces",
        "title": "What Are Namespaces?",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "what-is-scope",
        "title": "What Is Scope?",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "the-legb-rule",
        "title": "The LEGB Rule",
        "level": 2,
        "wordCount": 210
      },
      {
        "id": "practical-examples-of-legb-in-action",
        "title": "Practical Examples of LEGB in Action",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "advanced-concepts-closures",
        "title": "Advanced Concepts: Closures",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "how-python-implements-namespaces-internally",
        "title": "How Python Implements Namespaces Internally",
        "level": 2,
        "wordCount": 19
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 115
      }
    ],
    "totalWordCount": 825,
    "estimatedReadingTime": 240000,
    "title": "scope_and_namespaces",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\regular_expressions.md": {
    "path": "public\\content\\python\\core_python_concepts\\regular_expressions.md",
    "sections": [
      {
        "id": "python-regular-expressions-a-first-principles-approach",
        "title": "Python Regular Expressions: A First Principles Approach",
        "level": 1,
        "wordCount": 31
      },
      {
        "id": "the-fundamental-concept-pattern-matching",
        "title": "The Fundamental Concept: Pattern Matching",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "the-building-blocks-of-regular-expressions",
        "title": "The Building Blocks of Regular Expressions",
        "level": 2,
        "wordCount": 276
      },
      {
        "id": "quantifiers-controlling-repetition",
        "title": "Quantifiers: Controlling Repetition",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "anchors-specifying-position",
        "title": "Anchors: Specifying Position",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "grouping-and-capturing",
        "title": "Grouping and Capturing",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "non-capturing-groups",
        "title": "Non-capturing Groups",
        "level": 2,
        "wordCount": 14
      },
      {
        "id": "alternation-matching-one-of-several-patterns",
        "title": "Alternation: Matching One of Several Patterns",
        "level": 2,
        "wordCount": 16
      },
      {
        "id": "greedy-vs-non-greedy-matching",
        "title": "Greedy vs. Non-Greedy Matching",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "look-ahead-and-look-behind-assertions",
        "title": "Look-ahead and Look-behind Assertions",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "real-world-examples",
        "title": "Real-World Examples",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "common-python-regex-functions",
        "title": "Common Python Regex Functions",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "compiling-patterns-for-better-performance",
        "title": "Compiling Patterns for Better Performance",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "tips-for-writing-effective-regular-expressions",
        "title": "Tips for Writing Effective Regular Expressions",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 89
      }
    ],
    "totalWordCount": 996,
    "estimatedReadingTime": 240000,
    "title": "regular_expressions",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\python_memory_model_and_garbage_collection.md": {
    "path": "public\\content\\python\\core_python_concepts\\python_memory_model_and_garbage_collection.md",
    "sections": [
      {
        "id": "python-memory-model-and-garbage-collection-first-principles",
        "title": "Python Memory Model and Garbage Collection: First Principles",
        "level": 1,
        "wordCount": 31
      },
      {
        "id": "1-what-is-computer-memory",
        "title": "1. What is Computer Memory?",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "2-pythons-memory-architecture",
        "title": "2. Python's Memory Architecture",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "3-everything-is-an-object",
        "title": "3. Everything is an Object",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "4-value-vs-reference",
        "title": "4. Value vs Reference",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "5-object-lifecycle",
        "title": "5. Object Lifecycle",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "6-pythons-memory-manager",
        "title": "6. Python's Memory Manager",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "7-reference-counting",
        "title": "7. Reference Counting",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "8-limitations-of-reference-counting",
        "title": "8. Limitations of Reference Counting",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "9-generational-garbage-collection",
        "title": "9. Generational Garbage Collection",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "10-memory-optimizations",
        "title": "10. Memory Optimizations",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "11-common-memory-issues-in-python",
        "title": "11. Common Memory Issues in Python",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "12-practical-tools-for-memory-management",
        "title": "12. Practical Tools for Memory Management",
        "level": 2,
        "wordCount": 17
      },
      {
        "id": "13-advanced-memory-management",
        "title": "13. Advanced Memory Management",
        "level": 2,
        "wordCount": 23
      },
      {
        "id": "14-measuring-object-size",
        "title": "14. Measuring Object Size",
        "level": 2,
        "wordCount": 14
      },
      {
        "id": "15-best-practices-for-memory-management",
        "title": "15. Best Practices for Memory Management",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 115
      }
    ],
    "totalWordCount": 1020,
    "estimatedReadingTime": 300000,
    "title": "python_memory_model_and_garbage_collection",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\path_handling_and_file_system_operations.md": {
    "path": "public\\content\\python\\core_python_concepts\\path_handling_and_file_system_operations.md",
    "sections": [
      {
        "id": "python-path-handling-and-file-system-operations-from-first-principles",
        "title": "Python Path Handling and File System Operations: From First Principles",
        "level": 1,
        "wordCount": 43
      },
      {
        "id": "1-what-is-a-path",
        "title": "1. What Is a Path?",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "2-path-manipulation-with-ospath",
        "title": "2. Path Manipulation with `os.path`",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "3-modern-path-handling-with-pathlib",
        "title": "3. Modern Path Handling with `pathlib`",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "4-basic-file-operations",
        "title": "4. Basic File Operations",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "5-directory-operations",
        "title": "5. Directory Operations",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "6-file-metadata-and-properties",
        "title": "6. File Metadata and Properties",
        "level": 2,
        "wordCount": 13
      },
      {
        "id": "7-moving-copying-and-deleting-files",
        "title": "7. Moving, Copying, and Deleting Files",
        "level": 2,
        "wordCount": 6
      },
      {
        "id": "8-working-with-temporary-files-and-directories",
        "title": "8. Working with Temporary Files and Directories",
        "level": 2,
        "wordCount": 22
      },
      {
        "id": "9-file-paths-in-python-packages",
        "title": "9. File Paths in Python Packages",
        "level": 2,
        "wordCount": 25
      },
      {
        "id": "10-real-world-example-processing-multiple-files",
        "title": "10. Real-World Example: Processing Multiple Files",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "11-path-normalization-and-resolution",
        "title": "11. Path Normalization and Resolution",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "12-working-with-file-encodings",
        "title": "12. Working with File Encodings",
        "level": 2,
        "wordCount": 17
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 116
      }
    ],
    "totalWordCount": 650,
    "estimatedReadingTime": 180000,
    "title": "path_handling_and_file_system_operations",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\modules_and_import_system.md": {
    "path": "public\\content\\python\\core_python_concepts\\modules_and_import_system.md",
    "sections": [
      {
        "id": "python-modules-and-import-system-from-first-principles",
        "title": "Python Modules and Import System: From First Principles",
        "level": 1,
        "wordCount": 54
      },
      {
        "id": "what-is-a-module-the-fundamental-building-block",
        "title": "What is a Module? The Fundamental Building Block",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "why-do-we-need-modules",
        "title": "Why Do We Need Modules?",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "the-import-system-bringing-in-code",
        "title": "The Import System: Bringing in Code",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "how-python-finds-modules-the-search-path",
        "title": "How Python Finds Modules: The Search Path",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "different-ways-to-import",
        "title": "Different Ways to Import",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "behind-the-scenes-what-happens-during-import",
        "title": "Behind the Scenes: What Happens During Import",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "packages-organizing-modules",
        "title": "Packages: Organizing Modules",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "the-__init__py-file-package-initialization",
        "title": "The `__init__.py` File: Package Initialization",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "relative-imports-referencing-sibling-modules",
        "title": "Relative Imports: Referencing Sibling Modules",
        "level": 2,
        "wordCount": 22
      },
      {
        "id": "practical-example-building-a-useful-package",
        "title": "Practical Example: Building a Useful Package",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "module-search-path-in-depth",
        "title": "Module Search Path In-Depth",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "import-hooks-and-custom-importers",
        "title": "Import Hooks and Custom Importers",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "pythons-module-reloading",
        "title": "Python's Module Reloading",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "standard-library-modules-built-in-power",
        "title": "Standard Library Modules: Built-in Power",
        "level": 2,
        "wordCount": 15
      },
      {
        "id": "third-party-packages-the-python-ecosystem",
        "title": "Third-Party Packages: The Python Ecosystem",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "virtual-environments-isolated-dependencies",
        "title": "Virtual Environments: Isolated Dependencies",
        "level": 2,
        "wordCount": 17
      },
      {
        "id": "the-__pycache__-directory-bytecode-optimization",
        "title": "The `__pycache__` Directory: Bytecode Optimization",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "module-documentation-helping-users",
        "title": "Module Documentation: Helping Users",
        "level": 2,
        "wordCount": 16
      },
      {
        "id": "the-__main__-block-dual-purpose-modules",
        "title": "The `__main__` Block: Dual-Purpose Modules",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 94
      }
    ],
    "totalWordCount": 1266,
    "estimatedReadingTime": 360000,
    "title": "modules_and_import_system",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\lambda_functions.md": {
    "path": "public\\content\\python\\core_python_concepts\\lambda_functions.md",
    "sections": [
      {
        "id": "python-lambda-functions-a-first-principles-explanation",
        "title": "Python Lambda Functions: A First Principles Explanation",
        "level": 1,
        "wordCount": 40
      },
      {
        "id": "what-is-a-function",
        "title": "What is a Function?",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "the-concept-of-anonymous-functions",
        "title": "The Concept of Anonymous Functions",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "enter-lambda-functions",
        "title": "Enter Lambda Functions",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "a-simple-lambda-example",
        "title": "A Simple Lambda Example",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "why-lambda-functions",
        "title": "Why Lambda Functions?",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "lambda-functions-in-action",
        "title": "Lambda Functions in Action",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "lambda-function-limitations",
        "title": "Lambda Function Limitations",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "when-to-use-lambda-vs-regular-functions",
        "title": "When to Use Lambda vs. Regular Functions",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "functional-programming-applications",
        "title": "Functional Programming Applications",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "lambda-functions-in-real-world-scenarios",
        "title": "Lambda Functions in Real-World Scenarios",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "lambda-functions-and-closures",
        "title": "Lambda Functions and Closures",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "understanding-lambda-functions-at-a-deep-level",
        "title": "Understanding Lambda Functions at a Deep Level",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 120
      }
    ],
    "totalWordCount": 960,
    "estimatedReadingTime": 240000,
    "title": "lambda_functions",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\iterators_and_generators.md": {
    "path": "public\\content\\python\\core_python_concepts\\iterators_and_generators.md",
    "sections": [
      {
        "id": "python-iterators-and-generators-a-first-principles-exploration",
        "title": "Python Iterators and Generators: A First Principles Exploration",
        "level": 1,
        "wordCount": 29
      },
      {
        "id": "part-1-what-is-iteration",
        "title": "Part 1: What is Iteration?",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "part-2-iterators-the-underlying-mechanism",
        "title": "Part 2: Iterators - The Underlying Mechanism",
        "level": 2,
        "wordCount": 167
      },
      {
        "id": "part-3-generators-simplified-iterators",
        "title": "Part 3: Generators - Simplified Iterators",
        "level": 2,
        "wordCount": 177
      },
      {
        "id": "part-4-advanced-generator-features",
        "title": "Part 4: Advanced Generator Features",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "part-5-practical-examples",
        "title": "Part 5: Practical Examples",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "part-6-benefits-and-use-cases",
        "title": "Part 6: Benefits and Use Cases",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "part-7-iterator-and-generator-best-practices",
        "title": "Part 7: Iterator and Generator Best Practices",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 102
      }
    ],
    "totalWordCount": 849,
    "estimatedReadingTime": 240000,
    "title": "iterators_and_generators",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\function_arguments.md": {
    "path": "public\\content\\python\\core_python_concepts\\function_arguments.md",
    "sections": [
      {
        "id": "understanding-function-arguments-in-python-from-first-principles",
        "title": "Understanding Function Arguments in Python from First Principles",
        "level": 1,
        "wordCount": 42
      },
      {
        "id": "the-essence-of-functions",
        "title": "The Essence of Functions",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "positional-arguments",
        "title": "Positional Arguments",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "keyword-arguments",
        "title": "Keyword Arguments",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "default-arguments",
        "title": "Default Arguments",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "variable-length-arguments-args",
        "title": "Variable-Length Arguments (*args)",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "variable-length-keyword-arguments-kwargs",
        "title": "Variable-Length Keyword Arguments (**kwargs)",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "bringing-it-all-together",
        "title": "Bringing It All Together",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "unpacking-arguments",
        "title": "Unpacking Arguments",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "keyword-only-arguments",
        "title": "Keyword-Only Arguments",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "positional-only-arguments-python-38",
        "title": "Positional-Only Arguments (Python 3.8+)",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "real-world-application-example",
        "title": "Real-World Application Example",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 128
      }
    ],
    "totalWordCount": 828,
    "estimatedReadingTime": 240000,
    "title": "function_arguments",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\first_class_functions.md": {
    "path": "public\\content\\python\\core_python_concepts\\first_class_functions.md",
    "sections": [
      {
        "id": "python-first-class-functions-a-comprehensive-explanation",
        "title": "Python First-Class Functions: A Comprehensive Explanation",
        "level": 1,
        "wordCount": 36
      },
      {
        "id": "what-does-first-class-mean",
        "title": "What Does \"First-Class\" Mean?",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "functions-as-values",
        "title": "Functions as Values",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "functions-as-arguments",
        "title": "Functions as Arguments",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "functions-returning-functions",
        "title": "Functions Returning Functions",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "functions-in-data-structures",
        "title": "Functions in Data Structures",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "lambda-functions-anonymous-first-class-functions",
        "title": "Lambda Functions: Anonymous First-Class Functions",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "higher-order-functions",
        "title": "Higher-Order Functions",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "decorators-a-practical-application-of-first-class-functions",
        "title": "Decorators: A Practical Application of First-Class Functions",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "closures-functions-remembering-their-environment",
        "title": "Closures: Functions Remembering Their Environment",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "partial-functions-creating-specialized-functions",
        "title": "Partial Functions: Creating Specialized Functions",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "benefits-of-first-class-functions",
        "title": "Benefits of First-Class Functions",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 22
      },
      {
        "id": "common-pitfalls",
        "title": "Common Pitfalls",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 97
      }
    ],
    "totalWordCount": 986,
    "estimatedReadingTime": 240000,
    "title": "first_class_functions",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\file_operations.md": {
    "path": "public\\content\\python\\core_python_concepts\\file_operations.md",
    "sections": [
      {
        "id": "python-file-operations-from-first-principles",
        "title": "Python File Operations: From First Principles",
        "level": 1,
        "wordCount": 57
      },
      {
        "id": "understanding-files-the-foundation",
        "title": "Understanding Files: The Foundation",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "opening-files-in-python",
        "title": "Opening Files in Python",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "file-modes-the-key-to-controlling-file-operations",
        "title": "File Modes: The Key to Controlling File Operations",
        "level": 2,
        "wordCount": 204
      },
      {
        "id": "binary-vs-text-mode",
        "title": "Binary vs Text Mode",
        "level": 2,
        "wordCount": 155
      },
      {
        "id": "the-with-statement-context-management",
        "title": "The `with` Statement: Context Management",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "reading-from-files-multiple-methods",
        "title": "Reading from Files: Multiple Methods",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "writing-to-files",
        "title": "Writing to Files",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "working-with-file-positions",
        "title": "Working with File Positions",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "real-world-examples",
        "title": "Real-World Examples",
        "level": 2,
        "wordCount": 147
      },
      {
        "id": "error-handling-in-file-operations",
        "title": "Error Handling in File Operations",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "advanced-file-operations",
        "title": "Advanced File Operations",
        "level": 2,
        "wordCount": 23
      },
      {
        "id": "summary-and-best-practices",
        "title": "Summary and Best Practices",
        "level": 2,
        "wordCount": 167
      }
    ],
    "totalWordCount": 1255,
    "estimatedReadingTime": 360000,
    "title": "file_operations",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\extended_operators_and_their_behavior.md": {
    "path": "public\\content\\python\\core_python_concepts\\extended_operators_and_their_behavior.md",
    "sections": [
      {
        "id": "pythons-extended-operators-a-first-principles-explanation",
        "title": "Python's Extended Operators: A First Principles Explanation",
        "level": 1,
        "wordCount": 40
      },
      {
        "id": "what-are-operators",
        "title": "What Are Operators?",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "basic-operators-in-python",
        "title": "Basic Operators in Python",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "what-are-extended-operators",
        "title": "What Are Extended Operators?",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "extended-operators-in-python",
        "title": "Extended Operators in Python",
        "level": 2,
        "wordCount": 234
      },
      {
        "id": "how-extended-operators-work-under-the-hood",
        "title": "How Extended Operators Work Under the Hood",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "practical-applications",
        "title": "Practical Applications",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "important-considerations",
        "title": "Important Considerations",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "extended-operators-with-custom-classes",
        "title": "Extended Operators with Custom Classes",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "common-pitfalls",
        "title": "Common Pitfalls",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 110
      }
    ],
    "totalWordCount": 790,
    "estimatedReadingTime": 240000,
    "title": "extended_operators_and_their_behavior",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\exception_hierarchy_and_custom_exceptions.md": {
    "path": "public\\content\\python\\core_python_concepts\\exception_hierarchy_and_custom_exceptions.md",
    "sections": [
      {
        "id": "python-exception-hierarchy-and-custom-exceptions",
        "title": "Python Exception Hierarchy and Custom Exceptions",
        "level": 1,
        "wordCount": 27
      },
      {
        "id": "what-are-exceptions",
        "title": "What Are Exceptions?",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "exception-handling-try-except-blocks",
        "title": "Exception Handling: Try-Except Blocks",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "the-exception-hierarchy",
        "title": "The Exception Hierarchy",
        "level": 2,
        "wordCount": 125
      },
      {
        "id": "common-built-in-exceptions",
        "title": "Common Built-in Exceptions",
        "level": 2,
        "wordCount": 139
      },
      {
        "id": "creating-custom-exceptions",
        "title": "Creating Custom Exceptions",
        "level": 2,
        "wordCount": 259
      },
      {
        "id": "best-practices-for-custom-exceptions",
        "title": "Best Practices for Custom Exceptions",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "advanced-exception-handling",
        "title": "Advanced Exception Handling",
        "level": 2,
        "wordCount": 140
      },
      {
        "id": "a-real-world-example",
        "title": "A Real-World Example",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 122
      }
    ],
    "totalWordCount": 1186,
    "estimatedReadingTime": 300000,
    "title": "exception_hierarchy_and_custom_exceptions",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\deep_dive_into_python_data_types.md": {
    "path": "public\\content\\python\\core_python_concepts\\deep_dive_into_python_data_types.md",
    "sections": [
      {
        "id": "a-deep-dive-into-python-data-types-from-first-principles",
        "title": "A Deep Dive into Python Data Types: From First Principles",
        "level": 1,
        "wordCount": 55
      },
      {
        "id": "what-are-data-types",
        "title": "What Are Data Types?",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "primitive-vs-non-primitive-types",
        "title": "Primitive vs. Non-Primitive Types",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "the-foundation-numeric-types",
        "title": "The Foundation: Numeric Types",
        "level": 2,
        "wordCount": 165
      },
      {
        "id": "the-boolean-type-bool",
        "title": "The Boolean Type (`bool`)",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "none-type-nonetype",
        "title": "None Type (`NoneType`)",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "sequence-types",
        "title": "Sequence Types",
        "level": 2,
        "wordCount": 179
      },
      {
        "id": "set-types",
        "title": "Set Types",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "mapping-types",
        "title": "Mapping Types",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "binary-types",
        "title": "Binary Types",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "special-collections",
        "title": "Special Collections",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "type-checking-and-conversion",
        "title": "Type Checking and Conversion",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "memory-considerations",
        "title": "Memory Considerations",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "choosing-the-right-data-type",
        "title": "Choosing the Right Data Type",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "special-methods-and-operator-overloading",
        "title": "Special Methods and Operator Overloading",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "type-annotations-and-type-hints",
        "title": "Type Annotations and Type Hints",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 120
      }
    ],
    "totalWordCount": 1369,
    "estimatedReadingTime": 360000,
    "title": "deep_dive_into_python_data_types",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\context_managers_and_the_with_statement.md": {
    "path": "public\\content\\python\\core_python_concepts\\context_managers_and_the_with_statement.md",
    "sections": [
      {
        "id": "python-context-managers-and-the-with-statement-from-first-principles",
        "title": "Python Context Managers and the `with` Statement: From First Principles",
        "level": 1,
        "wordCount": 54
      },
      {
        "id": "understanding-resources-and-resource-management",
        "title": "Understanding Resources and Resource Management",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "the-traditional-way-tryfinally",
        "title": "The Traditional Way: Try/Finally",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "enter-context-managers-and-the-with-statement",
        "title": "Enter Context Managers and the `with` Statement",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "how-context-managers-work-the-protocol",
        "title": "How Context Managers Work: The Protocol",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "creating-your-own-context-manager-using-a-class",
        "title": "Creating Your Own Context Manager Using a Class",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "the-contextlib-module-creating-context-managers-with-decorators",
        "title": "The `contextlib` Module: Creating Context Managers with Decorators",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "yielding-values-with-contextmanager",
        "title": "Yielding Values with `@contextmanager`",
        "level": 2,
        "wordCount": 19
      },
      {
        "id": "handling-exceptions-in-context-managers",
        "title": "Handling Exceptions in Context Managers",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "nested-context-managers",
        "title": "Nested Context Managers",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "real-world-examples",
        "title": "Real-World Examples",
        "level": 2,
        "wordCount": 21
      },
      {
        "id": "benefits-of-using-context-managers",
        "title": "Benefits of Using Context Managers",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "common-built-in-context-managers",
        "title": "Common Built-in Context Managers",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "when-to-create-your-own-context-managers",
        "title": "When to Create Your Own Context Managers",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "best-practices-for-context-managers",
        "title": "Best Practices for Context Managers",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 82
      }
    ],
    "totalWordCount": 930,
    "estimatedReadingTime": 240000,
    "title": "context_managers_and_the_with_statement",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\comprehensions.md": {
    "path": "public\\content\\python\\core_python_concepts\\comprehensions.md",
    "sections": [
      {
        "id": "python-comprehensions-understanding-from-first-principles",
        "title": "Python Comprehensions: Understanding from First Principles",
        "level": 1,
        "wordCount": 52
      },
      {
        "id": "the-foundation-understanding-iteration",
        "title": "The Foundation: Understanding Iteration",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "list-comprehensions-the-core-concept",
        "title": "List Comprehensions: The Core Concept",
        "level": 2,
        "wordCount": 201
      },
      {
        "id": "dictionary-comprehensions-mapping-keys-to-values",
        "title": "Dictionary Comprehensions: Mapping Keys to Values",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "set-comprehensions-creating-unique-collections",
        "title": "Set Comprehensions: Creating Unique Collections",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "nested-comprehensions-comprehensions-inside-comprehensions",
        "title": "Nested Comprehensions: Comprehensions Inside Comprehensions",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "when-to-use-comprehensions",
        "title": "When to Use Comprehensions",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "practical-applications",
        "title": "Practical Applications",
        "level": 2,
        "wordCount": 12
      },
      {
        "id": "comprehensions-in-functional-programming",
        "title": "Comprehensions in Functional Programming",
        "level": 2,
        "wordCount": 25
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 113
      }
    ],
    "totalWordCount": 910,
    "estimatedReadingTime": 240000,
    "title": "comprehensions",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\command_line_arguments_parsing.md": {
    "path": "public\\content\\python\\core_python_concepts\\command_line_arguments_parsing.md",
    "sections": [
      {
        "id": "python-command-line-arguments-parsing-from-first-principles",
        "title": "Python Command-line Arguments Parsing from First Principles",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "what-are-command-line-arguments",
        "title": "What Are Command-line Arguments?",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "how-python-accesses-command-line-arguments",
        "title": "How Python Accesses Command-line Arguments",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "the-argparse-module-a-better-way",
        "title": "The `argparse` Module: A Better Way",
        "level": 2,
        "wordCount": 176
      },
      {
        "id": "subcommands-with-argparse",
        "title": "Subcommands with `argparse`",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "beyond-argparse-other-parsing-libraries",
        "title": "Beyond `argparse`: Other Parsing Libraries",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 12
      },
      {
        "id": "best-practices-for-command-line-argument-parsing",
        "title": "Best Practices for Command-line Argument Parsing",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 64
      }
    ],
    "totalWordCount": 648,
    "estimatedReadingTime": 180000,
    "title": "command_line_arguments_parsing",
    "frontmatter": {}
  },
  "public\\content\\python\\core_python_concepts\\closures_and_nested_functions.md": {
    "path": "public\\content\\python\\core_python_concepts\\closures_and_nested_functions.md",
    "sections": [
      {
        "id": "python-closures-and-nested-functions-from-first-principles",
        "title": "Python Closures and Nested Functions: From First Principles",
        "level": 1,
        "wordCount": 40
      },
      {
        "id": "1-understanding-python-functions-as-objects",
        "title": "1. Understanding Python Functions as Objects",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "2-nested-functions-functions-within-functions",
        "title": "2. Nested Functions - Functions Within Functions",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "3-returning-nested-functions-the-basis-of-closures",
        "title": "3. Returning Nested Functions - The Basis of Closures",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "4-understanding-closures",
        "title": "4. Understanding Closures",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "5-why-closures-are-useful-practical-examples",
        "title": "5. Why Closures are Useful - Practical Examples",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "6-the-nonlocal-keyword",
        "title": "6. The nonlocal Keyword",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "7-understanding-variable-lookup-rules",
        "title": "7. Understanding Variable Lookup Rules",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "8-practical-application-memoization-with-closures",
        "title": "8. Practical Application: Memoization with Closures",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "9-limitations-and-considerations",
        "title": "9. Limitations and Considerations",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "10-comparing-closures-with-other-approaches",
        "title": "10. Comparing Closures with Other Approaches",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 135
      }
    ],
    "totalWordCount": 999,
    "estimatedReadingTime": 240000,
    "title": "closures_and_nested_functions",
    "frontmatter": {}
  },
  "public\\content\\python\\concurrent_and_parallel_programming\\work_distribution_strategies.md": {
    "path": "public\\content\\python\\concurrent_and_parallel_programming\\work_distribution_strategies.md",
    "sections": [
      {
        "id": "python-work-distribution-strategies-a-first-principles-approach",
        "title": "Python Work Distribution Strategies: A First Principles Approach",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "1-why-distribute-work",
        "title": "1. Why Distribute Work?",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "2-fundamental-resources-for-distribution",
        "title": "2. Fundamental Resources for Distribution",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "3-basic-forms-of-work-distribution",
        "title": "3. Basic Forms of Work Distribution",
        "level": 2,
        "wordCount": 165
      },
      {
        "id": "4-higher-level-distribution-strategies",
        "title": "4. Higher-Level Distribution Strategies",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "5-data-parallelism-vs-task-parallelism",
        "title": "5. Data Parallelism vs. Task Parallelism",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "6-distribution-across-machines",
        "title": "6. Distribution Across Machines",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "7-balancing-the-load",
        "title": "7. Balancing the Load",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "8-communication-and-coordination",
        "title": "8. Communication and Coordination",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "9-practical-advanced-examples",
        "title": "9. Practical Advanced Examples",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "10-common-challenges-and-solutions",
        "title": "10. Common Challenges and Solutions",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "11-choosing-the-right-strategy",
        "title": "11. Choosing the Right Strategy",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "12-measuring-and-optimizing-performance",
        "title": "12. Measuring and Optimizing Performance",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 69
      }
    ],
    "totalWordCount": 1085,
    "estimatedReadingTime": 300000,
    "title": "work_distribution_strategies",
    "frontmatter": {}
  },
  "public\\content\\python\\concurrent_and_parallel_programming\\understanding_cpu_bound_vs_io_bound_tasks.md": {
    "path": "public\\content\\python\\concurrent_and_parallel_programming\\understanding_cpu_bound_vs_io_bound_tasks.md",
    "sections": [
      {
        "id": "understanding-cpu-bound-vs-io-bound-tasks-in-python-from-first-principles",
        "title": "Understanding CPU-bound vs. IO-bound Tasks in Python: From First Principles",
        "level": 1,
        "wordCount": 33
      },
      {
        "id": "what-are-resources-in-computing",
        "title": "What Are Resources in Computing?",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "the-nature-of-tasks-cpu-bound-vs-io-bound",
        "title": "The Nature of Tasks: CPU-bound vs. IO-bound",
        "level": 2,
        "wordCount": 297
      },
      {
        "id": "understanding-the-distinction-through-a-restaurant-analogy",
        "title": "Understanding the Distinction Through a Restaurant Analogy",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "how-python-handles-these-tasks",
        "title": "How Python Handles These Tasks",
        "level": 2,
        "wordCount": 390
      },
      {
        "id": "determining-whether-a-task-is-cpu-bound-or-io-bound",
        "title": "Determining Whether a Task is CPU-bound or IO-bound",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "optimizing-for-different-task-types",
        "title": "Optimizing for Different Task Types",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "real-world-example-web-scraper",
        "title": "Real-world Example: Web Scraper",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 164
      }
    ],
    "totalWordCount": 1283,
    "estimatedReadingTime": 360000,
    "title": "understanding_cpu_bound_vs_io_bound_tasks",
    "frontmatter": {}
  },
  "public\\content\\python\\concurrent_and_parallel_programming\\thread_synchronization_primitives.md": {
    "path": "public\\content\\python\\concurrent_and_parallel_programming\\thread_synchronization_primitives.md",
    "sections": [
      {
        "id": "python-thread-synchronization-primitives-from-first-principles",
        "title": "Python Thread Synchronization Primitives from First Principles",
        "level": 1,
        "wordCount": 42
      },
      {
        "id": "what-is-a-thread",
        "title": "What is a Thread?",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "the-need-for-synchronization",
        "title": "The Need for Synchronization",
        "level": 2,
        "wordCount": 145
      },
      {
        "id": "pythons-synchronization-primitives",
        "title": "Python's Synchronization Primitives",
        "level": 2,
        "wordCount": 614
      },
      {
        "id": "advanced-example-thread-safe-data-structure",
        "title": "Advanced Example: Thread-Safe Data Structure",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "common-pitfalls-in-thread-synchronization",
        "title": "Common Pitfalls in Thread Synchronization",
        "level": 2,
        "wordCount": 208
      },
      {
        "id": "best-practices-for-thread-synchronization-in-python",
        "title": "Best Practices for Thread Synchronization in Python",
        "level": 2,
        "wordCount": 143
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 160
      }
    ],
    "totalWordCount": 1464,
    "estimatedReadingTime": 360000,
    "title": "thread_synchronization_primitives",
    "frontmatter": {}
  },
  "public\\content\\python\\concurrent_and_parallel_programming\\thread_and_process_safety.md": {
    "path": "public\\content\\python\\concurrent_and_parallel_programming\\thread_and_process_safety.md",
    "sections": [
      {
        "id": "thread-and-process-safety-in-python-from-first-principles",
        "title": "Thread and Process Safety in Python: From First Principles",
        "level": 1,
        "wordCount": 31
      },
      {
        "id": "1-what-are-threads-and-processes",
        "title": "1. What Are Threads and Processes?",
        "level": 2,
        "wordCount": 160
      },
      {
        "id": "2-concurrency-problems-why-safety-matters",
        "title": "2. Concurrency Problems: Why Safety Matters",
        "level": 2,
        "wordCount": 184
      },
      {
        "id": "3-the-global-interpreter-lock-gil",
        "title": "3. The Global Interpreter Lock (GIL)",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "4-thread-safety",
        "title": "4. Thread Safety",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "5-synchronization-mechanisms",
        "title": "5. Synchronization Mechanisms",
        "level": 2,
        "wordCount": 184
      },
      {
        "id": "6-thread-local-storage",
        "title": "6. Thread-Local Storage",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "7-process-safety",
        "title": "7. Process Safety",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "8-thread-vs-process-choosing-the-right-tool",
        "title": "8. Thread vs Process: Choosing the Right Tool",
        "level": 2,
        "wordCount": 147
      },
      {
        "id": "9-common-pitfalls-and-best-practices",
        "title": "9. Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 143
      },
      {
        "id": "10-modern-alternatives-to-threads-and-processes",
        "title": "10. Modern Alternatives to Threads and Processes",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 116
      }
    ],
    "totalWordCount": 1408,
    "estimatedReadingTime": 360000,
    "title": "thread_and_process_safety",
    "frontmatter": {}
  },
  "public\\content\\python\\concurrent_and_parallel_programming\\threading_and_the_global_interpreter_lock.md": {
    "path": "public\\content\\python\\concurrent_and_parallel_programming\\threading_and_the_global_interpreter_lock.md",
    "sections": [
      {
        "id": "python-threading-and-the-global-interpreter-lock-gil-a-first-principles-explanation",
        "title": "Python Threading and the Global Interpreter Lock (GIL): A First Principles Explanation",
        "level": 1,
        "wordCount": 37
      },
      {
        "id": "1-what-is-a-process",
        "title": "1. What is a Process?",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "2-what-is-a-thread",
        "title": "2. What is a Thread?",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "3-concurrency-vs-parallelism",
        "title": "3. Concurrency vs. Parallelism",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "4-pythons-threading-module",
        "title": "4. Python's Threading Module",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "5-enter-the-global-interpreter-lock-gil",
        "title": "5. Enter the Global Interpreter Lock (GIL)",
        "level": 2,
        "wordCount": 250
      },
      {
        "id": "6-when-threading-works-well-despite-the-gil",
        "title": "6. When Threading Works Well Despite the GIL",
        "level": 2,
        "wordCount": 163
      },
      {
        "id": "7-alternatives-to-threading-multiprocessing",
        "title": "7. Alternatives to Threading: Multiprocessing",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "8-thread-safety-and-common-pitfalls",
        "title": "8. Thread Safety and Common Pitfalls",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "9-other-threading-features-in-python",
        "title": "9. Other Threading Features in Python",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "10-the-future-of-the-gil",
        "title": "10. The Future of the GIL",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 147
      }
    ],
    "totalWordCount": 1313,
    "estimatedReadingTime": 360000,
    "title": "threading_and_the_global_interpreter_lock",
    "frontmatter": {}
  },
  "public\\content\\python\\concurrent_and_parallel_programming\\task_scheduling_and_cancellation.md": {
    "path": "public\\content\\python\\concurrent_and_parallel_programming\\task_scheduling_and_cancellation.md",
    "sections": [
      {
        "id": "python-task-scheduling-and-cancellation-from-first-principles",
        "title": "Python Task Scheduling and Cancellation: From First Principles",
        "level": 1,
        "wordCount": 44
      },
      {
        "id": "1-what-is-a-task",
        "title": "1. What is a Task?",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "2-why-schedule-tasks",
        "title": "2. Why Schedule Tasks?",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "3-basic-task-scheduling-in-python",
        "title": "3. Basic Task Scheduling in Python",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "4-asynchronous-task-scheduling-with-asyncio",
        "title": "4. Asynchronous Task Scheduling with `asyncio`",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "5-task-cancellation",
        "title": "5. Task Cancellation",
        "level": 2,
        "wordCount": 129
      },
      {
        "id": "6-real-world-examples",
        "title": "6. Real-world Examples",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "7-advanced-concepts",
        "title": "7. Advanced Concepts",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "8-production-ready-task-management",
        "title": "8. Production-Ready Task Management",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "9-handling-task-dependencies",
        "title": "9. Handling Task Dependencies",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "10-best-practices-and-common-pitfalls",
        "title": "10. Best Practices and Common Pitfalls",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 120
      }
    ],
    "totalWordCount": 1057,
    "estimatedReadingTime": 300000,
    "title": "task_scheduling_and_cancellation",
    "frontmatter": {}
  },
  "public\\content\\python\\concurrent_and_parallel_programming\\synchronization_in_async_code.md": {
    "path": "public\\content\\python\\concurrent_and_parallel_programming\\synchronization_in_async_code.md",
    "sections": [
      {
        "id": "python-synchronization-in-async-code-from-first-principles",
        "title": "Python Synchronization in Async Code: From First Principles",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "understanding-the-problem-why-synchronization-matters",
        "title": "Understanding the Problem: Why Synchronization Matters",
        "level": 2,
        "wordCount": 167
      },
      {
        "id": "synchronization-primitives-in-pythons-asyncio",
        "title": "Synchronization Primitives in Python's Asyncio",
        "level": 2,
        "wordCount": 269
      },
      {
        "id": "barriers-and-bounded-queues",
        "title": "Barriers and Bounded Queues",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "real-world-patterns",
        "title": "Real-World Patterns",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "advanced-concepts",
        "title": "Advanced Concepts",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "common-pitfalls-and-solutions",
        "title": "Common Pitfalls and Solutions",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 105
      }
    ],
    "totalWordCount": 920,
    "estimatedReadingTime": 240000,
    "title": "synchronization_in_async_code",
    "frontmatter": {}
  },
  "public\\content\\python\\concurrent_and_parallel_programming\\shared_memory_management.md": {
    "path": "public\\content\\python\\concurrent_and_parallel_programming\\shared_memory_management.md",
    "sections": [
      {
        "id": "python-shared-memory-management-understanding-from-first-principles",
        "title": "Python Shared Memory Management: Understanding from First Principles",
        "level": 1,
        "wordCount": 51
      },
      {
        "id": "what-is-memory-in-computing",
        "title": "What Is Memory in Computing?",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "the-concept-of-shared-memory",
        "title": "The Concept of Shared Memory",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "pythons-memory-model",
        "title": "Python's Memory Model",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "1-the-multiprocessingshared_memory-module",
        "title": "1. The `multiprocessing.shared_memory` Module",
        "level": 2,
        "wordCount": 143
      },
      {
        "id": "2-multiprocessingvalue-and-multiprocessingarray",
        "title": "2. `multiprocessing.Value` and `multiprocessing.Array`",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "3-memory-mapped-files-mmap",
        "title": "3. Memory-Mapped Files (`mmap`)",
        "level": 2,
        "wordCount": 138
      },
      {
        "id": "4-atomic-operations-and-synchronization",
        "title": "4. Atomic Operations and Synchronization",
        "level": 2,
        "wordCount": 137
      },
      {
        "id": "5-practical-example-image-processing-with-shared-memory",
        "title": "5. Practical Example: Image Processing with Shared Memory",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "6-common-challenges-and-solutions",
        "title": "6. Common Challenges and Solutions",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "7-advanced-pattern-producer-consumer-with-shared-memory",
        "title": "7. Advanced Pattern: Producer-Consumer with Shared Memory",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "8-performance-comparison",
        "title": "8. Performance Comparison",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 130
      }
    ],
    "totalWordCount": 1257,
    "estimatedReadingTime": 360000,
    "title": "shared_memory_management",
    "frontmatter": {}
  },
  "public\\content\\python\\concurrent_and_parallel_programming\\race_conditions_and_deadlock_prevention.md": {
    "path": "public\\content\\python\\concurrent_and_parallel_programming\\race_conditions_and_deadlock_prevention.md",
    "sections": [
      {
        "id": "race-conditions-and-deadlock-prevention-in-python",
        "title": "Race Conditions and Deadlock Prevention in Python",
        "level": 1,
        "wordCount": 30
      },
      {
        "id": "understanding-race-conditions",
        "title": "Understanding Race Conditions",
        "level": 2,
        "wordCount": 306
      },
      {
        "id": "preventing-race-conditions-in-python",
        "title": "Preventing Race Conditions in Python",
        "level": 2,
        "wordCount": 271
      },
      {
        "id": "understanding-deadlocks",
        "title": "Understanding Deadlocks",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "deadlock-prevention-techniques",
        "title": "Deadlock Prevention Techniques",
        "level": 2,
        "wordCount": 242
      },
      {
        "id": "best-practices-to-avoid-race-conditions-and-deadlocks",
        "title": "Best Practices to Avoid Race Conditions and Deadlocks",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 130
      }
    ],
    "totalWordCount": 1218,
    "estimatedReadingTime": 300000,
    "title": "race_conditions_and_deadlock_prevention",
    "frontmatter": {}
  },
  "public\\content\\python\\concurrent_and_parallel_programming\\parallel_processing_libraries.md": {
    "path": "public\\content\\python\\concurrent_and_parallel_programming\\parallel_processing_libraries.md",
    "sections": [
      {
        "id": "python-parallel-processing-understanding-dask-and-joblib-from-first-principles",
        "title": "Python Parallel Processing: Understanding Dask and Joblib From First Principles",
        "level": 1,
        "wordCount": 89
      },
      {
        "id": "why-parallel-processing",
        "title": "Why Parallel Processing?",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "fundamental-concepts",
        "title": "Fundamental Concepts",
        "level": 2,
        "wordCount": 146
      },
      {
        "id": "joblib",
        "title": "Joblib",
        "level": 2,
        "wordCount": 182
      },
      {
        "id": "dask",
        "title": "Dask",
        "level": 2,
        "wordCount": 238
      },
      {
        "id": "practical-comparison-joblib-vs-dask",
        "title": "Practical Comparison: Joblib vs Dask",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "when-to-use-each-library",
        "title": "When to Use Each Library",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "common-patterns-and-best-practices",
        "title": "Common Patterns and Best Practices",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "from-first-principles-building-a-simple-parallel-framework",
        "title": "From First Principles: Building a Simple Parallel Framework",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "real-world-applications",
        "title": "Real-World Applications",
        "level": 2,
        "wordCount": 10
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 136
      }
    ],
    "totalWordCount": 1162,
    "estimatedReadingTime": 300000,
    "title": "parallel_processing_libraries",
    "frontmatter": {}
  },
  "public\\content\\python\\concurrent_and_parallel_programming\\multiprocessing_and_process_pools.md": {
    "path": "public\\content\\python\\concurrent_and_parallel_programming\\multiprocessing_and_process_pools.md",
    "sections": [
      {
        "id": "python-multiprocessing-and-process-pools-a-first-principles-approach",
        "title": "Python Multiprocessing and Process Pools: A First Principles Approach",
        "level": 1,
        "wordCount": 30
      },
      {
        "id": "1-the-problem-sequential-processing-limitations",
        "title": "1. The Problem: Sequential Processing Limitations",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "2-the-concept-parallel-processing",
        "title": "2. The Concept: Parallel Processing",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "3-pythons-challenge-the-global-interpreter-lock-gil",
        "title": "3. Python's Challenge: The Global Interpreter Lock (GIL)",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "4-enter-multiprocessing-bypassing-the-gil",
        "title": "4. Enter Multiprocessing: Bypassing the GIL",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "5-understanding-process-creation",
        "title": "5. Understanding Process Creation",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "6-introducing-process-pools",
        "title": "6. Introducing Process Pools",
        "level": 2,
        "wordCount": 134
      },
      {
        "id": "7-process-pool-methods-in-detail",
        "title": "7. Process Pool Methods in Detail",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "8-understanding-process-communication",
        "title": "8. Understanding Process Communication",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "9-process-pool-best-practices",
        "title": "9. Process Pool Best Practices",
        "level": 2,
        "wordCount": 119
      },
      {
        "id": "10-a-complete-example-parallel-image-processing",
        "title": "10. A Complete Example: Parallel Image Processing",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "11-common-challenges-and-solutions",
        "title": "11. Common Challenges and Solutions",
        "level": 2,
        "wordCount": 119
      },
      {
        "id": "12-when-not-to-use-multiprocessing",
        "title": "12. When Not to Use Multiprocessing",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 98
      }
    ],
    "totalWordCount": 1267,
    "estimatedReadingTime": 360000,
    "title": "multiprocessing_and_process_pools",
    "frontmatter": {}
  },
  "public\\content\\python\\concurrent_and_parallel_programming\\Inter-process communication.md": {
    "path": "public\\content\\python\\concurrent_and_parallel_programming\\Inter-process communication.md",
    "sections": [
      {
        "id": "python-inter-process-communication-ipc-from-first-principles",
        "title": "Python Inter-process Communication (IPC): From First Principles",
        "level": 1,
        "wordCount": 35
      },
      {
        "id": "what-is-a-process",
        "title": "What is a Process?",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "why-do-we-need-ipc",
        "title": "Why Do We Need IPC?",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "core-ipc-mechanisms-in-python",
        "title": "Core IPC Mechanisms in Python",
        "level": 2,
        "wordCount": 288
      },
      {
        "id": "advanced-ipc-concepts",
        "title": "Advanced IPC Concepts",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "real-world-applications",
        "title": "Real-world Applications",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 113
      }
    ],
    "totalWordCount": 816,
    "estimatedReadingTime": 240000,
    "title": "Inter-process communication",
    "frontmatter": {}
  },
  "public\\content\\python\\concurrent_and_parallel_programming\\concurrent_futures_framework.md": {
    "path": "public\\content\\python\\concurrent_and_parallel_programming\\concurrent_futures_framework.md",
    "sections": [
      {
        "id": "pythons-concurrentfutures-framework-building-from-first-principles",
        "title": "Python's `concurrent.futures` Framework: Building from First Principles",
        "level": 1,
        "wordCount": 25
      },
      {
        "id": "1-the-problem-sequential-processing",
        "title": "1. The Problem: Sequential Processing",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "2-the-concept-concurrency-vs-parallelism",
        "title": "2. The Concept: Concurrency vs. Parallelism",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "3-pythons-concurrency-challenges",
        "title": "3. Python's Concurrency Challenges",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "4-enter-concurrentfutures",
        "title": "4. Enter `concurrent.futures`",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "5-core-components-of-concurrentfutures",
        "title": "5. Core Components of `concurrent.futures`",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "6-basic-usage-examples",
        "title": "6. Basic Usage Examples",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "7-advanced-features-and-patterns",
        "title": "7. Advanced Features and Patterns",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "8-context-managers-and-resource-management",
        "title": "8. Context Managers and Resource Management",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "9-choosing-between-thread-and-process-executors",
        "title": "9. Choosing Between Thread and Process Executors",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "10-real-world-example-web-scraping",
        "title": "10. Real-world Example: Web Scraping",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "11-the-concurrentfutures-module-vs-other-concurrency-models",
        "title": "11. The `concurrent.futures` Module vs. Other Concurrency Models",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "12-limitations-and-considerations",
        "title": "12. Limitations and Considerations",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 121
      }
    ],
    "totalWordCount": 1108,
    "estimatedReadingTime": 300000,
    "title": "concurrent_futures_framework",
    "frontmatter": {}
  },
  "public\\content\\python\\concurrent_and_parallel_programming\\async_await_syntax_and_patterns.md": {
    "path": "public\\content\\python\\concurrent_and_parallel_programming\\async_await_syntax_and_patterns.md",
    "sections": [
      {
        "id": "understanding-pythons-asyncawait-from-first-principles",
        "title": "Understanding Python's Async/Await from First Principles",
        "level": 1,
        "wordCount": 29
      },
      {
        "id": "1-the-synchronous-world-problem",
        "title": "1. The Synchronous World Problem",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "2-concurrency-vs-parallelism",
        "title": "2. Concurrency vs Parallelism",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "3-the-event-loop-the-heart-of-async",
        "title": "3. The Event Loop: The Heart of Async",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "4-coroutines-the-building-blocks",
        "title": "4. Coroutines: The Building Blocks",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "5-the-await-keyword-yielding-control",
        "title": "5. The await Keyword: Yielding Control",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "6-awaitables-what-can-be-awaited",
        "title": "6. Awaitables: What Can Be Awaited?",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "7-running-multiple-tasks-concurrently",
        "title": "7. Running Multiple Tasks Concurrently",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "8-a-more-practical-example-fetching-multiple-urls",
        "title": "8. A More Practical Example: Fetching Multiple URLs",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "9-error-handling-in-async-code",
        "title": "9. Error Handling in Async Code",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "10-advanced-patterns-timeouts-and-cancellation",
        "title": "10. Advanced Patterns: Timeouts and Cancellation",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "11-context-managers-with-async",
        "title": "11. Context Managers with Async",
        "level": 2,
        "wordCount": 13
      },
      {
        "id": "12-iteration-with-async",
        "title": "12. Iteration with Async",
        "level": 2,
        "wordCount": 10
      },
      {
        "id": "13-common-async-patterns",
        "title": "13. Common Async Patterns",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "14-best-practices-and-common-pitfalls",
        "title": "14. Best Practices and Common Pitfalls",
        "level": 2,
        "wordCount": 173
      },
      {
        "id": "15-practical-example-async-web-scraper",
        "title": "15. Practical Example: Async Web Scraper",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 182
      }
    ],
    "totalWordCount": 1089,
    "estimatedReadingTime": 300000,
    "title": "async_await_syntax_and_patterns",
    "frontmatter": {}
  },
  "public\\content\\python\\concurrent_and_parallel_programming\\asyncio_framework_and_event_loops.md": {
    "path": "public\\content\\python\\concurrent_and_parallel_programming\\asyncio_framework_and_event_loops.md",
    "sections": [
      {
        "id": "understanding-asyncio-and-event-loops-in-python-from-first-principles",
        "title": "Understanding Asyncio and Event Loops in Python from First Principles",
        "level": 1,
        "wordCount": 40
      },
      {
        "id": "1-the-problem-blocking-operations",
        "title": "1. The Problem: Blocking Operations",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "2-concurrency-vs-parallelism",
        "title": "2. Concurrency vs. Parallelism",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "3-the-fundamental-concept-coroutines",
        "title": "3. The Fundamental Concept: Coroutines",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "4-the-event-loop-the-conductor-of-asyncio",
        "title": "4. The Event Loop: The Conductor of Asyncio",
        "level": 2,
        "wordCount": 150
      },
      {
        "id": "5-understanding-await",
        "title": "5. Understanding `await`",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "6-the-flow-of-control-in-asyncio-programs",
        "title": "6. The Flow of Control in Asyncio Programs",
        "level": 2,
        "wordCount": 150
      },
      {
        "id": "7-awaitable-objects",
        "title": "7. Awaitable Objects",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "8-event-loop-in-depth",
        "title": "8. Event Loop in Depth",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "9-asyncios-io-operations",
        "title": "9. Asyncio's I/O Operations",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "10-practical-example-web-scraper",
        "title": "10. Practical Example: Web Scraper",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "11-error-handling-in-asyncio",
        "title": "11. Error Handling in Asyncio",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "12-advanced-patterns-cancellation-and-timeouts",
        "title": "12. Advanced Patterns: Cancellation and Timeouts",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "13-context-variables-managing-context-in-asyncio",
        "title": "13. Context Variables: Managing Context in Asyncio",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "14-building-an-event-loop-from-scratch-conceptual",
        "title": "14. Building an Event Loop from Scratch (Conceptual)",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "15-real-world-asyncio-web-server-example",
        "title": "15. Real-World Asyncio: Web Server Example",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "16-beyond-the-basics-asyncio-and-cpu-bound-tasks",
        "title": "16. Beyond the Basics: Asyncio and CPU-Bound Tasks",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "summary-understanding-asyncio-from-first-principles",
        "title": "Summary: Understanding Asyncio from First Principles",
        "level": 2,
        "wordCount": 196
      }
    ],
    "totalWordCount": 1361,
    "estimatedReadingTime": 360000,
    "title": "asyncio_framework_and_event_loops",
    "frontmatter": {}
  },
  "public\\content\\python\\concurrent_and_parallel_programming\\asyncio_event_loop.md": {
    "path": "public\\content\\python\\concurrent_and_parallel_programming\\asyncio_event_loop.md",
    "sections": [
      {
        "id": "python-asyncio-event-loop-understanding-the-internal-workings-from-first-principles",
        "title": "Python Asyncio Event Loop: Understanding the Internal Workings from First Principles",
        "level": 1,
        "wordCount": 11
      },
      {
        "id": "1-the-foundation-understanding-concurrency",
        "title": "1. The Foundation: Understanding Concurrency",
        "level": 2,
        "wordCount": 137
      },
      {
        "id": "2-the-problem-asyncio-solves-blocking-operations",
        "title": "2. The Problem Asyncio Solves: Blocking Operations",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "3-event-driven-programming-the-mental-model",
        "title": "3. Event-Driven Programming: The Mental Model",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "4-asyncio-core-components",
        "title": "4. Asyncio Core Components",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "5-event-loop-the-heart-of-asyncio",
        "title": "5. Event Loop: The Heart of Asyncio",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "6-coroutines-functions-that-can-pause",
        "title": "6. Coroutines: Functions That Can Pause",
        "level": 2,
        "wordCount": 138
      },
      {
        "id": "7-event-loop-implementation-the-selector",
        "title": "7. Event Loop Implementation: The Selector",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "8-tasks-and-futures-managing-asynchronous-results",
        "title": "8. Tasks and Futures: Managing Asynchronous Results",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "9-practical-example-understanding-the-flow",
        "title": "9. Practical Example: Understanding the Flow",
        "level": 2,
        "wordCount": 180
      },
      {
        "id": "10-the-event-loop-life-cycle",
        "title": "10. The Event Loop Life Cycle",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "11-low-level-event-loop-implementation",
        "title": "11. Low-Level Event Loop Implementation",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "12-thread-safety-and-concurrency-considerations",
        "title": "12. Thread Safety and Concurrency Considerations",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "13-debugging-the-event-loop",
        "title": "13. Debugging the Event Loop",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "14-event-loop-customization",
        "title": "14. Event Loop Customization",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "15-conclusion-putting-it-all-together",
        "title": "15. Conclusion: Putting It All Together",
        "level": 2,
        "wordCount": 165
      }
    ],
    "totalWordCount": 1665,
    "estimatedReadingTime": 420000,
    "title": "asyncio_event_loop",
    "frontmatter": {}
  },
  "public\\content\\python\\concurrent_and_parallel_programming\\asynchronous_context_managers_and_generators.md": {
    "path": "public\\content\\python\\concurrent_and_parallel_programming\\asynchronous_context_managers_and_generators.md",
    "sections": [
      {
        "id": "asynchronous-context-managers-and-generators-in-python-from-first-principles",
        "title": "Asynchronous Context Managers and Generators in Python: From First Principles",
        "level": 1,
        "wordCount": 50
      },
      {
        "id": "1-understanding-synchronous-context-managers",
        "title": "1. Understanding Synchronous Context Managers",
        "level": 2,
        "wordCount": 177
      },
      {
        "id": "2-understanding-synchronous-generators",
        "title": "2. Understanding Synchronous Generators",
        "level": 2,
        "wordCount": 149
      },
      {
        "id": "3-introduction-to-asynchronous-programming",
        "title": "3. Introduction to Asynchronous Programming",
        "level": 2,
        "wordCount": 119
      },
      {
        "id": "4-asynchronous-context-managers",
        "title": "4. Asynchronous Context Managers",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "5-asynchronous-generators",
        "title": "5. Asynchronous Generators",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "6-asynchronous-context-manager-generators",
        "title": "6. Asynchronous Context Manager Generators",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "7-advanced-features-and-patterns",
        "title": "7. Advanced Features and Patterns",
        "level": 2,
        "wordCount": 147
      },
      {
        "id": "8-best-practices-and-common-pitfalls",
        "title": "8. Best Practices and Common Pitfalls",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "9-real-world-application-web-scraper-with-rate-limiting",
        "title": "9. Real-world Application: Web Scraper with Rate Limiting",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "10-conclusion",
        "title": "10. Conclusion",
        "level": 2,
        "wordCount": 150
      }
    ],
    "totalWordCount": 1369,
    "estimatedReadingTime": 360000,
    "title": "asynchronous_context_managers_and_generators",
    "frontmatter": {}
  },
  "public\\content\\javascript\\closures\\introduction_to_closures.md": {
    "path": "public\\content\\javascript\\closures\\introduction_to_closures.md",
    "sections": [
      {
        "id": "javascript-closures-from-first-principles",
        "title": "JavaScript Closures: From First Principles",
        "level": 1,
        "wordCount": 17
      },
      {
        "id": "memory-and-scope-the-foundation",
        "title": "Memory and Scope: The Foundation",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "nested-functions-creating-the-environment-for-closures",
        "title": "Nested Functions: Creating the Environment for Closures",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "what-is-a-closure-precisely",
        "title": "What Is a Closure, Precisely?",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "practical-examples-of-closures",
        "title": "Practical Examples of Closures",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "the-mechanics-whats-happening-under-the-hood",
        "title": "The Mechanics: What's Happening Under the Hood",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "common-closure-gotchas",
        "title": "Common Closure Gotchas",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "closures-in-real-world-applications",
        "title": "Closures in Real-World Applications",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 58
      }
    ],
    "totalWordCount": 684,
    "estimatedReadingTime": 180000,
    "title": "introduction_to_closures",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_primitives\\when_to_use_channels_vs_mutexes.md": {
    "path": "public\\content\\go\\synchronization_primitives\\when_to_use_channels_vs_mutexes.md",
    "sections": [
      {
        "id": "go-concurrency-channels-vs-mutexes-from-first-principles",
        "title": "Go Concurrency: Channels vs. Mutexes from First Principles",
        "level": 1,
        "wordCount": 35
      },
      {
        "id": "1-understanding-concurrency-problems",
        "title": "1. Understanding Concurrency Problems",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "2-mutexes-the-lock-based-approach",
        "title": "2. Mutexes: The Lock-Based Approach",
        "level": 2,
        "wordCount": 137
      },
      {
        "id": "3-channels-the-message-passing-approach",
        "title": "3. Channels: The Message-Passing Approach",
        "level": 2,
        "wordCount": 180
      },
      {
        "id": "4-when-to-use-mutexes-vs-channels",
        "title": "4. When to Use Mutexes vs. Channels",
        "level": 2,
        "wordCount": 161
      },
      {
        "id": "5-decision-framework-choosing-between-channels-and-mutexes",
        "title": "5. Decision Framework: Choosing Between Channels and Mutexes",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "6-best-practices-for-each-approach",
        "title": "6. Best Practices for Each Approach",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "7-common-patterns-using-channels",
        "title": "7. Common Patterns Using Channels",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "8-using-both-together-hybrid-approaches",
        "title": "8. Using Both Together: Hybrid Approaches",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "9-performance-considerations",
        "title": "9. Performance Considerations",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 122
      }
    ],
    "totalWordCount": 1132,
    "estimatedReadingTime": 300000,
    "title": "when_to_use_channels_vs_mutexes",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_primitives\\wait_group_for_goroutine_coordination.md": {
    "path": "public\\content\\go\\synchronization_primitives\\wait_group_for_goroutine_coordination.md",
    "sections": [
      {
        "id": "understanding-waitgroups-in-go-from-first-principles",
        "title": "Understanding WaitGroups in Go from First Principles",
        "level": 1,
        "wordCount": 31
      },
      {
        "id": "the-fundamental-problem-concurrent-execution",
        "title": "The Fundamental Problem: Concurrent Execution",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "the-need-for-coordination",
        "title": "The Need for Coordination",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "waitgroup-the-conceptual-model",
        "title": "WaitGroup: The Conceptual Model",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "using-waitgroup-the-three-essential-methods",
        "title": "Using WaitGroup: The Three Essential Methods",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "the-mechanics-behind-waitgroup",
        "title": "The Mechanics Behind WaitGroup",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "multiple-goroutines-example",
        "title": "Multiple Goroutines Example",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "common-patterns-and-best-practices",
        "title": "Common Patterns and Best Practices",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "dynamic-worker-management",
        "title": "Dynamic Worker Management",
        "level": 2,
        "wordCount": 23
      },
      {
        "id": "error-handling-with-waitgroups",
        "title": "Error Handling with WaitGroups",
        "level": 2,
        "wordCount": 22
      },
      {
        "id": "waitgroup-vs-other-synchronization-primitives",
        "title": "WaitGroup vs Other Synchronization Primitives",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "real-world-example-web-scraper",
        "title": "Real-World Example: Web Scraper",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "common-mistakes-to-avoid",
        "title": "Common Mistakes to Avoid",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "advanced-considerations",
        "title": "Advanced Considerations",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 117
      }
    ],
    "totalWordCount": 959,
    "estimatedReadingTime": 240000,
    "title": "wait_group_for_goroutine_coordination",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_primitives\\using_sync_pool_for_object_reuse.md": {
    "path": "public\\content\\go\\synchronization_primitives\\using_sync_pool_for_object_reuse.md",
    "sections": [
      {
        "id": "understanding-golangs-syncpool-from-first-principles",
        "title": "Understanding Golang's sync.Pool from First Principles",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "the-problem-memory-allocation-overhead",
        "title": "The Problem: Memory Allocation Overhead",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "the-solution-object-reuse",
        "title": "The Solution: Object Reuse",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "understanding-syncpool-core-concepts",
        "title": "Understanding sync.Pool: Core Concepts",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "how-syncpool-works-internally",
        "title": "How sync.Pool Works Internally",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "basic-usage-pattern",
        "title": "Basic Usage Pattern",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "a-real-world-example-http-request-processing",
        "title": "A Real-World Example: HTTP Request Processing",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "type-safety-and-syncpool",
        "title": "Type Safety and sync.Pool",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "a-more-complex-example-streaming-json-parser",
        "title": "A More Complex Example: Streaming JSON Parser",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "performance-considerations-and-benchmarking",
        "title": "Performance Considerations and Benchmarking",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "when-to-use-syncpool",
        "title": "When to Use sync.Pool",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 98
      }
    ],
    "totalWordCount": 1075,
    "estimatedReadingTime": 300000,
    "title": "using_sync_pool_for_object_reuse",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_primitives\\understanding_lock_contention_issues.md": {
    "path": "public\\content\\go\\synchronization_primitives\\understanding_lock_contention_issues.md",
    "sections": [
      {
        "id": "understanding-lock-contention-issues-in-go-from-first-principles",
        "title": "Understanding Lock Contention Issues in Go from First Principles",
        "level": 1,
        "wordCount": 56
      },
      {
        "id": "1-foundations-of-concurrency",
        "title": "1. Foundations of Concurrency",
        "level": 2,
        "wordCount": 159
      },
      {
        "id": "2-mutual-exclusion-and-locks",
        "title": "2. Mutual Exclusion and Locks",
        "level": 2,
        "wordCount": 139
      },
      {
        "id": "3-understanding-lock-contention",
        "title": "3. Understanding Lock Contention",
        "level": 2,
        "wordCount": 153
      },
      {
        "id": "4-detecting-lock-contention",
        "title": "4. Detecting Lock Contention",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "5-strategies-to-reduce-lock-contention",
        "title": "5. Strategies to Reduce Lock Contention",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "6-real-world-example-a-web-cache-with-lock-contention",
        "title": "6. Real-World Example: A Web Cache with Lock Contention",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "7-advanced-lock-contention-patterns-and-solutions",
        "title": "7. Advanced Lock Contention Patterns and Solutions",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "8-summary-and-best-practices",
        "title": "8. Summary and Best Practices",
        "level": 2,
        "wordCount": 201
      }
    ],
    "totalWordCount": 1074,
    "estimatedReadingTime": 300000,
    "title": "understanding_lock_contention_issues",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_primitives\\once_for_one_time_initialization.md": {
    "path": "public\\content\\go\\synchronization_primitives\\once_for_one_time_initialization.md",
    "sections": [
      {
        "id": "understanding-synconce-in-go-one-time-initialization",
        "title": "Understanding `sync.Once` in Go: One-Time Initialization",
        "level": 1,
        "wordCount": 33
      },
      {
        "id": "the-problem-one-time-initialization",
        "title": "The Problem: One-Time Initialization",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "enter-synconce",
        "title": "Enter `sync.Once`",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "how-synconce-works-internally",
        "title": "How `sync.Once` Works Internally",
        "level": 2,
        "wordCount": 126
      },
      {
        "id": "using-synconce-properly",
        "title": "Using `sync.Once` Properly",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "important-properties-of-synconce",
        "title": "Important Properties of `sync.Once`",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "common-patterns-and-examples",
        "title": "Common Patterns and Examples",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "common-pitfalls-and-considerations",
        "title": "Common Pitfalls and Considerations",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "best-practices-for-using-synconce",
        "title": "Best Practices for Using `sync.Once`",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "when-to-use-synconce-vs-alternatives",
        "title": "When to Use `sync.Once` vs. Alternatives",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 73
      }
    ],
    "totalWordCount": 813,
    "estimatedReadingTime": 240000,
    "title": "once_for_one_time_initialization",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_primitives\\mutex_and_rw_mutex_for_exclusive_access.md": {
    "path": "public\\content\\go\\synchronization_primitives\\mutex_and_rw_mutex_for_exclusive_access.md",
    "sections": [
      {
        "id": "understanding-mutex-and-rwmutex-in-go-from-first-principles",
        "title": "Understanding Mutex and RWMutex in Go from First Principles",
        "level": 1,
        "wordCount": 33
      },
      {
        "id": "the-problem-race-conditions",
        "title": "The Problem: Race Conditions",
        "level": 2,
        "wordCount": 190
      },
      {
        "id": "first-principles-the-need-for-mutual-exclusion",
        "title": "First Principles: The Need for Mutual Exclusion",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "enter-mutex-a-lock-mechanism",
        "title": "Enter Mutex: A Lock Mechanism",
        "level": 2,
        "wordCount": 146
      },
      {
        "id": "understanding-the-internal-mechanism",
        "title": "Understanding the Internal Mechanism",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "the-reader-writer-problem",
        "title": "The Reader-Writer Problem",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "understanding-rwmutex-from-first-principles",
        "title": "Understanding RWMutex from First Principles",
        "level": 2,
        "wordCount": 174
      },
      {
        "id": "rwmutex-internal-mechanism",
        "title": "RWMutex Internal Mechanism",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "real-world-example-a-concurrent-cache",
        "title": "Real-World Example: A Concurrent Cache",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "common-mistakes-and-best-practices",
        "title": "Common Mistakes and Best Practices",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "advanced-topic-mutex-vs-channels",
        "title": "Advanced Topic: Mutex vs. Channels",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "summary-mutex-vs-rwmutex",
        "title": "Summary: Mutex vs. RWMutex",
        "level": 2,
        "wordCount": 124
      }
    ],
    "totalWordCount": 1203,
    "estimatedReadingTime": 300000,
    "title": "mutex_and_rw_mutex_for_exclusive_access",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_primitives\\measuring_and_reducing_lock_contention.md": {
    "path": "public\\content\\go\\synchronization_primitives\\measuring_and_reducing_lock_contention.md",
    "sections": [
      {
        "id": "lock-contention-in-go-from-first-principles",
        "title": "Lock Contention in Go: From First Principles",
        "level": 1,
        "wordCount": 36
      },
      {
        "id": "what-is-concurrency",
        "title": "What is Concurrency?",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "shared-resources-and-race-conditions",
        "title": "Shared Resources and Race Conditions",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "what-are-locks",
        "title": "What Are Locks?",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "what-is-lock-contention",
        "title": "What is Lock Contention?",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "measuring-lock-contention-in-go",
        "title": "Measuring Lock Contention in Go",
        "level": 2,
        "wordCount": 150
      },
      {
        "id": "reducing-lock-contention-in-go",
        "title": "Reducing Lock Contention in Go",
        "level": 2,
        "wordCount": 277
      },
      {
        "id": "real-world-example-optimizing-a-web-server",
        "title": "Real-World Example: Optimizing a Web Server",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 111
      }
    ],
    "totalWordCount": 1088,
    "estimatedReadingTime": 300000,
    "title": "measuring_and_reducing_lock_contention",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_primitives\\efficient_concurrent_data_access_patterns.md": {
    "path": "public\\content\\go\\synchronization_primitives\\efficient_concurrent_data_access_patterns.md",
    "sections": [
      {
        "id": "efficient-concurrent-data-access-patterns-in-go",
        "title": "Efficient Concurrent Data Access Patterns in Go",
        "level": 1,
        "wordCount": 32
      },
      {
        "id": "understanding-concurrency-from-first-principles",
        "title": "Understanding Concurrency from First Principles",
        "level": 2,
        "wordCount": 235
      },
      {
        "id": "gos-concurrency-primitives",
        "title": "Go's Concurrency Primitives",
        "level": 2,
        "wordCount": 175
      },
      {
        "id": "efficient-concurrent-data-access-patterns",
        "title": "Efficient Concurrent Data Access Patterns",
        "level": 2,
        "wordCount": 408
      },
      {
        "id": "context-based-cancellation-pattern",
        "title": "Context-Based Cancellation Pattern",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "real-world-application-concurrent-cache",
        "title": "Real-World Application: Concurrent Cache",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "best-practices-for-concurrent-data-access-in-go",
        "title": "Best Practices for Concurrent Data Access in Go",
        "level": 2,
        "wordCount": 265
      }
    ],
    "totalWordCount": 1238,
    "estimatedReadingTime": 300000,
    "title": "efficient_concurrent_data_access_patterns",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_primitives\\cond_for_condition_variable_patterns.md": {
    "path": "public\\content\\go\\synchronization_primitives\\cond_for_condition_variable_patterns.md",
    "sections": [
      {
        "id": "understanding-gos-cond-condition-variable-from-first-principles",
        "title": "Understanding Go's Cond (Condition Variable) from First Principles",
        "level": 1,
        "wordCount": 31
      },
      {
        "id": "what-are-condition-variables",
        "title": "What Are Condition Variables?",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "the-fundamental-problem-coordinating-based-on-conditions",
        "title": "The Fundamental Problem: Coordinating Based on Conditions",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "building-understanding-from-mutexes",
        "title": "Building Understanding from Mutexes",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "condition-variables-the-core-concept",
        "title": "Condition Variables: The Core Concept",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "the-go-synccond-type",
        "title": "The Go sync.Cond Type",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "creating-a-condition-variable",
        "title": "Creating a Condition Variable",
        "level": 2,
        "wordCount": 27
      },
      {
        "id": "core-methods-of-synccond",
        "title": "Core Methods of sync.Cond",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "a-simple-example-producer-consumer-pattern",
        "title": "A Simple Example: Producer-Consumer Pattern",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "another-example-multiple-consumers",
        "title": "Another Example: Multiple Consumers",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "when-to-use-signal-vs-broadcast",
        "title": "When to Use Signal vs. Broadcast",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "common-pitfalls-with-condition-variables",
        "title": "Common Pitfalls with Condition Variables",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "a-real-world-example-bounded-buffer",
        "title": "A Real-World Example: Bounded Buffer",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "alternatives-to-condition-variables",
        "title": "Alternatives to Condition Variables",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 106
      }
    ],
    "totalWordCount": 1088,
    "estimatedReadingTime": 300000,
    "title": "cond_for_condition_variable_patterns",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_primitives\\atomic_operations_for_simple_synchronization.md": {
    "path": "public\\content\\go\\synchronization_primitives\\atomic_operations_for_simple_synchronization.md",
    "sections": [
      {
        "id": "golang-atomic-operations-for-simple-synchronization-from-first-principles",
        "title": "Golang Atomic Operations for Simple Synchronization: From First Principles",
        "level": 1,
        "wordCount": 48
      },
      {
        "id": "what-are-atomic-operations",
        "title": "What Are Atomic Operations?",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "race-conditions-the-problem-atomic-operations-solve",
        "title": "Race Conditions: The Problem Atomic Operations Solve",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "enter-the-syncatomic-package",
        "title": "Enter the `sync/atomic` Package",
        "level": 2,
        "wordCount": 231
      },
      {
        "id": "types-supported-by-atomic-operations",
        "title": "Types Supported by Atomic Operations",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "atomic-value-for-any-type",
        "title": "Atomic Value for Any Type",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "real-world-example-a-simple-flag",
        "title": "Real-World Example: A Simple Flag",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "when-to-use-atomic-operations-vs-mutexes",
        "title": "When to Use Atomic Operations vs. Mutexes",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "under-the-hood-how-atomic-operations-work",
        "title": "Under the Hood: How Atomic Operations Work",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "common-patterns-with-atomic-operations",
        "title": "Common Patterns with Atomic Operations",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 117
      }
    ],
    "totalWordCount": 962,
    "estimatedReadingTime": 240000,
    "title": "atomic_operations_for_simple_synchronization",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_performance\\wait_free_algorithms_in_go.md": {
    "path": "public\\content\\go\\synchronization_performance\\wait_free_algorithms_in_go.md",
    "sections": [
      {
        "id": "wait-free-algorithms-in-go-a-first-principles-approach",
        "title": "Wait-Free Algorithms in Go: A First Principles Approach",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "starting-with-the-basics-concurrency-models",
        "title": "Starting with the Basics: Concurrency Models",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "the-concurrency-coordination-problem",
        "title": "The Concurrency Coordination Problem",
        "level": 2,
        "wordCount": 132
      },
      {
        "id": "the-non-blocking-spectrum",
        "title": "The Non-blocking Spectrum",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "wait-free-algorithms-first-principles",
        "title": "Wait-Free Algorithms: First Principles",
        "level": 2,
        "wordCount": 132
      },
      {
        "id": "implementing-wait-free-algorithms-in-go",
        "title": "Implementing Wait-Free Algorithms in Go",
        "level": 2,
        "wordCount": 146
      },
      {
        "id": "advanced-wait-free-techniques",
        "title": "Advanced Wait-Free Techniques",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "practical-considerations-and-limitations",
        "title": "Practical Considerations and Limitations",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "testing-wait-free-algorithms",
        "title": "Testing Wait-Free Algorithms",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "real-world-wait-free-algorithms-in-go",
        "title": "Real-World Wait-Free Algorithms in Go",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 116
      }
    ],
    "totalWordCount": 1062,
    "estimatedReadingTime": 300000,
    "title": "wait_free_algorithms_in_go",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_performance\\scalability_limitations_in_synchronization.md": {
    "path": "public\\content\\go\\synchronization_performance\\scalability_limitations_in_synchronization.md",
    "sections": [
      {
        "id": "gos-scalability-limitations-in-synchronization-a-first-principles-approach",
        "title": "Go's Scalability Limitations in Synchronization: A First Principles Approach",
        "level": 1,
        "wordCount": 36
      },
      {
        "id": "1-what-is-synchronization",
        "title": "1. What is Synchronization?",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "2-gos-concurrency-model-the-foundation",
        "title": "2. Go's Concurrency Model: The Foundation",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "3-gos-traditional-synchronization-primitives",
        "title": "3. Go's Traditional Synchronization Primitives",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "4-scalability-limitations-first-signs",
        "title": "4. Scalability Limitations: First Signs",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "5-memory-ordering-and-visibility-issues",
        "title": "5. Memory Ordering and Visibility Issues",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "6-channels-an-alternative-approach",
        "title": "6. Channels: An Alternative Approach",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "7-deeper-scalability-limitations",
        "title": "7. Deeper Scalability Limitations",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "8-practical-examples-of-scalability-limitations",
        "title": "8. Practical Examples of Scalability Limitations",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "9-advanced-synchronization-approaches-and-their-limitations",
        "title": "9. Advanced Synchronization Approaches and Their Limitations",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "10-practical-solutions-and-workarounds",
        "title": "10. Practical Solutions and Workarounds",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 151
      }
    ],
    "totalWordCount": 1105,
    "estimatedReadingTime": 300000,
    "title": "scalability_limitations_in_synchronization",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_performance\\read_heavy_vs_write_heavy_optimizations.md": {
    "path": "public\\content\\go\\synchronization_performance\\read_heavy_vs_write_heavy_optimizations.md",
    "sections": [
      {
        "id": "go-golang-read-heavy-vs-write-heavy-optimizations",
        "title": "Go (Golang) Read-Heavy vs. Write-Heavy Optimizations",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "first-principles-understanding-io-operations",
        "title": "First Principles: Understanding I/O Operations",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "memory-access-patterns",
        "title": "Memory Access Patterns",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "read-heavy-optimizations-in-go",
        "title": "Read-Heavy Optimizations in Go",
        "level": 2,
        "wordCount": 219
      },
      {
        "id": "write-heavy-optimizations-in-go",
        "title": "Write-Heavy Optimizations in Go",
        "level": 2,
        "wordCount": 158
      },
      {
        "id": "real-world-example-building-a-key-value-store",
        "title": "Real-World Example: Building a Key-Value Store",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "key-differences-read-heavy-vs-write-heavy",
        "title": "Key Differences: Read-Heavy vs. Write-Heavy",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 107
      }
    ],
    "totalWordCount": 888,
    "estimatedReadingTime": 240000,
    "title": "read_heavy_vs_write_heavy_optimizations",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_performance\\memory_access_patterns_and_cache_effects.md": {
    "path": "public\\content\\go\\synchronization_performance\\memory_access_patterns_and_cache_effects.md",
    "sections": [
      {
        "id": "go-memory-access-patterns-and-cache-effects-from-first-principles",
        "title": "Go Memory Access Patterns and Cache Effects: From First Principles",
        "level": 1,
        "wordCount": 43
      },
      {
        "id": "1-the-memory-hierarchy",
        "title": "1. The Memory Hierarchy",
        "level": 2,
        "wordCount": 166
      },
      {
        "id": "2-cache-basics",
        "title": "2. Cache Basics",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "3-memory-layout-in-go",
        "title": "3. Memory Layout in Go",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "4-memory-access-patterns",
        "title": "4. Memory Access Patterns",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "5-arrays-vs-slices-vs-maps-in-go",
        "title": "5. Arrays vs Slices vs Maps in Go",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "6-struct-layout-and-padding",
        "title": "6. Struct Layout and Padding",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "7-cache-friendly-algorithm-design",
        "title": "7. Cache-Friendly Algorithm Design",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "8-false-sharing",
        "title": "8. False Sharing",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "9-memory-alignment-in-go",
        "title": "9. Memory Alignment in Go",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "10-prefetching",
        "title": "10. Prefetching",
        "level": 2,
        "wordCount": 23
      },
      {
        "id": "11-practical-tips-for-go-programs",
        "title": "11. Practical Tips for Go Programs",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "12-benchmarking-and-profiling",
        "title": "12. Benchmarking and Profiling",
        "level": 2,
        "wordCount": 12
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 115
      }
    ],
    "totalWordCount": 1104,
    "estimatedReadingTime": 300000,
    "title": "memory_access_patterns_and_cache_effects",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_performance\\lock_free_data_structures.md": {
    "path": "public\\content\\go\\synchronization_performance\\lock_free_data_structures.md",
    "sections": [
      {
        "id": "lock-free-data-structures-in-go-a-first-principles-exploration",
        "title": "Lock-Free Data Structures in Go: A First Principles Exploration",
        "level": 1,
        "wordCount": 31
      },
      {
        "id": "understanding-concurrency-fundamentals",
        "title": "Understanding Concurrency Fundamentals",
        "level": 2,
        "wordCount": 195
      },
      {
        "id": "the-concept-of-lock-free-data-structures",
        "title": "The Concept of Lock-Free Data Structures",
        "level": 2,
        "wordCount": 185
      },
      {
        "id": "lock-free-vs-wait-free-data-structures",
        "title": "Lock-Free vs. Wait-Free Data Structures",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "building-a-lock-free-stack",
        "title": "Building a Lock-Free Stack",
        "level": 2,
        "wordCount": 159
      },
      {
        "id": "the-aba-problem",
        "title": "The ABA Problem",
        "level": 2,
        "wordCount": 164
      },
      {
        "id": "a-practical-lock-free-queue-implementation",
        "title": "A Practical Lock-Free Queue Implementation",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "memory-management-the-reclamation-problem",
        "title": "Memory Management: The Reclamation Problem",
        "level": 2,
        "wordCount": 150
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "real-world-lock-free-structures-in-go",
        "title": "Real-World Lock-Free Structures in Go",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "when-to-use-lock-free-structures",
        "title": "When to Use Lock-Free Structures",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 128
      }
    ],
    "totalWordCount": 1475,
    "estimatedReadingTime": 360000,
    "title": "lock_free_data_structures",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_performance\\lock_contention_measurement.md": {
    "path": "public\\content\\go\\synchronization_performance\\lock_contention_measurement.md",
    "sections": [
      {
        "id": "understanding-lock-contention-measurement-in-go-from-first-principles",
        "title": "Understanding Lock Contention Measurement in Go from First Principles",
        "level": 1,
        "wordCount": 48
      },
      {
        "id": "what-is-a-lock",
        "title": "What is a Lock?",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "what-is-lock-contention",
        "title": "What is Lock Contention?",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "first-principles-of-lock-contention-measurement",
        "title": "First Principles of Lock Contention Measurement",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "built-in-go-tools-for-measuring-lock-contention",
        "title": "Built-in Go Tools for Measuring Lock Contention",
        "level": 2,
        "wordCount": 132
      },
      {
        "id": "creating-a-custom-lock-contention-measurement-tool",
        "title": "Creating a Custom Lock Contention Measurement Tool",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "using-gos-execution-tracer",
        "title": "Using Go's Execution Tracer",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "real-world-example-diagnosing-database-connection-pool-lock-contention",
        "title": "Real-world Example: Diagnosing Database Connection Pool Lock Contention",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "advanced-using-runtimereadmemstats-for-lock-debugging",
        "title": "Advanced: Using Runtime.ReadMemStats for Lock Debugging",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "third-party-tools-for-lock-contention-analysis",
        "title": "Third-party Tools for Lock Contention Analysis",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "interpreting-lock-contention-data",
        "title": "Interpreting Lock Contention Data",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "techniques-to-reduce-lock-contention",
        "title": "Techniques to Reduce Lock Contention",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 126
      }
    ],
    "totalWordCount": 1024,
    "estimatedReadingTime": 300000,
    "title": "lock_contention_measurement",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_performance\\hardware_considerations_for_synchronization.md": {
    "path": "public\\content\\go\\synchronization_performance\\hardware_considerations_for_synchronization.md",
    "sections": [
      {
        "id": "hardware-considerations-for-synchronization-in-go",
        "title": "Hardware Considerations for Synchronization in Go",
        "level": 1,
        "wordCount": 36
      },
      {
        "id": "first-principles-what-is-synchronization",
        "title": "First Principles: What is Synchronization?",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "memory-hierarchies-and-caches",
        "title": "Memory Hierarchies and Caches",
        "level": 2,
        "wordCount": 134
      },
      {
        "id": "memory-ordering-and-visibility",
        "title": "Memory Ordering and Visibility",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "hardware-memory-models",
        "title": "Hardware Memory Models",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "atomic-operations",
        "title": "Atomic Operations",
        "level": 2,
        "wordCount": 137
      },
      {
        "id": "memory-barriersfences",
        "title": "Memory Barriers/Fences",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "locks-and-hardware-support",
        "title": "Locks and Hardware Support",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "hardware-specific-optimizations",
        "title": "Hardware-Specific Optimizations",
        "level": 2,
        "wordCount": 129
      },
      {
        "id": "examples-of-hardware-considerations-in-gos-sync-primitives",
        "title": "Examples of Hardware Considerations in Go's Sync Primitives",
        "level": 2,
        "wordCount": 157
      },
      {
        "id": "gomaxprocs-and-hardware-threads",
        "title": "GOMAXPROCS and Hardware Threads",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "practical-guidance-for-go-programmers",
        "title": "Practical Guidance for Go Programmers",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 126
      }
    ],
    "totalWordCount": 1207,
    "estimatedReadingTime": 300000,
    "title": "hardware_considerations_for_synchronization",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_performance\\fine_grained_vs_coarse_grained_locking.md": {
    "path": "public\\content\\go\\synchronization_performance\\fine_grained_vs_coarse_grained_locking.md",
    "sections": [
      {
        "id": "fine-grained-vs-coarse-grained-locking-in-go",
        "title": "Fine-Grained vs. Coarse-Grained Locking in Go",
        "level": 1,
        "wordCount": 48
      },
      {
        "id": "first-principles-why-do-we-need-locks",
        "title": "First Principles: Why Do We Need Locks?",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "understanding-locks-in-go-the-mutex",
        "title": "Understanding Locks in Go: The Mutex",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "coarse-grained-locking",
        "title": "Coarse-Grained Locking",
        "level": 2,
        "wordCount": 155
      },
      {
        "id": "fine-grained-locking",
        "title": "Fine-Grained Locking",
        "level": 2,
        "wordCount": 185
      },
      {
        "id": "real-world-scenario-a-concurrent-cache",
        "title": "Real-World Scenario: A Concurrent Cache",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "performance-comparison",
        "title": "Performance Comparison",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "when-to-use-each-approach",
        "title": "When to Use Each Approach",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "common-pitfalls-and-considerations",
        "title": "Common Pitfalls and Considerations",
        "level": 2,
        "wordCount": 129
      },
      {
        "id": "advanced-techniques-and-considerations",
        "title": "Advanced Techniques and Considerations",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 114
      }
    ],
    "totalWordCount": 1154,
    "estimatedReadingTime": 300000,
    "title": "fine_grained_vs_coarse_grained_locking",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_performance\\benchmarking_synchronization_approaches.md": {
    "path": "public\\content\\go\\synchronization_performance\\benchmarking_synchronization_approaches.md",
    "sections": [
      {
        "id": "golang-benchmarking-of-synchronization-approaches",
        "title": "Golang Benchmarking of Synchronization Approaches",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "first-principles-what-is-synchronization",
        "title": "First Principles: What is Synchronization?",
        "level": 2,
        "wordCount": 191
      },
      {
        "id": "gos-synchronization-options",
        "title": "Go's Synchronization Options",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "first-principles-of-benchmarking",
        "title": "First Principles of Benchmarking",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "creating-a-benchmark-in-go",
        "title": "Creating a Benchmark in Go",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "building-our-benchmark-suite",
        "title": "Building Our Benchmark Suite",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "running-the-benchmarks",
        "title": "Running the Benchmarks",
        "level": 2,
        "wordCount": 19
      },
      {
        "id": "parallel-benchmarks",
        "title": "Parallel Benchmarks",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "benchmark-specific-use-cases",
        "title": "Benchmark Specific Use Cases",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "a-complete-example-with-analysis",
        "title": "A Complete Example with Analysis",
        "level": 2,
        "wordCount": 21
      },
      {
        "id": "interpreting-benchmark-results",
        "title": "Interpreting Benchmark Results",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "analyzing-tradeoffs",
        "title": "Analyzing Tradeoffs",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "real-world-benchmarking-example",
        "title": "Real-World Benchmarking Example",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "profiling-for-deeper-insights",
        "title": "Profiling for Deeper Insights",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "best-practices-for-go-synchronization-benchmarking",
        "title": "Best Practices for Go Synchronization Benchmarking",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "avoiding-common-benchmarking-pitfalls",
        "title": "Avoiding Common Benchmarking Pitfalls",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 145
      }
    ],
    "totalWordCount": 1175,
    "estimatedReadingTime": 300000,
    "title": "benchmarking_synchronization_approaches",
    "frontmatter": {}
  },
  "public\\content\\go\\synchronization_performance\\atomic_operations_performance.md": {
    "path": "public\\content\\go\\synchronization_performance\\atomic_operations_performance.md",
    "sections": [
      {
        "id": "gos-atomic-operations-performance-from-first-principles",
        "title": "Go's Atomic Operations: Performance from First Principles",
        "level": 1,
        "wordCount": 54
      },
      {
        "id": "what-are-atomic-operations",
        "title": "What Are Atomic Operations?",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "atomic-operations-in-go",
        "title": "Atomic Operations in Go",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "how-atomic-operations-work-at-the-hardware-level",
        "title": "How Atomic Operations Work at the Hardware Level",
        "level": 2,
        "wordCount": 150
      },
      {
        "id": "performance-characteristics-of-atomic-operations",
        "title": "Performance Characteristics of Atomic Operations",
        "level": 2,
        "wordCount": 243
      },
      {
        "id": "optimizing-atomic-operation-performance",
        "title": "Optimizing Atomic Operation Performance",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "comparing-atomic-operations-with-alternatives",
        "title": "Comparing Atomic Operations with Alternatives",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "real-world-examples-and-benchmarks",
        "title": "Real-World Examples and Benchmarks",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "when-to-use-and-not-use-atomic-operations",
        "title": "When to Use (and Not Use) Atomic Operations",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 111
      }
    ],
    "totalWordCount": 1061,
    "estimatedReadingTime": 300000,
    "title": "atomic_operations_performance",
    "frontmatter": {}
  },
  "public\\content\\go\\structured_concurrency\\testing_structured_concurrent_code.md": {
    "path": "public\\content\\go\\structured_concurrency\\testing_structured_concurrent_code.md",
    "sections": [
      {
        "id": "testing-structured-concurrent-code-in-go",
        "title": "Testing Structured Concurrent Code in Go",
        "level": 1,
        "wordCount": 28
      },
      {
        "id": "first-principles-what-makes-testing-concurrent-code-challenging",
        "title": "First Principles: What Makes Testing Concurrent Code Challenging?",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "understanding-gos-concurrency-model",
        "title": "Understanding Go's Concurrency Model",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "basic-testing-techniques-for-concurrent-go-code",
        "title": "Basic Testing Techniques for Concurrent Go Code",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "testing-channel-based-concurrency",
        "title": "Testing Channel-Based Concurrency",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "advanced-testing-techniques",
        "title": "Advanced Testing Techniques",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "testing-for-race-conditions-deliberately",
        "title": "Testing for Race Conditions Deliberately",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "specialized-testing-tools",
        "title": "Specialized Testing Tools",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "testing-for-common-concurrency-issues",
        "title": "Testing for Common Concurrency Issues",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "real-world-example-testing-a-concurrent-web-crawler",
        "title": "Real-World Example: Testing a Concurrent Web Crawler",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "best-practices-for-testing-concurrent-go-code",
        "title": "Best Practices for Testing Concurrent Go Code",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 100
      }
    ],
    "totalWordCount": 881,
    "estimatedReadingTime": 240000,
    "title": "testing_structured_concurrent_code",
    "frontmatter": {}
  },
  "public\\content\\go\\structured_concurrency\\task_scoping_and_lifetime_management.md": {
    "path": "public\\content\\go\\structured_concurrency\\task_scoping_and_lifetime_management.md",
    "sections": [
      {
        "id": "go-task-scoping-and-lifetime-management-a-first-principles-approach",
        "title": "Go Task Scoping and Lifetime Management: A First Principles Approach",
        "level": 1,
        "wordCount": 33
      },
      {
        "id": "the-foundation-gos-memory-model",
        "title": "The Foundation: Go's Memory Model",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "variables-and-scope-in-go",
        "title": "Variables and Scope in Go",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "variable-lifetime",
        "title": "Variable Lifetime",
        "level": 2,
        "wordCount": 125
      },
      {
        "id": "escape-analysis",
        "title": "Escape Analysis",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "goroutines-and-memory-management",
        "title": "Goroutines and Memory Management",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "closures-and-variable-capture",
        "title": "Closures and Variable Capture",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "memory-leaks-in-go",
        "title": "Memory Leaks in Go",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "proper-resource-management-with-defer",
        "title": "Proper Resource Management with `defer`",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "context-package-for-task-cancellation",
        "title": "Context Package for Task Cancellation",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "sync-package-tools",
        "title": "Sync Package Tools",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "practical-application-worker-pool-pattern",
        "title": "Practical Application: Worker Pool Pattern",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "advanced-concepts-detecting-memory-leaks",
        "title": "Advanced Concepts: Detecting Memory Leaks",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "practical-tips-for-go-task-management",
        "title": "Practical Tips for Go Task Management",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 89
      }
    ],
    "totalWordCount": 966,
    "estimatedReadingTime": 240000,
    "title": "task_scoping_and_lifetime_management",
    "frontmatter": {}
  },
  "public\\content\\go\\structured_concurrency\\structured_concurrency_principles.md": {
    "path": "public\\content\\go\\structured_concurrency\\structured_concurrency_principles.md",
    "sections": [
      {
        "id": "understanding-gos-structured-concurrency-from-first-principles",
        "title": "Understanding Go's Structured Concurrency from First Principles",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "what-is-concurrency",
        "title": "What is Concurrency?",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "gos-concurrency-model-goroutines-and-channels",
        "title": "Go's Concurrency Model: Goroutines and Channels",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "the-problem-with-unstructured-concurrency",
        "title": "The Problem with Unstructured Concurrency",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "structured-concurrency-core-principles",
        "title": "Structured Concurrency: Core Principles",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "implementing-structured-concurrency-in-go",
        "title": "Implementing Structured Concurrency in Go",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "more-advanced-structured-concurrency-in-go",
        "title": "More Advanced Structured Concurrency in Go",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "practical-example-building-a-web-scraper",
        "title": "Practical Example: Building a Web Scraper",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "key-benefits-of-structured-concurrency",
        "title": "Key Benefits of Structured Concurrency",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "structured-concurrency-patterns-to-remember",
        "title": "Structured Concurrency Patterns to Remember",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "future-of-structured-concurrency-in-go",
        "title": "Future of Structured Concurrency in Go",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 106
      }
    ],
    "totalWordCount": 1076,
    "estimatedReadingTime": 300000,
    "title": "structured_concurrency_principles",
    "frontmatter": {}
  },
  "public\\content\\go\\structured_concurrency\\resource_cleanup_in_concurrent_hierarchies.md": {
    "path": "public\\content\\go\\structured_concurrency\\resource_cleanup_in_concurrent_hierarchies.md",
    "sections": [
      {
        "id": "resource-cleanup-in-concurrent-hierarchies-in-go",
        "title": "Resource Cleanup in Concurrent Hierarchies in Go",
        "level": 1,
        "wordCount": 33
      },
      {
        "id": "first-principles-of-resource-management",
        "title": "First Principles of Resource Management",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "context-package-the-foundation",
        "title": "Context Package: The Foundation",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "hierarchical-resource-management",
        "title": "Hierarchical Resource Management",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "error-propagation-in-hierarchies",
        "title": "Error Propagation in Hierarchies",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "advanced-pattern-the-controller-pattern",
        "title": "Advanced Pattern: The Controller Pattern",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "resource-cleanup-patterns",
        "title": "Resource Cleanup Patterns",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "the-graceful-shutdown-problem",
        "title": "The Graceful Shutdown Problem",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "best-practices-for-resource-cleanup",
        "title": "Best Practices for Resource Cleanup",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 102
      }
    ],
    "totalWordCount": 841,
    "estimatedReadingTime": 240000,
    "title": "resource_cleanup_in_concurrent_hierarchies",
    "frontmatter": {}
  },
  "public\\content\\go\\structured_concurrency\\parent_child_relationships_in_concurrent_code.md": {
    "path": "public\\content\\go\\structured_concurrency\\parent_child_relationships_in_concurrent_code.md",
    "sections": [
      {
        "id": "parent-child-relationships-in-go-concurrency-a-first-principles-approach",
        "title": "Parent-Child Relationships in Go Concurrency: A First Principles Approach",
        "level": 1,
        "wordCount": 33
      },
      {
        "id": "the-foundation-goroutines-and-channels",
        "title": "The Foundation: Goroutines and Channels",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "the-parent-child-relationship-challenge",
        "title": "The Parent-Child Relationship Challenge",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "building-parent-child-relationships",
        "title": "Building Parent-Child Relationships",
        "level": 2,
        "wordCount": 188
      },
      {
        "id": "advanced-pattern-supervisor-trees",
        "title": "Advanced Pattern: Supervisor Trees",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "gos-concurrency-paradigms-from-first-principles",
        "title": "Go's Concurrency Paradigms from First Principles",
        "level": 2,
        "wordCount": 170
      },
      {
        "id": "common-patterns-and-best-practices",
        "title": "Common Patterns and Best Practices",
        "level": 2,
        "wordCount": 152
      },
      {
        "id": "deep-dive-the-lifecycle-of-parent-child-goroutines",
        "title": "Deep Dive: The Lifecycle of Parent-Child Goroutines",
        "level": 2,
        "wordCount": 192
      },
      {
        "id": "pitfalls-and-common-mistakes",
        "title": "Pitfalls and Common Mistakes",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "best-practices-for-parent-child-relationships",
        "title": "Best Practices for Parent-Child Relationships",
        "level": 2,
        "wordCount": 134
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 109
      }
    ],
    "totalWordCount": 1367,
    "estimatedReadingTime": 360000,
    "title": "parent_child_relationships_in_concurrent_code",
    "frontmatter": {}
  },
  "public\\content\\go\\structured_concurrency\\migration_strategies_toward_structured_concurrency.md": {
    "path": "public\\content\\go\\structured_concurrency\\migration_strategies_toward_structured_concurrency.md",
    "sections": [
      {
        "id": "migration-strategies-toward-structured-concurrency-in-go",
        "title": "Migration Strategies Toward Structured Concurrency in Go",
        "level": 1,
        "wordCount": 45
      },
      {
        "id": "what-is-concurrency",
        "title": "What is Concurrency?",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "traditional-go-concurrency",
        "title": "Traditional Go Concurrency",
        "level": 2,
        "wordCount": 142
      },
      {
        "id": "the-problem-with-traditional-concurrency",
        "title": "The Problem with Traditional Concurrency",
        "level": 2,
        "wordCount": 129
      },
      {
        "id": "what-is-structured-concurrency",
        "title": "What is Structured Concurrency?",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "implementing-structured-concurrency-in-go",
        "title": "Implementing Structured Concurrency in Go",
        "level": 2,
        "wordCount": 185
      },
      {
        "id": "practical-migration-strategies",
        "title": "Practical Migration Strategies",
        "level": 2,
        "wordCount": 145
      },
      {
        "id": "real-world-examples",
        "title": "Real-World Examples",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "common-pitfalls-during-migration",
        "title": "Common Pitfalls During Migration",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "looking-ahead-gos-future-with-structured-concurrency",
        "title": "Looking Ahead: Go's Future with Structured Concurrency",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 110
      }
    ],
    "totalWordCount": 1185,
    "estimatedReadingTime": 300000,
    "title": "migration_strategies_toward_structured_concurrency",
    "frontmatter": {}
  },
  "public\\content\\go\\structured_concurrency\\implementing_task_groups.md": {
    "path": "public\\content\\go\\structured_concurrency\\implementing_task_groups.md",
    "sections": [
      {
        "id": "task-groups-in-go-a-first-principles-explanation",
        "title": "Task Groups in Go: A First Principles Explanation",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "the-foundation-concurrency-vs-parallelism",
        "title": "The Foundation: Concurrency vs Parallelism",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "gos-concurrency-model-goroutines-and-channels",
        "title": "Go's Concurrency Model: Goroutines and Channels",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "the-challenge-managing-multiple-goroutines",
        "title": "The Challenge: Managing Multiple Goroutines",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "enter-task-groups-simplifying-goroutine-management",
        "title": "Enter Task Groups: Simplifying Goroutine Management",
        "level": 2,
        "wordCount": 221
      },
      {
        "id": "practical-example-parallel-file-processing",
        "title": "Practical Example: Parallel File Processing",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "implementing-a-custom-task-group",
        "title": "Implementing a Custom Task Group",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "advanced-pattern-limited-concurrency",
        "title": "Advanced Pattern: Limited Concurrency",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "go-118-syncgroup-and-go-120-sloggroup",
        "title": "Go 1.18+: sync.Group and Go 1.20+: slog.Group",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "when-to-use-task-groups",
        "title": "When to Use Task Groups",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "best-practices-for-task-groups",
        "title": "Best Practices for Task Groups",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 95
      }
    ],
    "totalWordCount": 1062,
    "estimatedReadingTime": 300000,
    "title": "implementing_task_groups",
    "frontmatter": {}
  },
  "public\\content\\go\\structured_concurrency\\error_propagation_in_structured_concurrency.md": {
    "path": "public\\content\\go\\structured_concurrency\\error_propagation_in_structured_concurrency.md",
    "sections": [
      {
        "id": "error-propagation-in-structured-concurrency-in-go",
        "title": "Error Propagation in Structured Concurrency in Go",
        "level": 1,
        "wordCount": 28
      },
      {
        "id": "first-principles-understanding-errors-in-go",
        "title": "First Principles: Understanding Errors in Go",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "error-propagation-the-fundamental-pattern",
        "title": "Error Propagation: The Fundamental Pattern",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "structured-concurrency-in-go",
        "title": "Structured Concurrency in Go",
        "level": 2,
        "wordCount": 144
      },
      {
        "id": "error-propagation-in-concurrent-code",
        "title": "Error Propagation in Concurrent Code",
        "level": 2,
        "wordCount": 142
      },
      {
        "id": "modern-structured-concurrency-in-go",
        "title": "Modern Structured Concurrency in Go",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "advanced-error-handling-with-semantic-context",
        "title": "Advanced Error Handling with Semantic Context",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "go-120-error-joining",
        "title": "Go 1.20+ Error Joining",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "practical-example-parallel-file-processing",
        "title": "Practical Example: Parallel File Processing",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "best-practices-for-error-propagation-in-concurrent-go",
        "title": "Best Practices for Error Propagation in Concurrent Go",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 130
      }
    ],
    "totalWordCount": 1061,
    "estimatedReadingTime": 300000,
    "title": "error_propagation_in_structured_concurrency",
    "frontmatter": {}
  },
  "public\\content\\go\\structured_concurrency\\composing_concurrent_operations.md": {
    "path": "public\\content\\go\\structured_concurrency\\composing_concurrent_operations.md",
    "sections": [
      {
        "id": "composing-concurrent-operations-in-go",
        "title": "Composing Concurrent Operations in Go",
        "level": 1,
        "wordCount": 24
      },
      {
        "id": "1-understanding-concurrency-the-foundation",
        "title": "1. Understanding Concurrency: The Foundation",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "2-gos-concurrency-model-goroutines-and-channels",
        "title": "2. Go's Concurrency Model: Goroutines and Channels",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "3-composition-patterns-combining-concurrent-operations",
        "title": "3. Composition Patterns: Combining Concurrent Operations",
        "level": 2,
        "wordCount": 300
      },
      {
        "id": "4-advanced-composition-error-handling",
        "title": "4. Advanced Composition: Error Handling",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "5-pipeline-pattern-chaining-concurrent-operations",
        "title": "5. Pipeline Pattern: Chaining Concurrent Operations",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "6-throttling-and-rate-limiting",
        "title": "6. Throttling and Rate Limiting",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "7-worker-pools-reusing-goroutines",
        "title": "7. Worker Pools: Reusing Goroutines",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "8-practical-application-building-a-concurrent-web-crawler",
        "title": "8. Practical Application: Building a Concurrent Web Crawler",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "9-best-practices-for-composing-concurrent-operations",
        "title": "9. Best Practices for Composing Concurrent Operations",
        "level": 2,
        "wordCount": 132
      },
      {
        "id": "10-common-pitfalls-and-how-to-avoid-them",
        "title": "10. Common Pitfalls and How to Avoid Them",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 101
      }
    ],
    "totalWordCount": 1083,
    "estimatedReadingTime": 300000,
    "title": "composing_concurrent_operations",
    "frontmatter": {}
  },
  "public\\content\\go\\structured_concurrency\\cancellation_cascades_implementation.md": {
    "path": "public\\content\\go\\structured_concurrency\\cancellation_cascades_implementation.md",
    "sections": [
      {
        "id": "understanding-golang-cancellation-cascades-from-first-principles",
        "title": "Understanding Golang Cancellation Cascades from First Principles",
        "level": 1,
        "wordCount": 57
      },
      {
        "id": "starting-with-first-principles-what-is-cancellation",
        "title": "Starting with First Principles: What is Cancellation?",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "the-context-package-gos-cancellation-foundation",
        "title": "The Context Package: Go's Cancellation Foundation",
        "level": 2,
        "wordCount": 150
      },
      {
        "id": "the-cascade-effect-how-cancellation-propagates",
        "title": "The Cascade Effect: How Cancellation Propagates",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "implementing-cancellation-cascades-a-step-by-step-example",
        "title": "Implementing Cancellation Cascades: A Step-by-Step Example",
        "level": 2,
        "wordCount": 254
      },
      {
        "id": "how-cancellation-cascades-work-under-the-hood",
        "title": "How Cancellation Cascades Work Under the Hood",
        "level": 2,
        "wordCount": 189
      },
      {
        "id": "real-world-application-http-server-with-timeouts",
        "title": "Real-World Application: HTTP Server with Timeouts",
        "level": 2,
        "wordCount": 165
      },
      {
        "id": "best-practices-for-cancellation-cascades",
        "title": "Best Practices for Cancellation Cascades",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "common-pitfalls-and-how-to-avoid-them",
        "title": "Common Pitfalls and How to Avoid Them",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "advanced-techniques-context-replacement-and-value-cascades",
        "title": "Advanced Techniques: Context Replacement and Value Cascades",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "conclusion-the-power-of-principled-cancellation",
        "title": "Conclusion: The Power of Principled Cancellation",
        "level": 2,
        "wordCount": 142
      }
    ],
    "totalWordCount": 1438,
    "estimatedReadingTime": 360000,
    "title": "cancellation_cascades_implementation",
    "frontmatter": {}
  },
  "public\\content\\go\\standard_library\\working_with_files_and_io.md": {
    "path": "public\\content\\go\\standard_library\\working_with_files_and_io.md",
    "sections": [
      {
        "id": "working-with-files-and-io-in-go",
        "title": "Working with Files and I/O in Go",
        "level": 1,
        "wordCount": 36
      },
      {
        "id": "the-conceptual-foundation-of-files-in-computing",
        "title": "The Conceptual Foundation of Files in Computing",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "the-io-package-the-foundation-of-io-in-go",
        "title": "The io Package: The Foundation of I/O in Go",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "opening-and-closing-files",
        "title": "Opening and Closing Files",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "reading-from-files",
        "title": "Reading from Files",
        "level": 2,
        "wordCount": 132
      },
      {
        "id": "writing-to-files",
        "title": "Writing to Files",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "file-operations-and-management",
        "title": "File Operations and Management",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "directory-operations",
        "title": "Directory Operations",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "working-with-temporary-files",
        "title": "Working with Temporary Files",
        "level": 2,
        "wordCount": 23
      },
      {
        "id": "working-with-file-paths",
        "title": "Working with File Paths",
        "level": 2,
        "wordCount": 18
      },
      {
        "id": "advanced-example-creating-a-simple-file-logger",
        "title": "Advanced Example: Creating a Simple File Logger",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "understanding-error-handling-in-file-operations",
        "title": "Understanding Error Handling in File Operations",
        "level": 2,
        "wordCount": 23
      },
      {
        "id": "summary-gos-io-philosophy",
        "title": "Summary: Go's I/O Philosophy",
        "level": 2,
        "wordCount": 138
      }
    ],
    "totalWordCount": 920,
    "estimatedReadingTime": 240000,
    "title": "working_with_files_and_io",
    "frontmatter": {}
  },
  "public\\content\\go\\standard_library\\time_and_date_handling.md": {
    "path": "public\\content\\go\\standard_library\\time_and_date_handling.md",
    "sections": [
      {
        "id": "go-time-and-date-handling-from-first-principles",
        "title": "Go Time and Date Handling from First Principles",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "the-concept-of-time-in-computing",
        "title": "The Concept of Time in Computing",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "gos-approach-to-time-the-time-package",
        "title": "Go's Approach to Time: The `time` Package",
        "level": 2,
        "wordCount": 984
      },
      {
        "id": "practical-time-handling-tips",
        "title": "Practical Time Handling Tips",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 113
      }
    ],
    "totalWordCount": 1336,
    "estimatedReadingTime": 360000,
    "title": "time_and_date_handling",
    "frontmatter": {}
  },
  "public\\content\\go\\standard_library\\Testing package fundamentals.md": {
    "path": "public\\content\\go\\standard_library\\Testing package fundamentals.md",
    "sections": [
      {
        "id": "go-testing-package-fundamentals-a-first-principles-approach",
        "title": "Go Testing Package Fundamentals: A First Principles Approach",
        "level": 1,
        "wordCount": 44
      },
      {
        "id": "the-philosophy-behind-testing-in-go",
        "title": "The Philosophy Behind Testing in Go",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "the-testing-package-structure",
        "title": "The Testing Package Structure",
        "level": 2,
        "wordCount": 164
      },
      {
        "id": "writing-your-first-test",
        "title": "Writing Your First Test",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "running-tests",
        "title": "Running Tests",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "test-tables-testing-multiple-cases",
        "title": "Test Tables: Testing Multiple Cases",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "testing-error-handling",
        "title": "Testing Error Handling",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "setup-and-teardown",
        "title": "Setup and Teardown",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "subtests-organizing-related-tests",
        "title": "Subtests: Organizing Related Tests",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "test-helpers-reducing-repetition",
        "title": "Test Helpers: Reducing Repetition",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "parallel-testing-speeding-up-test-execution",
        "title": "Parallel Testing: Speeding Up Test Execution",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "testing-http-handlers",
        "title": "Testing HTTP Handlers",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "beyond-basic-testing",
        "title": "Beyond Basic Testing",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "test-coverage",
        "title": "Test Coverage",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "best-practices-for-go-testing",
        "title": "Best Practices for Go Testing",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "mocking-in-go",
        "title": "Mocking in Go",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "testing-asynchronous-code",
        "title": "Testing Asynchronous Code",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 128
      }
    ],
    "totalWordCount": 1219,
    "estimatedReadingTime": 300000,
    "title": "Testing package fundamentals",
    "frontmatter": {}
  },
  "public\\content\\go\\standard_library\\template_parsing_and_execution.md": {
    "path": "public\\content\\go\\standard_library\\template_parsing_and_execution.md",
    "sections": [
      {
        "id": "go-templates-parsing-and-execution-from-first-principles",
        "title": "Go Templates: Parsing and Execution from First Principles",
        "level": 1,
        "wordCount": 54
      },
      {
        "id": "what-are-templates",
        "title": "What Are Templates?",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "the-template-lifecycle",
        "title": "The Template Lifecycle",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "template-creation",
        "title": "Template Creation",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "template-parsing",
        "title": "Template Parsing",
        "level": 2,
        "wordCount": 206
      },
      {
        "id": "template-execution",
        "title": "Template Execution",
        "level": 2,
        "wordCount": 145
      },
      {
        "id": "template-functions",
        "title": "Template Functions",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "template-nesting-and-including-templates",
        "title": "Template Nesting and Including Templates",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "htmltemplate-vs-texttemplate",
        "title": "html/template vs text/template",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "template-caching-and-reuse",
        "title": "Template Caching and Reuse",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "common-gotchas-and-best-practices",
        "title": "Common Gotchas and Best Practices",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "the-complete-process-under-the-hood",
        "title": "The Complete Process: Under the Hood",
        "level": 2,
        "wordCount": 214
      },
      {
        "id": "common-advanced-features",
        "title": "Common Advanced Features",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 107
      }
    ],
    "totalWordCount": 1243,
    "estimatedReadingTime": 300000,
    "title": "template_parsing_and_execution",
    "frontmatter": {}
  },
  "public\\content\\go\\standard_library\\string_manipulation_and_formatting.md": {
    "path": "public\\content\\go\\standard_library\\string_manipulation_and_formatting.md",
    "sections": [
      {
        "id": "go-string-manipulation-and-formatting-from-first-principles",
        "title": "Go String Manipulation and Formatting from First Principles",
        "level": 1,
        "wordCount": 31
      },
      {
        "id": "1-what-is-a-string-in-go",
        "title": "1. What Is a String in Go?",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "2-utf-8-and-runes",
        "title": "2. UTF-8 and Runes",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "3-string-creation-and-basic-operations",
        "title": "3. String Creation and Basic Operations",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "4-string-immutability",
        "title": "4. String Immutability",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "5-string-comparison",
        "title": "5. String Comparison",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "6-the-strings-package",
        "title": "6. The strings Package",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "7-building-strings-efficiently",
        "title": "7. Building Strings Efficiently",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "8-string-formatting-with-fmt-package",
        "title": "8. String Formatting with fmt Package",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "9-working-with-unicode-and-international-text",
        "title": "9. Working with Unicode and International Text",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "10-real-world-examples",
        "title": "10. Real-World Examples",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "11-advanced-string-formatting-with-texttemplate",
        "title": "11. Advanced String Formatting with text/template",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 138
      }
    ],
    "totalWordCount": 978,
    "estimatedReadingTime": 240000,
    "title": "string_manipulation_and_formatting",
    "frontmatter": {}
  },
  "public\\content\\go\\standard_library\\Sort package and custom sorting.md": {
    "path": "public\\content\\go\\standard_library\\Sort package and custom sorting.md",
    "sections": [
      {
        "id": "understanding-golangs-sort-package-from-first-principles",
        "title": "Understanding Golang's Sort Package from First Principles",
        "level": 1,
        "wordCount": 44
      },
      {
        "id": "what-is-sorting",
        "title": "What is Sorting?",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "the-basics-of-sorting-in-go",
        "title": "The Basics of Sorting in Go",
        "level": 2,
        "wordCount": 168
      },
      {
        "id": "custom-sorting-in-go",
        "title": "Custom Sorting in Go",
        "level": 2,
        "wordCount": 183
      },
      {
        "id": "multiple-sort-criteria",
        "title": "Multiple Sort Criteria",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "reversed-sorting",
        "title": "Reversed Sorting",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "stable-sorting",
        "title": "Stable Sorting",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "searching-in-sorted-slices",
        "title": "Searching in Sorted Slices",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "under-the-hood-sorting-algorithms-in-go",
        "title": "Under the Hood: Sorting Algorithms in Go",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "practical-example-custom-sorting-of-complex-data",
        "title": "Practical Example: Custom Sorting of Complex Data",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 133
      }
    ],
    "totalWordCount": 1090,
    "estimatedReadingTime": 300000,
    "title": "Sort package and custom sorting",
    "frontmatter": {}
  },
  "public\\content\\go\\standard_library\\regular_expressions.md": {
    "path": "public\\content\\go\\standard_library\\regular_expressions.md",
    "sections": [
      {
        "id": "understanding-go-regular-expressions-from-first-principles",
        "title": "Understanding Go Regular Expressions from First Principles",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "what-are-regular-expressions",
        "title": "What Are Regular Expressions?",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "gos-regular-expression-implementation",
        "title": "Go's Regular Expression Implementation",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "getting-started-the-basics",
        "title": "Getting Started: The Basics",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "basic-matching",
        "title": "Basic Matching",
        "level": 2,
        "wordCount": 24
      },
      {
        "id": "simple-pattern-examples",
        "title": "Simple Pattern Examples",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "metacharacters-and-special-sequences",
        "title": "Metacharacters and Special Sequences",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "quantifiers",
        "title": "Quantifiers",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "grouping-and-capturing",
        "title": "Grouping and Capturing",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "finding-all-matches",
        "title": "Finding All Matches",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "replacing-matches",
        "title": "Replacing Matches",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "common-go-specific-regex-patterns",
        "title": "Common Go-Specific Regex Patterns",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "common-gotchas-and-solutions",
        "title": "Common Gotchas and Solutions",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "advanced-features",
        "title": "Advanced Features",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "putting-it-all-together-a-complete-example",
        "title": "Putting It All Together: A Complete Example",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 131
      }
    ],
    "totalWordCount": 1344,
    "estimatedReadingTime": 360000,
    "title": "regular_expressions",
    "frontmatter": {}
  },
  "public\\content\\go\\standard_library\\json_xml_and_data_serialization.md": {
    "path": "public\\content\\go\\standard_library\\json_xml_and_data_serialization.md",
    "sections": [
      {
        "id": "gos-approach-to-data-serialization-json-xml-and-beyond",
        "title": "Go's Approach to Data Serialization: JSON, XML, and Beyond",
        "level": 1,
        "wordCount": 32
      },
      {
        "id": "what-is-data-serialization",
        "title": "What is Data Serialization?",
        "level": 2,
        "wordCount": 172
      },
      {
        "id": "first-principles-of-serialization-in-go",
        "title": "First Principles of Serialization in Go",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "json-serialization-in-go",
        "title": "JSON Serialization in Go",
        "level": 2,
        "wordCount": 369
      },
      {
        "id": "xml-serialization-in-go",
        "title": "XML Serialization in Go",
        "level": 2,
        "wordCount": 174
      },
      {
        "id": "comparison-json-vs-xml-in-go",
        "title": "Comparison: JSON vs XML in Go",
        "level": 2,
        "wordCount": 174
      },
      {
        "id": "beyond-json-and-xml-other-serialization-options-in-go",
        "title": "Beyond JSON and XML: Other Serialization Options in Go",
        "level": 2,
        "wordCount": 146
      },
      {
        "id": "building-a-custom-serialization-format-in-go",
        "title": "Building a Custom Serialization Format in Go",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "best-practices-for-data-serialization-in-go",
        "title": "Best Practices for Data Serialization in Go",
        "level": 2,
        "wordCount": 174
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 106
      }
    ],
    "totalWordCount": 1482,
    "estimatedReadingTime": 360000,
    "title": "json_xml_and_data_serialization",
    "frontmatter": {}
  },
  "public\\content\\go\\standard_library\\http_client_and_server_implementation.md": {
    "path": "public\\content\\go\\standard_library\\http_client_and_server_implementation.md",
    "sections": [
      {
        "id": "understanding-golang-http-client-and-server-implementation-from-first-principles",
        "title": "Understanding Golang HTTP Client and Server Implementation from First Principles",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "1-what-is-http",
        "title": "1. What is HTTP?",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "2-gos-nethttp-package",
        "title": "2. Go's net/http Package",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "3-building-an-http-client-in-go",
        "title": "3. Building an HTTP Client in Go",
        "level": 2,
        "wordCount": 268
      },
      {
        "id": "4-building-an-http-server-in-go",
        "title": "4. Building an HTTP Server in Go",
        "level": 2,
        "wordCount": 300
      },
      {
        "id": "5-understanding-http-request-and-response-in-detail",
        "title": "5. Understanding HTTP Request and Response in Detail",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "6-advanced-topics",
        "title": "6. Advanced Topics",
        "level": 2,
        "wordCount": 209
      },
      {
        "id": "7-best-practices-for-http-servers-in-go",
        "title": "7. Best Practices for HTTP Servers in Go",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "8-testing-http-servers-and-clients-in-go",
        "title": "8. Testing HTTP Servers and Clients in Go",
        "level": 2,
        "wordCount": 173
      },
      {
        "id": "9-performance-considerations",
        "title": "9. Performance Considerations",
        "level": 2,
        "wordCount": 156
      },
      {
        "id": "10-real-world-http-server-design",
        "title": "10. Real-World HTTP Server Design",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "11-conclusion",
        "title": "11. Conclusion",
        "level": 2,
        "wordCount": 142
      }
    ],
    "totalWordCount": 1687,
    "estimatedReadingTime": 420000,
    "title": "http_client_and_server_implementation",
    "frontmatter": {}
  },
  "public\\content\\go\\select_statement_patterns\\using_reflect_select_for_dynamic_cases.md": {
    "path": "public\\content\\go\\select_statement_patterns\\using_reflect_select_for_dynamic_cases.md",
    "sections": [
      {
        "id": "understanding-gos-reflectselect-dynamic-select-cases-from-first-principles",
        "title": "Understanding Go's `reflect.Select`: Dynamic Select Cases from First Principles",
        "level": 1,
        "wordCount": 48
      },
      {
        "id": "1-go-concurrency-fundamentals",
        "title": "1. Go Concurrency Fundamentals",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "2-the-select-statement",
        "title": "2. The Select Statement",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "3-reflection-in-go",
        "title": "3. Reflection in Go",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "4-the-reflectselect-function",
        "title": "4. The reflect.Select Function",
        "level": 2,
        "wordCount": 177
      },
      {
        "id": "5-advanced-patterns-with-reflectselect",
        "title": "5. Advanced Patterns with reflect.Select",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "6-real-world-use-cases",
        "title": "6. Real-World Use Cases",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "7-performance-considerations",
        "title": "7. Performance Considerations",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "8-best-practices-and-pitfalls",
        "title": "8. Best Practices and Pitfalls",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "9-conclusion",
        "title": "9. Conclusion",
        "level": 2,
        "wordCount": 118
      }
    ],
    "totalWordCount": 952,
    "estimatedReadingTime": 240000,
    "title": "using_reflect_select_for_dynamic_cases",
    "frontmatter": {}
  },
  "public\\content\\go\\select_statement_patterns\\timeout_patterns_with_select.md": {
    "path": "public\\content\\go\\select_statement_patterns\\timeout_patterns_with_select.md",
    "sections": [
      {
        "id": "understanding-go-timeout-patterns-with-select",
        "title": "Understanding Go Timeout Patterns with `select`",
        "level": 1,
        "wordCount": 35
      },
      {
        "id": "first-principles-what-is-a-timeout",
        "title": "First Principles: What is a Timeout?",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "the-go-concurrency-model",
        "title": "The Go Concurrency Model",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "the-select-statement",
        "title": "The `select` Statement",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "understanding-timeouts-with-select",
        "title": "Understanding Timeouts with `select`",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "timeout-patterns-in-go",
        "title": "Timeout Patterns in Go",
        "level": 2,
        "wordCount": 269
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 202
      },
      {
        "id": "real-world-example-http-client-with-timeout",
        "title": "Real-World Example: HTTP Client with Timeout",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "advanced-pattern-timeout-with-retry",
        "title": "Advanced Pattern: Timeout with Retry",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 109
      }
    ],
    "totalWordCount": 1067,
    "estimatedReadingTime": 300000,
    "title": "timeout_patterns_with_select",
    "frontmatter": {}
  },
  "public\\content\\go\\select_statement_patterns\\prioritizing_channel_operations.md": {
    "path": "public\\content\\go\\select_statement_patterns\\prioritizing_channel_operations.md",
    "sections": [
      {
        "id": "understanding-go-channel-prioritization-from-first-principles",
        "title": "Understanding Go Channel Prioritization from First Principles",
        "level": 1,
        "wordCount": 45
      },
      {
        "id": "the-nature-of-concurrency",
        "title": "The Nature of Concurrency",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "channels-as-communication-conduits",
        "title": "Channels as Communication Conduits",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "the-select-statement-prioritizations-foundation",
        "title": "The Select Statement: Prioritization's Foundation",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "method-1-natural-priority-with-sequential-checks",
        "title": "Method 1: Natural Priority with Sequential Checks",
        "level": 2,
        "wordCount": 138
      },
      {
        "id": "method-2-using-buffered-channels-with-length-checks",
        "title": "Method 2: Using Buffered Channels with Length Checks",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "method-3-using-a-dedicated-processor-goroutine",
        "title": "Method 3: Using a Dedicated Processor Goroutine",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "method-4-using-multiple-select-statements-with-timeouts",
        "title": "Method 4: Using Multiple Select Statements with Timeouts",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "a-real-world-example-request-handler-with-priority",
        "title": "A Real-World Example: Request Handler with Priority",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "understanding-the-tradeoffs",
        "title": "Understanding the Tradeoffs",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "starvation-concerns",
        "title": "Starvation Concerns",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 140
      }
    ],
    "totalWordCount": 1086,
    "estimatedReadingTime": 300000,
    "title": "prioritizing_channel_operations",
    "frontmatter": {}
  },
  "public\\content\\go\\select_statement_patterns\\performance_considerations_in_select_usage.md": {
    "path": "public\\content\\go\\select_statement_patterns\\performance_considerations_in_select_usage.md",
    "sections": [
      {
        "id": "gos-select-statement-performance-considerations-from-first-principles",
        "title": "Go's Select Statement: Performance Considerations from First Principles",
        "level": 1,
        "wordCount": 56
      },
      {
        "id": "1-what-is-the-select-statement",
        "title": "1. What Is the Select Statement?",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "2-the-implementation-of-select-from-first-principles",
        "title": "2. The Implementation of Select from First Principles",
        "level": 2,
        "wordCount": 223
      },
      {
        "id": "3-performance-considerations",
        "title": "3. Performance Considerations",
        "level": 2,
        "wordCount": 351
      },
      {
        "id": "4-advanced-performance-optimizations",
        "title": "4. Advanced Performance Optimizations",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "5-real-world-examples-and-patterns",
        "title": "5. Real-World Examples and Patterns",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "6-comparing-select-performance-with-alternatives",
        "title": "6. Comparing Select Performance with Alternatives",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "7-common-pitfalls-and-best-practices",
        "title": "7. Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "8-benchmarking-select-performance",
        "title": "8. Benchmarking Select Performance",
        "level": 2,
        "wordCount": 24
      },
      {
        "id": "9-select-in-production-systems",
        "title": "9. Select in Production Systems",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "10-conclusion",
        "title": "10. Conclusion",
        "level": 2,
        "wordCount": 141
      }
    ],
    "totalWordCount": 1210,
    "estimatedReadingTime": 300000,
    "title": "performance_considerations_in_select_usage",
    "frontmatter": {}
  },
  "public\\content\\go\\select_statement_patterns\\multi_channel_coordination_with_select.md": {
    "path": "public\\content\\go\\select_statement_patterns\\multi_channel_coordination_with_select.md",
    "sections": [
      {
        "id": "go-multi-channel-coordination-with-select-from-first-principles",
        "title": "Go Multi-Channel Coordination with Select: From First Principles",
        "level": 1,
        "wordCount": 45
      },
      {
        "id": "understanding-channels-the-foundation",
        "title": "Understanding Channels: The Foundation",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "the-problem-working-with-multiple-channels",
        "title": "The Problem: Working with Multiple Channels",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "the-select-statement-a-multiplexer-for-channels",
        "title": "The Select Statement: A Multiplexer for Channels",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "first-principles-of-select",
        "title": "First Principles of Select",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "example-1-basic-selection-between-two-channels",
        "title": "Example 1: Basic Selection Between Two Channels",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "example-2-implementing-a-timeout",
        "title": "Example 2: Implementing a Timeout",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "example-3-non-blocking-channel-operations",
        "title": "Example 3: Non-blocking Channel Operations",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "example-4-random-selection-when-multiple-channels-are-ready",
        "title": "Example 4: Random Selection When Multiple Channels Are Ready",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "example-5-directional-channels-with-select",
        "title": "Example 5: Directional Channels with Select",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "example-6-building-a-timeout-loop",
        "title": "Example 6: Building a Timeout Loop",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "real-world-pattern-fan-in",
        "title": "Real-World Pattern: Fan-in",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "advanced-example-dynamic-selection-with-reflection",
        "title": "Advanced Example: Dynamic Selection with Reflection",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "conclusion-and-best-practices",
        "title": "Conclusion and Best Practices",
        "level": 2,
        "wordCount": 166
      }
    ],
    "totalWordCount": 1175,
    "estimatedReadingTime": 300000,
    "title": "multi_channel_coordination_with_select",
    "frontmatter": {}
  },
  "public\\content\\go\\select_statement_patterns\\multiplexing_multiple_channels.md": {
    "path": "public\\content\\go\\select_statement_patterns\\multiplexing_multiple_channels.md",
    "sections": [
      {
        "id": "understanding-gos-select-statement-and-channel-multiplexing-from-first-principles",
        "title": "Understanding Go's `select` Statement and Channel Multiplexing from First Principles",
        "level": 1,
        "wordCount": 33
      },
      {
        "id": "fundamentals-of-concurrency",
        "title": "Fundamentals of Concurrency",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "gos-approach-to-concurrency-goroutines-and-channels",
        "title": "Go's Approach to Concurrency: Goroutines and Channels",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "the-problem-handling-multiple-channels",
        "title": "The Problem: Handling Multiple Channels",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "enter-the-select-statement",
        "title": "Enter the `select` Statement",
        "level": 2,
        "wordCount": 27
      },
      {
        "id": "understanding-select-through-examples",
        "title": "Understanding `select` Through Examples",
        "level": 2,
        "wordCount": 345
      },
      {
        "id": "using-select-in-a-loop-for-continuous-multiplexing",
        "title": "Using `select` in a Loop for Continuous Multiplexing",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "practical-use-case-implementing-a-timeout-for-a-worker-pool",
        "title": "Practical Use Case: Implementing a Timeout for a Worker Pool",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "the-select-statement-under-the-hood",
        "title": "The `select` Statement Under the Hood",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "common-patterns-and-best-practices",
        "title": "Common Patterns and Best Practices",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "common-mistakes-and-pitfalls",
        "title": "Common Mistakes and Pitfalls",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 80
      }
    ],
    "totalWordCount": 1178,
    "estimatedReadingTime": 300000,
    "title": "multiplexing_multiple_channels",
    "frontmatter": {}
  },
  "public\\content\\go\\select_statement_patterns\\error_handling_in_select_statements.md": {
    "path": "public\\content\\go\\select_statement_patterns\\error_handling_in_select_statements.md",
    "sections": [
      {
        "id": "error-handling-in-gos-select-statements-a-first-principles-approach",
        "title": "Error Handling in Go's Select Statements: A First Principles Approach",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "the-nature-of-errors-in-go",
        "title": "The Nature of Errors in Go",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "the-select-statement-first-principles",
        "title": "The Select Statement: First Principles",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "error-channels-the-foundation-of-error-handling-in-select",
        "title": "Error Channels: The Foundation of Error Handling in Select",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "combining-data-and-error-handling",
        "title": "Combining Data and Error Handling",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "error-handling-patterns-with-select",
        "title": "Error Handling Patterns with Select",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "multiple-goroutines-and-error-handling",
        "title": "Multiple Goroutines and Error Handling",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "handling-errors-from-multiple-channels",
        "title": "Handling Errors from Multiple Channels",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "timeouts-and-error-handling",
        "title": "Timeouts and Error Handling",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "preventing-goroutine-leaks",
        "title": "Preventing Goroutine Leaks",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "practical-example-robust-data-fetcher",
        "title": "Practical Example: Robust Data Fetcher",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "best-practices-for-error-handling-in-select-statements",
        "title": "Best Practices for Error Handling in Select Statements",
        "level": 2,
        "wordCount": 134
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 118
      }
    ],
    "totalWordCount": 908,
    "estimatedReadingTime": 240000,
    "title": "error_handling_in_select_statements",
    "frontmatter": {}
  },
  "public\\content\\go\\select_statement_patterns\\dynamic_channel_selection.md": {
    "path": "public\\content\\go\\select_statement_patterns\\dynamic_channel_selection.md",
    "sections": [
      {
        "id": "dynamic-channel-selection-in-go-using-select",
        "title": "Dynamic Channel Selection in Go Using Select",
        "level": 1,
        "wordCount": 24
      },
      {
        "id": "the-foundation-concurrency-in-go",
        "title": "The Foundation: Concurrency in Go",
        "level": 2,
        "wordCount": 162
      },
      {
        "id": "channels-communication-between-goroutines",
        "title": "Channels: Communication Between Goroutines",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "the-need-for-selection",
        "title": "The Need for Selection",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "select-statement-dynamic-channel-selection",
        "title": "Select Statement: Dynamic Channel Selection",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "select-features-and-behaviors",
        "title": "Select Features and Behaviors",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "common-patterns-and-best-practices",
        "title": "Common Patterns and Best Practices",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "advanced-topics",
        "title": "Advanced Topics",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 121
      }
    ],
    "totalWordCount": 962,
    "estimatedReadingTime": 240000,
    "title": "dynamic_channel_selection",
    "frontmatter": {}
  },
  "public\\content\\go\\select_statement_patterns\\default_case_for_non_blocking_operations.md": {
    "path": "public\\content\\go\\select_statement_patterns\\default_case_for_non_blocking_operations.md",
    "sections": [
      {
        "id": "understanding-gos-select-statement-with-default-case-a-first-principles-approach",
        "title": "Understanding Go's `select` Statement with Default Case: A First Principles Approach",
        "level": 1,
        "wordCount": 37
      },
      {
        "id": "the-fundamentals-of-concurrency-in-go",
        "title": "The Fundamentals of Concurrency in Go",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "the-select-statement-coordination-center",
        "title": "The `select` Statement: Coordination Center",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "the-problem-blocking-operations",
        "title": "The Problem: Blocking Operations",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "enter-the-default-case-the-non-blocking-solution",
        "title": "Enter the Default Case: The Non-Blocking Solution",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "practical-example-1-simple-non-blocking-receive",
        "title": "Practical Example 1: Simple Non-Blocking Receive",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "practical-example-2-non-blocking-send",
        "title": "Practical Example 2: Non-Blocking Send",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "practical-example-3-timeout-pattern",
        "title": "Practical Example 3: Timeout Pattern",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "practical-example-4-periodic-non-blocking-check",
        "title": "Practical Example 4: Periodic Non-Blocking Check",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "understanding-the-mechanics-behind-non-blocking-operations",
        "title": "Understanding the Mechanics Behind Non-Blocking Operations",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "common-use-cases-for-non-blocking-operations",
        "title": "Common Use Cases for Non-Blocking Operations",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "practical-example-5-worker-pool-with-non-blocking-task-distribution",
        "title": "Practical Example 5: Worker Pool with Non-Blocking Task Distribution",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "pitfalls-and-best-practices",
        "title": "Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 91
      }
    ],
    "totalWordCount": 986,
    "estimatedReadingTime": 240000,
    "title": "default_case_for_non_blocking_operations",
    "frontmatter": {}
  },
  "public\\content\\go\\select_statement_patterns\\breaking_from_infinite_select_loops.md": {
    "path": "public\\content\\go\\select_statement_patterns\\breaking_from_infinite_select_loops.md",
    "sections": [
      {
        "id": "breaking-from-infinite-select-loops-in-go-a-first-principles-approach",
        "title": "Breaking from Infinite Select Loops in Go: A First Principles Approach",
        "level": 1,
        "wordCount": 43
      },
      {
        "id": "understanding-select-in-go-the-foundations",
        "title": "Understanding Select in Go: The Foundations",
        "level": 2,
        "wordCount": 188
      },
      {
        "id": "breaking-from-infinite-select-loops",
        "title": "Breaking from Infinite Select Loops",
        "level": 2,
        "wordCount": 460
      },
      {
        "id": "advanced-patterns-and-practical-considerations",
        "title": "Advanced Patterns and Practical Considerations",
        "level": 2,
        "wordCount": 176
      },
      {
        "id": "common-mistakes-and-troubleshooting",
        "title": "Common Mistakes and Troubleshooting",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 151
      }
    ],
    "totalWordCount": 1081,
    "estimatedReadingTime": 300000,
    "title": "breaking_from_infinite_select_loops",
    "frontmatter": {}
  },
  "public\\content\\go\\memory_model\\weak_vs_strong_memory_ordering.md": {
    "path": "public\\content\\go\\memory_model\\weak_vs_strong_memory_ordering.md",
    "sections": [
      {
        "id": "memory-ordering-in-go-weak-vs-strong-from-first-principles",
        "title": "Memory Ordering in Go: Weak vs. Strong from First Principles",
        "level": 1,
        "wordCount": 48
      },
      {
        "id": "the-foundation-memory-and-processors",
        "title": "The Foundation: Memory and Processors",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "memory-reordering-why-it-happens",
        "title": "Memory Reordering: Why It Happens",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "weak-vs-strong-memory-ordering-core-concepts",
        "title": "Weak vs. Strong Memory Ordering: Core Concepts",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "gos-memory-model",
        "title": "Go's Memory Model",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "practical-consequences-of-gos-memory-model",
        "title": "Practical Consequences of Go's Memory Model",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "practical-memory-ordering-issue-the-double-checked-locking-problem",
        "title": "Practical Memory Ordering Issue: The Double-Checked Locking Problem",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "memory-barriers-and-fences",
        "title": "Memory Barriers and Fences",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "examples-of-weak-vs-strong-ordering-in-practice",
        "title": "Examples of Weak vs. Strong Ordering in Practice",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "comparing-memory-models-go-vs-other-languages",
        "title": "Comparing Memory Models: Go vs. Other Languages",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "best-practices-for-go-programmers",
        "title": "Best Practices for Go Programmers",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "common-pitfalls",
        "title": "Common Pitfalls",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 84
      }
    ],
    "totalWordCount": 1025,
    "estimatedReadingTime": 300000,
    "title": "weak_vs_strong_memory_ordering",
    "frontmatter": {}
  },
  "public\\content\\go\\memory_model\\synchronizing_access_to_shared_memory.md": {
    "path": "public\\content\\go\\memory_model\\synchronizing_access_to_shared_memory.md",
    "sections": [
      {
        "id": "synchronizing-access-to-shared-memory-in-go",
        "title": "Synchronizing Access to Shared Memory in Go",
        "level": 1,
        "wordCount": 62
      },
      {
        "id": "the-fundamental-problem-race-conditions",
        "title": "The Fundamental Problem: Race Conditions",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "first-synchronization-tool-mutexes",
        "title": "First Synchronization Tool: Mutexes",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "read-write-mutex-for-better-performance",
        "title": "Read-Write Mutex for Better Performance",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "atomic-operations-for-simple-cases",
        "title": "Atomic Operations for Simple Cases",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "channels-gos-higher-level-synchronization-primitive",
        "title": "Channels: Go's Higher-Level Synchronization Primitive",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "synconce-for-one-time-initialization",
        "title": "Sync.Once for One-Time Initialization",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "wait-groups-for-goroutine-synchronization",
        "title": "Wait Groups for Goroutine Synchronization",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "context-for-cancellation-and-deadlines",
        "title": "Context for Cancellation and Deadlines",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "understanding-memory-visibility",
        "title": "Understanding Memory Visibility",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "common-pitfalls-and-patterns",
        "title": "Common Pitfalls and Patterns",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "real-world-example-thread-safe-counter",
        "title": "Real-World Example: Thread-Safe Counter",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 128
      }
    ],
    "totalWordCount": 1149,
    "estimatedReadingTime": 300000,
    "title": "synchronizing_access_to_shared_memory",
    "frontmatter": {}
  },
  "public\\content\\go\\memory_model\\memory_reordering_effects.md": {
    "path": "public\\content\\go\\memory_model\\memory_reordering_effects.md",
    "sections": [
      {
        "id": "golang-memory-reordering-effects-a-first-principles-explanation",
        "title": "Golang Memory Reordering Effects: A First Principles Explanation",
        "level": 1,
        "wordCount": 57
      },
      {
        "id": "what-is-memory-and-how-does-it-work",
        "title": "What Is Memory and How Does It Work?",
        "level": 2,
        "wordCount": 228
      },
      {
        "id": "what-is-memory-reordering",
        "title": "What Is Memory Reordering?",
        "level": 2,
        "wordCount": 136
      },
      {
        "id": "concurrency-and-memory-reordering",
        "title": "Concurrency and Memory Reordering",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "memory-models-defining-the-rules",
        "title": "Memory Models: Defining the Rules",
        "level": 2,
        "wordCount": 180
      },
      {
        "id": "practical-effects-of-memory-reordering-in-go",
        "title": "Practical Effects of Memory Reordering in Go",
        "level": 2,
        "wordCount": 182
      },
      {
        "id": "the-role-of-memory-barriers",
        "title": "The Role of Memory Barriers",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "weak-vs-strong-memory-models",
        "title": "Weak vs. Strong Memory Models",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "practical-guidelines-for-go-programmers",
        "title": "Practical Guidelines for Go Programmers",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "memory-reordering-and-optimizations",
        "title": "Memory Reordering and Optimizations",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 125
      }
    ],
    "totalWordCount": 1409,
    "estimatedReadingTime": 360000,
    "title": "memory_reordering_effects",
    "frontmatter": {}
  },
  "public\\content\\go\\memory_model\\memory_model_edge_cases_and_pitfalls.md": {
    "path": "public\\content\\go\\memory_model\\memory_model_edge_cases_and_pitfalls.md",
    "sections": [
      {
        "id": "gos-memory-model-edge-cases-and-pitfalls-from-first-principles",
        "title": "Go's Memory Model: Edge Cases and Pitfalls from First Principles",
        "level": 1,
        "wordCount": 48
      },
      {
        "id": "the-foundation-memory-access-in-concurrent-programming",
        "title": "The Foundation: Memory Access in Concurrent Programming",
        "level": 2,
        "wordCount": 143
      },
      {
        "id": "gos-memory-model-guarantees",
        "title": "Go's Memory Model Guarantees",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "pitfall-1-no-synchronization-between-goroutines",
        "title": "Pitfall 1: No Synchronization Between Goroutines",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "pitfall-2-improper-loop-variable-capture",
        "title": "Pitfall 2: Improper Loop Variable Capture",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "pitfall-3-assuming-visibility-without-synchronization",
        "title": "Pitfall 3: Assuming Visibility Without Synchronization",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "pitfall-4-the-volatile-keyword-doesnt-exist-in-go",
        "title": "Pitfall 4: The Volatile Keyword Doesn't Exist in Go",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "pitfall-5-data-races",
        "title": "Pitfall 5: Data Races",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "pitfall-6-false-sharing",
        "title": "Pitfall 6: False Sharing",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "pitfall-7-channel-misuse",
        "title": "Pitfall 7: Channel Misuse",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "pitfall-8-memory-barriers-and-hardware-considerations",
        "title": "Pitfall 8: Memory Barriers and Hardware Considerations",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "best-practices-for-gos-memory-model",
        "title": "Best Practices for Go's Memory Model",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 112
      }
    ],
    "totalWordCount": 1138,
    "estimatedReadingTime": 300000,
    "title": "memory_model_edge_cases_and_pitfalls",
    "frontmatter": {}
  },
  "public\\content\\go\\memory_model\\memory_fences_and_barriers_in_go.md": {
    "path": "public\\content\\go\\memory_model\\memory_fences_and_barriers_in_go.md",
    "sections": [
      {
        "id": "memory-fences-and-barriers-in-go-from-first-principles",
        "title": "Memory Fences and Barriers in Go from First Principles",
        "level": 1,
        "wordCount": 51
      },
      {
        "id": "1-the-foundation-memory-and-processors",
        "title": "1. The Foundation: Memory and Processors",
        "level": 2,
        "wordCount": 232
      },
      {
        "id": "2-the-problem-memory-consistency",
        "title": "2. The Problem: Memory Consistency",
        "level": 2,
        "wordCount": 177
      },
      {
        "id": "3-memory-barriers-the-solution",
        "title": "3. Memory Barriers: The Solution",
        "level": 2,
        "wordCount": 142
      },
      {
        "id": "4-memory-synchronization-in-go",
        "title": "4. Memory Synchronization in Go",
        "level": 2,
        "wordCount": 260
      },
      {
        "id": "5-the-syncatomic-package-in-depth",
        "title": "5. The sync/atomic Package in Depth",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "6-memory-ordering-in-go-examples-and-patterns",
        "title": "6. Memory Ordering in Go: Examples and Patterns",
        "level": 2,
        "wordCount": 154
      },
      {
        "id": "7-real-world-examples-and-common-pitfalls",
        "title": "7. Real-World Examples and Common Pitfalls",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "8-advanced-concepts",
        "title": "8. Advanced Concepts",
        "level": 2,
        "wordCount": 149
      },
      {
        "id": "9-best-practices",
        "title": "9. Best Practices",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "10-conclusion-and-further-learning",
        "title": "10. Conclusion and Further Learning",
        "level": 2,
        "wordCount": 162
      }
    ],
    "totalWordCount": 1522,
    "estimatedReadingTime": 420000,
    "title": "memory_fences_and_barriers_in_go",
    "frontmatter": {}
  },
  "public\\content\\go\\memory_model\\lock_free_programming_considerations.md": {
    "path": "public\\content\\go\\memory_model\\lock_free_programming_considerations.md",
    "sections": [
      {
        "id": "lock-free-programming-in-go-from-first-principles",
        "title": "Lock-Free Programming in Go: From First Principles",
        "level": 1,
        "wordCount": 40
      },
      {
        "id": "understanding-concurrency-fundamentals",
        "title": "Understanding Concurrency Fundamentals",
        "level": 2,
        "wordCount": 136
      },
      {
        "id": "traditional-solutions-locks-and-mutexes",
        "title": "Traditional Solutions: Locks and Mutexes",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "enter-lock-free-programming",
        "title": "Enter Lock-Free Programming",
        "level": 2,
        "wordCount": 152
      },
      {
        "id": "lock-free-data-structures-in-go",
        "title": "Lock-Free Data Structures in Go",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "the-aba-problem",
        "title": "The ABA Problem",
        "level": 2,
        "wordCount": 161
      },
      {
        "id": "wait-free-vs-lock-free",
        "title": "Wait-Free vs. Lock-Free",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "memory-ordering-and-memory-models",
        "title": "Memory Ordering and Memory Models",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "performance-considerations-in-go",
        "title": "Performance Considerations in Go",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "common-lock-free-patterns-in-go",
        "title": "Common Lock-Free Patterns in Go",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "real-world-considerations",
        "title": "Real-World Considerations",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 104
      }
    ],
    "totalWordCount": 1135,
    "estimatedReadingTime": 300000,
    "title": "lock_free_programming_considerations",
    "frontmatter": {}
  },
  "public\\content\\go\\memory_model\\happens_before_relationships.md": {
    "path": "public\\content\\go\\memory_model\\happens_before_relationships.md",
    "sections": [
      {
        "id": "golang-happens-before-relationships-a-first-principles-explanation",
        "title": "Golang Happens-Before Relationships: A First Principles Explanation",
        "level": 1,
        "wordCount": 27
      },
      {
        "id": "the-foundation-memory-and-execution-order",
        "title": "The Foundation: Memory and Execution Order",
        "level": 2,
        "wordCount": 168
      },
      {
        "id": "happens-before-the-key-to-memory-visibility",
        "title": "Happens-Before: The Key to Memory Visibility",
        "level": 2,
        "wordCount": 412
      },
      {
        "id": "init-functions-happens-before",
        "title": "Init Functions Happens-Before",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "atomic-operations-happens-before",
        "title": "Atomic Operations Happens-Before",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "practical-implications-of-happens-before",
        "title": "Practical Implications of Happens-Before",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "common-mistakes-and-pitfalls",
        "title": "Common Mistakes and Pitfalls",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "memory-models-and-language-specifics",
        "title": "Memory Models and Language Specifics",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 111
      }
    ],
    "totalWordCount": 1007,
    "estimatedReadingTime": 300000,
    "title": "happens_before_relationships",
    "frontmatter": {}
  },
  "public\\content\\go\\memory_model\\go_memory_model_specification.md": {
    "path": "public\\content\\go\\memory_model\\go_memory_model_specification.md",
    "sections": [
      {
        "id": "gos-memory-model-specification-from-first-principles",
        "title": "Go's Memory Model Specification: From First Principles",
        "level": 1,
        "wordCount": 67
      },
      {
        "id": "1-what-is-a-memory-model",
        "title": "1. What is a Memory Model?",
        "level": 2,
        "wordCount": 187
      },
      {
        "id": "2-gos-happens-before-relationship",
        "title": "2. Go's Happens-Before Relationship",
        "level": 2,
        "wordCount": 134
      },
      {
        "id": "3-program-order-vs-execution-order",
        "title": "3. Program Order vs. Execution Order",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "4-gos-synchronization-mechanisms",
        "title": "4. Go's Synchronization Mechanisms",
        "level": 2,
        "wordCount": 235
      },
      {
        "id": "5-atomic-operations",
        "title": "5. Atomic Operations",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "6-the-syncmap",
        "title": "6. The sync.Map",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "7-initialization-guarantees",
        "title": "7. Initialization Guarantees",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "8-race-conditions-and-data-races",
        "title": "8. Race Conditions and Data Races",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "9-memory-ordering-relaxed-vs-sequential-consistency",
        "title": "9. Memory Ordering: Relaxed vs. Sequential Consistency",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "10-fences-and-memory-barriers",
        "title": "10. Fences and Memory Barriers",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "11-advanced-example-the-lazy-initialization-pattern",
        "title": "11. Advanced Example: The Lazy Initialization Pattern",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "12-gos-memory-model-documentation",
        "title": "12. Go's Memory Model Documentation",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "13-best-practices-for-writing-concurrent-go-code",
        "title": "13. Best Practices for Writing Concurrent Go Code",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 144
      }
    ],
    "totalWordCount": 1582,
    "estimatedReadingTime": 420000,
    "title": "go_memory_model_specification",
    "frontmatter": {}
  },
  "public\\content\\go\\memory_model\\cache_coherence_implications.md": {
    "path": "public\\content\\go\\memory_model\\cache_coherence_implications.md",
    "sections": [
      {
        "id": "cache-coherence-in-go-a-first-principles-exploration",
        "title": "Cache Coherence in Go: A First Principles Exploration",
        "level": 1,
        "wordCount": 42
      },
      {
        "id": "what-is-a-cache",
        "title": "What is a Cache?",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "why-caches-exist-the-memory-hierarchy",
        "title": "Why Caches Exist: The Memory Hierarchy",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "the-cache-coherence-problem",
        "title": "The Cache Coherence Problem",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "cache-coherence-protocols",
        "title": "Cache Coherence Protocols",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "go-and-memory-models",
        "title": "Go and Memory Models",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "gos-approach-to-cache-coherence",
        "title": "Go's Approach to Cache Coherence",
        "level": 2,
        "wordCount": 174
      },
      {
        "id": "false-sharing-a-cache-coherence-performance-issue",
        "title": "False Sharing: A Cache Coherence Performance Issue",
        "level": 2,
        "wordCount": 146
      },
      {
        "id": "memory-ordering-in-go",
        "title": "Memory Ordering in Go",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "practical-implications-for-go-developers",
        "title": "Practical Implications for Go Developers",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 118
      }
    ],
    "totalWordCount": 1221,
    "estimatedReadingTime": 300000,
    "title": "cache_coherence_implications",
    "frontmatter": {}
  },
  "public\\content\\go\\memory_model\\atomicity_visibility_and_ordering_guarantees.md": {
    "path": "public\\content\\go\\memory_model\\atomicity_visibility_and_ordering_guarantees.md",
    "sections": [
      {
        "id": "golang-atomicity-visibility-and-ordering-guarantees-from-first-principles",
        "title": "Golang Atomicity, Visibility, and Ordering Guarantees: From First Principles",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "1-understanding-memory-in-modern-computers",
        "title": "1. Understanding Memory in Modern Computers",
        "level": 2,
        "wordCount": 433
      },
      {
        "id": "2-gos-memory-model",
        "title": "2. Go's Memory Model",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "3-atomic-operations-in-go",
        "title": "3. Atomic Operations in Go",
        "level": 2,
        "wordCount": 139
      },
      {
        "id": "4-mutexes-for-atomicity",
        "title": "4. Mutexes for Atomicity",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "5-channels-for-communication-and-synchronization",
        "title": "5. Channels for Communication and Synchronization",
        "level": 2,
        "wordCount": 170
      },
      {
        "id": "6-waitgroups-for-coordination",
        "title": "6. WaitGroups for Coordination",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "7-once-for-one-time-initialization",
        "title": "7. Once for One-Time Initialization",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "8-combining-synchronization-mechanisms",
        "title": "8. Combining Synchronization Mechanisms",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "9-common-pitfalls-and-best-practices",
        "title": "9. Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 193
      },
      {
        "id": "10-real-world-example-a-thread-safe-cache",
        "title": "10. Real-World Example: A Thread-Safe Cache",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 145
      }
    ],
    "totalWordCount": 1586,
    "estimatedReadingTime": 420000,
    "title": "atomicity_visibility_and_ordering_guarantees",
    "frontmatter": {}
  },
  "public\\content\\go\\go_scheduler_internals\\work_stealing_algorithm_details.md": {
    "path": "public\\content\\go\\go_scheduler_internals\\work_stealing_algorithm_details.md",
    "sections": [
      {
        "id": "gos-work-stealing-algorithm-a-first-principles-explanation",
        "title": "Go's Work Stealing Algorithm: A First Principles Explanation",
        "level": 1,
        "wordCount": 42
      },
      {
        "id": "the-problem-concurrent-execution",
        "title": "The Problem: Concurrent Execution",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "core-concepts",
        "title": "Core Concepts",
        "level": 2,
        "wordCount": 219
      },
      {
        "id": "work-stealing-algorithm-first-principles",
        "title": "Work Stealing Algorithm: First Principles",
        "level": 2,
        "wordCount": 410
      },
      {
        "id": "work-stealing-in-action-an-example",
        "title": "Work Stealing in Action: An Example",
        "level": 2,
        "wordCount": 172
      },
      {
        "id": "real-world-complexities",
        "title": "Real-world Complexities",
        "level": 2,
        "wordCount": 172
      },
      {
        "id": "performance-implications",
        "title": "Performance Implications",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "practical-example-parallel-computing",
        "title": "Practical Example: Parallel Computing",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "visualizing-work-stealing",
        "title": "Visualizing Work Stealing",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "common-misconceptions",
        "title": "Common Misconceptions",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 111
      }
    ],
    "totalWordCount": 1580,
    "estimatedReadingTime": 420000,
    "title": "work_stealing_algorithm_details",
    "frontmatter": {}
  },
  "public\\content\\go\\go_scheduler_internals\\system_call_handling_in_the_scheduler.md": {
    "path": "public\\content\\go\\go_scheduler_internals\\system_call_handling_in_the_scheduler.md",
    "sections": [
      {
        "id": "gos-system-call-handling-in-the-scheduler",
        "title": "Go's System Call Handling in the Scheduler",
        "level": 1,
        "wordCount": 32
      },
      {
        "id": "first-principles-what-is-a-system-call",
        "title": "First Principles: What is a System Call?",
        "level": 2,
        "wordCount": 134
      },
      {
        "id": "why-system-calls-matter-in-go",
        "title": "Why System Calls Matter in Go",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "gos-concurrency-model-goroutines-and-os-threads",
        "title": "Go's Concurrency Model: Goroutines and OS Threads",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "the-go-scheduler-m-p-and-g",
        "title": "The Go Scheduler: M, P, and G",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "system-call-handling-in-the-go-scheduler",
        "title": "System Call Handling in the Go Scheduler",
        "level": 2,
        "wordCount": 417
      },
      {
        "id": "syscall-package-vs-gos-internal-handling",
        "title": "Syscall Package vs. Go's Internal Handling",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "the-work-stealing-scheduler",
        "title": "The Work-Stealing Scheduler",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "practical-example-concurrent-file-processing",
        "title": "Practical Example: Concurrent File Processing",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "sysmon-the-system-monitor-thread",
        "title": "Sysmon: The System Monitor Thread",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "advanced-topic-asynchronous-preemption",
        "title": "Advanced Topic: Asynchronous Preemption",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "viewing-gos-scheduler-in-action",
        "title": "Viewing Go's Scheduler in Action",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 154
      }
    ],
    "totalWordCount": 1569,
    "estimatedReadingTime": 420000,
    "title": "system_call_handling_in_the_scheduler",
    "frontmatter": {}
  },
  "public\\content\\go\\go_scheduler_internals\\scheduler_tracing_and_visualization.md": {
    "path": "public\\content\\go\\go_scheduler_internals\\scheduler_tracing_and_visualization.md",
    "sections": [
      {
        "id": "go-scheduler-tracing-and-visualization-from-first-principles",
        "title": "Go Scheduler Tracing and Visualization from First Principles",
        "level": 1,
        "wordCount": 29
      },
      {
        "id": "1-what-is-a-scheduler",
        "title": "1. What Is a Scheduler?",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "2-the-go-runtime-scheduler",
        "title": "2. The Go Runtime Scheduler",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "3-why-trace-the-scheduler",
        "title": "3. Why Trace the Scheduler?",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "4-gos-execution-tracer",
        "title": "4. Go's Execution Tracer",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "5-generating-trace-data",
        "title": "5. Generating Trace Data",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "6-analyzing-trace-data",
        "title": "6. Analyzing Trace Data",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "7-understanding-the-trace-visualization",
        "title": "7. Understanding the Trace Visualization",
        "level": 2,
        "wordCount": 142
      },
      {
        "id": "8-diving-deeper-what-events-are-traced",
        "title": "8. Diving Deeper: What Events Are Traced?",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "9-practical-example-diagnosing-a-scheduler-bottleneck",
        "title": "9. Practical Example: Diagnosing a Scheduler Bottleneck",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "10-trace-annotations-custom-events",
        "title": "10. Trace Annotations: Custom Events",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "11-common-patterns-and-what-they-mean",
        "title": "11. Common Patterns and What They Mean",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "12-advanced-tracing-with-pprof",
        "title": "12. Advanced Tracing with pprof",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "13-real-world-optimization-example",
        "title": "13. Real-World Optimization Example",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "14-limitations-of-gos-tracer",
        "title": "14. Limitations of Go's Tracer",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "15-third-party-visualization-tools",
        "title": "15. Third-Party Visualization Tools",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 82
      }
    ],
    "totalWordCount": 1142,
    "estimatedReadingTime": 300000,
    "title": "scheduler_tracing_and_visualization",
    "frontmatter": {}
  },
  "public\\content\\go\\go_scheduler_internals\\scheduler_optimizations_over_go_versions.md": {
    "path": "public\\content\\go\\go_scheduler_internals\\scheduler_optimizations_over_go_versions.md",
    "sections": [
      {
        "id": "go-scheduler-evolution-first-principles-to-modern-optimizations",
        "title": "Go Scheduler Evolution: First Principles to Modern Optimizations",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "first-principles-what-is-a-scheduler",
        "title": "First Principles: What Is a Scheduler?",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "go-10-the-original-scheduler",
        "title": "Go 1.0: The Original Scheduler",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "go-11-introduction-of-work-stealing-scheduler",
        "title": "Go 1.1: Introduction of Work-Stealing Scheduler",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "go-12-14-incremental-improvements",
        "title": "Go 1.2-1.4: Incremental Improvements",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "go-15-runtime-rewrite-in-go",
        "title": "Go 1.5: Runtime Rewrite in Go",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "go-17-improvements-to-stealing",
        "title": "Go 1.7: Improvements to Stealing",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "go-18-faster-goroutine-creation",
        "title": "Go 1.8: Faster Goroutine Creation",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "go-110-113-enhanced-scheduler-instrumentation",
        "title": "Go 1.10-1.13: Enhanced Scheduler Instrumentation",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "go-114-asynchronous-preemption",
        "title": "Go 1.14: Asynchronous Preemption",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "go-116-117-scheduler-efficiency-improvements",
        "title": "Go 1.16-1.17: Scheduler Efficiency Improvements",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "go-118-significant-scheduler-improvements",
        "title": "Go 1.18: Significant Scheduler Improvements",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "go-119-121-scalability-and-performance",
        "title": "Go 1.19-1.21: Scalability and Performance",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "core-scheduling-optimizations-across-versions",
        "title": "Core Scheduling Optimizations Across Versions",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "practical-impact-of-scheduler-improvements",
        "title": "Practical Impact of Scheduler Improvements",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "a-simple-real-world-example",
        "title": "A Simple Real-World Example",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 134
      }
    ],
    "totalWordCount": 1203,
    "estimatedReadingTime": 300000,
    "title": "scheduler_optimizations_over_go_versions",
    "frontmatter": {}
  },
  "public\\content\\go\\go_scheduler_internals\\processor_machine_and_goroutine.md": {
    "path": "public\\content\\go\\go_scheduler_internals\\processor_machine_and_goroutine.md",
    "sections": [
      {
        "id": "understanding-gos-concurrency-model-p-m-and-g-from-first-principles",
        "title": "Understanding Go's Concurrency Model: P, M, and G from First Principles",
        "level": 1,
        "wordCount": 55
      },
      {
        "id": "the-fundamental-problem-concurrency-vs-parallelism",
        "title": "The Fundamental Problem: Concurrency vs. Parallelism",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "gos-solution-the-three-component-model",
        "title": "Go's Solution: The Three-Component Model",
        "level": 2,
        "wordCount": 460
      },
      {
        "id": "how-p-m-and-g-work-together-the-scheduler-dance",
        "title": "How P, M, and G Work Together: The Scheduler Dance",
        "level": 2,
        "wordCount": 384
      },
      {
        "id": "channel-communication-orchestrating-goroutines",
        "title": "Channel Communication: Orchestrating Goroutines",
        "level": 2,
        "wordCount": 174
      },
      {
        "id": "advanced-scheduler-behaviors",
        "title": "Advanced Scheduler Behaviors",
        "level": 2,
        "wordCount": 192
      },
      {
        "id": "practical-implications-for-go-developers",
        "title": "Practical Implications for Go Developers",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "under-the-hood-the-go-runtime-implementation",
        "title": "Under the Hood: The Go Runtime Implementation",
        "level": 2,
        "wordCount": 126
      },
      {
        "id": "conclusion-the-elegance-of-gos-concurrency-model",
        "title": "Conclusion: The Elegance of Go's Concurrency Model",
        "level": 2,
        "wordCount": 136
      }
    ],
    "totalWordCount": 1765,
    "estimatedReadingTime": 480000,
    "title": "processor_machine_and_goroutine",
    "frontmatter": {}
  },
  "public\\content\\go\\go_scheduler_internals\\preemption_in_the_go_scheduler.md": {
    "path": "public\\content\\go\\go_scheduler_internals\\preemption_in_the_go_scheduler.md",
    "sections": [
      {
        "id": "gos-preemption-in-the-scheduler-from-first-principles",
        "title": "Go's Preemption in the Scheduler: From First Principles",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "understanding-concurrency-the-foundation",
        "title": "Understanding Concurrency: The Foundation",
        "level": 2,
        "wordCount": 160
      },
      {
        "id": "the-go-scheduler-managing-goroutines",
        "title": "The Go Scheduler: Managing Goroutines",
        "level": 2,
        "wordCount": 136
      },
      {
        "id": "understanding-preemption-the-core-concept",
        "title": "Understanding Preemption: The Core Concept",
        "level": 2,
        "wordCount": 132
      },
      {
        "id": "the-evolution-of-preemption-in-go",
        "title": "The Evolution of Preemption in Go",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "how-does-modern-go-preemption-work",
        "title": "How Does Modern Go Preemption Work?",
        "level": 2,
        "wordCount": 189
      },
      {
        "id": "practical-implications-of-gos-preemption-model",
        "title": "Practical Implications of Go's Preemption Model",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "practical-examples-seeing-preemption-in-action",
        "title": "Practical Examples: Seeing Preemption in Action",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "visualizing-the-go-scheduler-with-traces",
        "title": "Visualizing the Go Scheduler with Traces",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "advanced-preemption-topics",
        "title": "Advanced Preemption Topics",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "common-preemption-related-issues-and-solutions",
        "title": "Common Preemption-Related Issues and Solutions",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "comparing-gos-preemption-with-other-languages",
        "title": "Comparing Go's Preemption with Other Languages",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 130
      }
    ],
    "totalWordCount": 1375,
    "estimatedReadingTime": 360000,
    "title": "preemption_in_the_go_scheduler",
    "frontmatter": {}
  },
  "public\\content\\go\\go_scheduler_internals\\performance_tuning_for_the_scheduler.md": {
    "path": "public\\content\\go\\go_scheduler_internals\\performance_tuning_for_the_scheduler.md",
    "sections": [
      {
        "id": "go-scheduler-performance-tuning-from-first-principles",
        "title": "Go Scheduler Performance Tuning: From First Principles",
        "level": 1,
        "wordCount": 48
      },
      {
        "id": "what-is-the-go-scheduler",
        "title": "What is the Go Scheduler?",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "the-gmp-model-gos-runtime-architecture",
        "title": "The GMP Model: Go's Runtime Architecture",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "first-principles-of-scheduler-performance",
        "title": "First Principles of Scheduler Performance",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "key-tuning-parameters",
        "title": "Key Tuning Parameters",
        "level": 2,
        "wordCount": 198
      },
      {
        "id": "performance-tuning-strategies",
        "title": "Performance Tuning Strategies",
        "level": 2,
        "wordCount": 243
      },
      {
        "id": "advanced-tuning-understanding-scheduler-traces",
        "title": "Advanced Tuning: Understanding Scheduler Traces",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "real-world-optimization-examples",
        "title": "Real-World Optimization Examples",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "scheduler-specific-performance-traps",
        "title": "Scheduler-Specific Performance Traps",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "conclusion-a-systematic-approach-to-go-scheduler-tuning",
        "title": "Conclusion: A Systematic Approach to Go Scheduler Tuning",
        "level": 2,
        "wordCount": 106
      }
    ],
    "totalWordCount": 1140,
    "estimatedReadingTime": 300000,
    "title": "performance_tuning_for_the_scheduler",
    "frontmatter": {}
  },
  "public\\content\\go\\go_scheduler_internals\\go_scheduler_design_and_implementation.md": {
    "path": "public\\content\\go\\go_scheduler_internals\\go_scheduler_design_and_implementation.md",
    "sections": [
      {
        "id": "go-scheduler-design-and-implementation-from-first-principles",
        "title": "Go Scheduler: Design and Implementation from First Principles",
        "level": 1,
        "wordCount": 27
      },
      {
        "id": "1-what-is-a-scheduler",
        "title": "1. What is a Scheduler?",
        "level": 2,
        "wordCount": 158
      },
      {
        "id": "2-gos-concurrency-model-why-a-custom-scheduler",
        "title": "2. Go's Concurrency Model: Why a Custom Scheduler?",
        "level": 2,
        "wordCount": 218
      },
      {
        "id": "3-core-design-principles-of-gos-scheduler",
        "title": "3. Core Design Principles of Go's Scheduler",
        "level": 2,
        "wordCount": 187
      },
      {
        "id": "4-components-of-gos-scheduler",
        "title": "4. Components of Go's Scheduler",
        "level": 2,
        "wordCount": 242
      },
      {
        "id": "5-the-schedulers-algorithm-in-action",
        "title": "5. The Scheduler's Algorithm in Action",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "6-key-scheduling-events",
        "title": "6. Key Scheduling Events",
        "level": 2,
        "wordCount": 151
      },
      {
        "id": "7-scheduler-optimizations",
        "title": "7. Scheduler Optimizations",
        "level": 2,
        "wordCount": 139
      },
      {
        "id": "8-scheduler-evolution",
        "title": "8. Scheduler Evolution",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "9-practical-implications-for-go-developers",
        "title": "9. Practical Implications for Go Developers",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "10-deep-dive-into-implementation-details",
        "title": "10. Deep Dive into Implementation Details",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "11-advanced-concepts-and-challenges",
        "title": "11. Advanced Concepts and Challenges",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "12-conclusion",
        "title": "12. Conclusion",
        "level": 2,
        "wordCount": 144
      }
    ],
    "totalWordCount": 1848,
    "estimatedReadingTime": 480000,
    "title": "go_scheduler_design_and_implementation",
    "frontmatter": {}
  },
  "public\\content\\go\\go_scheduler_internals\\gomaxprocs_and_cpu_utilization.md": {
    "path": "public\\content\\go\\go_scheduler_internals\\gomaxprocs_and_cpu_utilization.md",
    "sections": [
      {
        "id": "understanding-gomaxprocs-and-cpu-utilization-in-go",
        "title": "Understanding GOMAXPROCS and CPU Utilization in Go",
        "level": 1,
        "wordCount": 30
      },
      {
        "id": "what-is-gomaxprocs",
        "title": "What is GOMAXPROCS?",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "gos-concurrency-model-the-foundation",
        "title": "Go's Concurrency Model: The Foundation",
        "level": 2,
        "wordCount": 154
      },
      {
        "id": "how-gomaxprocs-works",
        "title": "How GOMAXPROCS Works",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "gomaxprocs-and-cpu-cores",
        "title": "GOMAXPROCS and CPU Cores",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "the-go-scheduler-working-with-gomaxprocs",
        "title": "The Go Scheduler: Working with GOMAXPROCS",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "examples-to-understand-gomaxprocs",
        "title": "Examples to Understand GOMAXPROCS",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "when-to-adjust-gomaxprocs",
        "title": "When to Adjust GOMAXPROCS",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "gomaxprocs-in-containerized-environments",
        "title": "GOMAXPROCS in Containerized Environments",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "monitoring-cpu-utilization",
        "title": "Monitoring CPU Utilization",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "advanced-gomaxprocs-considerations",
        "title": "Advanced GOMAXPROCS Considerations",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "real-world-examples",
        "title": "Real-World Examples",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "common-misconceptions-about-gomaxprocs",
        "title": "Common Misconceptions about GOMAXPROCS",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "best-practices-for-gomaxprocs",
        "title": "Best Practices for GOMAXPROCS",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 105
      }
    ],
    "totalWordCount": 1329,
    "estimatedReadingTime": 360000,
    "title": "gomaxprocs_and_cpu_utilization",
    "frontmatter": {}
  },
  "public\\content\\go\\go_scheduler_internals\\cooperative_scheduling_mechanisms.md": {
    "path": "public\\content\\go\\go_scheduler_internals\\cooperative_scheduling_mechanisms.md",
    "sections": [
      {
        "id": "gos-cooperative-scheduling-understanding-from-first-principles",
        "title": "Go's Cooperative Scheduling: Understanding from First Principles",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "what-is-scheduling",
        "title": "What is Scheduling?",
        "level": 2,
        "wordCount": 143
      },
      {
        "id": "gos-runtime-and-scheduling",
        "title": "Go's Runtime and Scheduling",
        "level": 2,
        "wordCount": 254
      },
      {
        "id": "cooperative-scheduling-points-in-go",
        "title": "Cooperative Scheduling Points in Go",
        "level": 2,
        "wordCount": 196
      },
      {
        "id": "the-schedulers-decision-process",
        "title": "The Scheduler's Decision Process",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "asynchronous-preemption-in-modern-go",
        "title": "Asynchronous Preemption in Modern Go",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "why-cooperative-scheduling",
        "title": "Why Cooperative Scheduling?",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "real-world-example-web-server",
        "title": "Real-world Example: Web Server",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "limitations-and-considerations",
        "title": "Limitations and Considerations",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 105
      }
    ],
    "totalWordCount": 1116,
    "estimatedReadingTime": 300000,
    "title": "cooperative_scheduling_mechanisms",
    "frontmatter": {}
  },
  "public\\content\\go\\goroutine_patterns\\stack_traces_and_goroutine_forensics.md": {
    "path": "public\\content\\go\\goroutine_patterns\\stack_traces_and_goroutine_forensics.md",
    "sections": [
      {
        "id": "stack-traces-and-goroutine-forensics-in-go-a-first-principles-approach",
        "title": "Stack Traces and Goroutine Forensics in Go: A First Principles Approach",
        "level": 1,
        "wordCount": 48
      },
      {
        "id": "what-is-a-stack-trace",
        "title": "What Is a Stack Trace?",
        "level": 2,
        "wordCount": 351
      },
      {
        "id": "goroutines-gos-concurrent-execution-model",
        "title": "Goroutines: Go's Concurrent Execution Model",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "goroutine-forensics-diagnosing-issues-in-concurrent-code",
        "title": "Goroutine Forensics: Diagnosing Issues in Concurrent Code",
        "level": 2,
        "wordCount": 201
      },
      {
        "id": "advanced-goroutine-forensics",
        "title": "Advanced Goroutine Forensics",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "common-patterns-in-stack-traces",
        "title": "Common Patterns in Stack Traces",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "practical-goroutine-debugging",
        "title": "Practical Goroutine Debugging",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "best-practices-for-goroutine-management",
        "title": "Best Practices for Goroutine Management",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 127
      }
    ],
    "totalWordCount": 1172,
    "estimatedReadingTime": 300000,
    "title": "stack_traces_and_goroutine_forensics",
    "frontmatter": {}
  },
  "public\\content\\go\\goroutine_patterns\\parent_child_goroutine_relationships.md": {
    "path": "public\\content\\go\\goroutine_patterns\\parent_child_goroutine_relationships.md",
    "sections": [
      {
        "id": "parent-child-goroutine-relationships-in-go",
        "title": "Parent-Child Goroutine Relationships in Go",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "1-what-are-goroutines",
        "title": "1. What Are Goroutines?",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "2-the-parent-child-relationship",
        "title": "2. The Parent-Child Relationship",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "3-goroutine-lifecycles",
        "title": "3. Goroutine Lifecycles",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "4-communication-between-parent-and-child-goroutines",
        "title": "4. Communication Between Parent and Child Goroutines",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "5-managing-multiple-child-goroutines",
        "title": "5. Managing Multiple Child Goroutines",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "6-graceful-termination-of-child-goroutines",
        "title": "6. Graceful Termination of Child Goroutines",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "7-handling-child-goroutine-errors",
        "title": "7. Handling Child Goroutine Errors",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "8-context-based-goroutine-management",
        "title": "8. Context-Based Goroutine Management",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "9-best-practices-for-parent-child-goroutine-relationships",
        "title": "9. Best Practices for Parent-Child Goroutine Relationships",
        "level": 2,
        "wordCount": 136
      },
      {
        "id": "10-advanced-pattern-supervisor-trees",
        "title": "10. Advanced Pattern: Supervisor Trees",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 90
      }
    ],
    "totalWordCount": 1160,
    "estimatedReadingTime": 300000,
    "title": "parent_child_goroutine_relationships",
    "frontmatter": {}
  },
  "public\\content\\go\\goroutine_patterns\\graceful_goroutine_termination.md": {
    "path": "public\\content\\go\\goroutine_patterns\\graceful_goroutine_termination.md",
    "sections": [
      {
        "id": "graceful-goroutine-termination-in-go",
        "title": "Graceful Goroutine Termination in Go",
        "level": 1,
        "wordCount": 50
      },
      {
        "id": "why-goroutine-termination-matters",
        "title": "Why Goroutine Termination Matters",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "core-mechanisms-for-graceful-termination",
        "title": "Core Mechanisms for Graceful Termination",
        "level": 2,
        "wordCount": 192
      },
      {
        "id": "combining-mechanisms-for-robust-termination",
        "title": "Combining Mechanisms for Robust Termination",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "advanced-patterns-for-graceful-termination",
        "title": "Advanced Patterns for Graceful Termination",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "common-pitfalls-and-how-to-avoid-them",
        "title": "Common Pitfalls and How to Avoid Them",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "recommended-patterns-for-different-scenarios",
        "title": "Recommended Patterns for Different Scenarios",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "conclusion-building-a-termination-mindset",
        "title": "Conclusion: Building a Termination Mindset",
        "level": 2,
        "wordCount": 156
      }
    ],
    "totalWordCount": 863,
    "estimatedReadingTime": 240000,
    "title": "graceful_goroutine_termination",
    "frontmatter": {}
  },
  "public\\content\\go\\goroutine_patterns\\goroutine_creation_best_practices.md": {
    "path": "public\\content\\go\\goroutine_patterns\\goroutine_creation_best_practices.md",
    "sections": [
      {
        "id": "goroutine-creation-best-practices",
        "title": "Goroutine Creation Best Practices",
        "level": 1,
        "wordCount": 31
      },
      {
        "id": "what-is-a-goroutine-first-principles",
        "title": "What Is a Goroutine? First Principles",
        "level": 2,
        "wordCount": 164
      },
      {
        "id": "how-goroutines-work",
        "title": "How Goroutines Work",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "best-practices-for-goroutine-creation",
        "title": "Best Practices for Goroutine Creation",
        "level": 2,
        "wordCount": 414
      },
      {
        "id": "practical-example-a-well-structured-http-server",
        "title": "Practical Example: A Well-Structured HTTP Server",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "common-pitfalls-in-goroutine-creation",
        "title": "Common Pitfalls in Goroutine Creation",
        "level": 2,
        "wordCount": 129
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 141
      }
    ],
    "totalWordCount": 1014,
    "estimatedReadingTime": 300000,
    "title": "goroutine_creation_best_practices",
    "frontmatter": {}
  },
  "public\\content\\go\\goroutine_patterns\\debugging_goroutine_issues.md": {
    "path": "public\\content\\go\\goroutine_patterns\\debugging_goroutine_issues.md",
    "sections": [
      {
        "id": "debugging-goroutine-issues-a-first-principles-approach",
        "title": "Debugging Goroutine Issues: A First Principles Approach",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "what-is-a-goroutine",
        "title": "What is a Goroutine?",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "common-goroutine-problems",
        "title": "Common Goroutine Problems",
        "level": 2,
        "wordCount": 173
      },
      {
        "id": "debugging-tools-for-goroutines",
        "title": "Debugging Tools for Goroutines",
        "level": 2,
        "wordCount": 187
      },
      {
        "id": "practical-debugging-process",
        "title": "Practical Debugging Process",
        "level": 2,
        "wordCount": 197
      },
      {
        "id": "example-a-real-world-debugging-case",
        "title": "Example: A Real-World Debugging Case",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "advanced-debugging-techniques",
        "title": "Advanced Debugging Techniques",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "best-practices-to-prevent-goroutine-issues",
        "title": "Best Practices to Prevent Goroutine Issues",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 100
      }
    ],
    "totalWordCount": 1022,
    "estimatedReadingTime": 300000,
    "title": "debugging_goroutine_issues",
    "frontmatter": {}
  },
  "public\\content\\go\\goroutine_patterns\\controlling_goroutine_execution_order.md": {
    "path": "public\\content\\go\\goroutine_patterns\\controlling_goroutine_execution_order.md",
    "sections": [
      {
        "id": "controlling-goroutine-execution-order-in-go",
        "title": "Controlling Goroutine Execution Order in Go",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "what-is-a-goroutine",
        "title": "What is a Goroutine?",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "the-concurrent-execution-problem",
        "title": "The Concurrent Execution Problem",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "first-principles-of-goroutine-synchronization",
        "title": "First Principles of Goroutine Synchronization",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "1-using-timesleep-not-recommended",
        "title": "1. Using `time.Sleep()` (Not Recommended)",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "2-using-syncwaitgroup",
        "title": "2. Using `sync.WaitGroup`",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "3-using-channels-for-sequencing",
        "title": "3. Using Channels for Sequencing",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "4-using-syncmutex-for-controlled-access",
        "title": "4. Using `sync.Mutex` for Controlled Access",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "5-using-a-semaphore-pattern",
        "title": "5. Using a Semaphore Pattern",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "6-using-context-for-coordination",
        "title": "6. Using Context for Coordination",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "7-creating-a-pipeline",
        "title": "7. Creating a Pipeline",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "practical-example-a-web-scraper-with-controlled-execution",
        "title": "Practical Example: A Web Scraper with Controlled Execution",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "advanced-pattern-the-barrier-pattern",
        "title": "Advanced Pattern: The Barrier Pattern",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "key-principles-for-effective-goroutine-control",
        "title": "Key Principles for Effective Goroutine Control",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "common-pitfalls-to-avoid",
        "title": "Common Pitfalls to Avoid",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 107
      }
    ],
    "totalWordCount": 1064,
    "estimatedReadingTime": 300000,
    "title": "controlling_goroutine_execution_order",
    "frontmatter": {}
  },
  "public\\content\\go\\goroutine_patterns\\capturing_variables_in_goroutines.md": {
    "path": "public\\content\\go\\goroutine_patterns\\capturing_variables_in_goroutines.md",
    "sections": [
      {
        "id": "capturing-variables-in-goroutines-a-first-principles-exploration",
        "title": "Capturing Variables in Goroutines: A First Principles Exploration",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "what-is-a-goroutine",
        "title": "What Is a Goroutine?",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "variable-scope-in-go",
        "title": "Variable Scope in Go",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "what-is-variable-capture",
        "title": "What Is Variable Capture?",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "variable-capture-in-goroutines",
        "title": "Variable Capture in Goroutines",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "the-solution-create-a-new-variable-for-each-iteration",
        "title": "The Solution: Create a New Variable for Each Iteration",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "deeper-understanding-through-more-examples",
        "title": "Deeper Understanding Through More Examples",
        "level": 2,
        "wordCount": 132
      },
      {
        "id": "why-does-go-work-this-way",
        "title": "Why Does Go Work This Way?",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "practical-example-a-web-crawler",
        "title": "Practical Example: A Web Crawler",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "understanding-gos-memory-model",
        "title": "Understanding Go's Memory Model",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "summary-and-key-takeaways",
        "title": "Summary and Key Takeaways",
        "level": 2,
        "wordCount": 143
      }
    ],
    "totalWordCount": 955,
    "estimatedReadingTime": 240000,
    "title": "capturing_variables_in_goroutines",
    "frontmatter": {}
  },
  "public\\content\\go\\goroutine_patterns\\benchmarking_goroutine_performance.md": {
    "path": "public\\content\\go\\goroutine_patterns\\benchmarking_goroutine_performance.md",
    "sections": [
      {
        "id": "benchmarking-goroutine-performance-from-first-principles",
        "title": "Benchmarking Goroutine Performance: From First Principles",
        "level": 1,
        "wordCount": 34
      },
      {
        "id": "what-are-goroutines",
        "title": "What Are Goroutines?",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "why-benchmark-goroutines",
        "title": "Why Benchmark Goroutines?",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "the-first-principles-of-benchmarking",
        "title": "The First Principles of Benchmarking",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "gos-built-in-benchmarking-framework",
        "title": "Go's Built-in Benchmarking Framework",
        "level": 2,
        "wordCount": 119
      },
      {
        "id": "benchmarking-goroutine-creation-overhead",
        "title": "Benchmarking Goroutine Creation Overhead",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "benchmarking-goroutine-communication",
        "title": "Benchmarking Goroutine Communication",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "advanced-benchmarking-parallel-execution",
        "title": "Advanced Benchmarking: Parallel Execution",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "measuring-memory-allocation",
        "title": "Measuring Memory Allocation",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "real-world-example-worker-pool-benchmarking",
        "title": "Real-world Example: Worker Pool Benchmarking",
        "level": 2,
        "wordCount": 126
      },
      {
        "id": "common-pitfalls-in-goroutine-benchmarking",
        "title": "Common Pitfalls in Goroutine Benchmarking",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "using-pprof-for-in-depth-analysis",
        "title": "Using pprof for In-depth Analysis",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "measuring-goroutine-context-switching",
        "title": "Measuring Goroutine Context Switching",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "conclusion-a-systematic-approach-to-goroutine-benchmarking",
        "title": "Conclusion: A Systematic Approach to Goroutine Benchmarking",
        "level": 2,
        "wordCount": 185
      }
    ],
    "totalWordCount": 1055,
    "estimatedReadingTime": 300000,
    "title": "benchmarking_goroutine_performance",
    "frontmatter": {}
  },
  "public\\content\\go\\goroutine_patterns\\balancing_goroutine_workloads.md": {
    "path": "public\\content\\go\\goroutine_patterns\\balancing_goroutine_workloads.md",
    "sections": [
      {
        "id": "balancing-goroutine-workloads-a-first-principles-approach",
        "title": "Balancing Goroutine Workloads: A First Principles Approach",
        "level": 1,
        "wordCount": 7
      },
      {
        "id": "understanding-the-foundations",
        "title": "Understanding the Foundations",
        "level": 2,
        "wordCount": 239
      },
      {
        "id": "the-problem-of-workload-distribution",
        "title": "The Problem of Workload Distribution",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "worker-pools-a-balanced-approach",
        "title": "Worker Pools: A Balanced Approach",
        "level": 2,
        "wordCount": 142
      },
      {
        "id": "advanced-workload-balancing-techniques",
        "title": "Advanced Workload Balancing Techniques",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "common-patterns-for-balancing-workloads",
        "title": "Common Patterns for Balancing Workloads",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "practical-considerations-and-pitfalls",
        "title": "Practical Considerations and Pitfalls",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "measuring-and-optimizing-performance",
        "title": "Measuring and Optimizing Performance",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "real-world-example-processing-a-large-dataset",
        "title": "Real-World Example: Processing a Large Dataset",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 102
      }
    ],
    "totalWordCount": 1041,
    "estimatedReadingTime": 300000,
    "title": "balancing_goroutine_workloads",
    "frontmatter": {}
  },
  "public\\content\\go\\goroutine_patterns\\avoiding_goroutine_leaks.md": {
    "path": "public\\content\\go\\goroutine_patterns\\avoiding_goroutine_leaks.md",
    "sections": [
      {
        "id": "avoiding-goroutine-leaks-a-first-principles-approach",
        "title": "Avoiding Goroutine Leaks: A First Principles Approach",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "what-is-a-goroutine",
        "title": "What Is a Goroutine?",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "what-is-a-goroutine-leak",
        "title": "What Is a Goroutine Leak?",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "why-do-goroutines-leak",
        "title": "Why Do Goroutines Leak?",
        "level": 2,
        "wordCount": 212
      },
      {
        "id": "solving-goroutine-leaks-first-principles",
        "title": "Solving Goroutine Leaks: First Principles",
        "level": 2,
        "wordCount": 258
      },
      {
        "id": "advanced-patterns-for-preventing-goroutine-leaks",
        "title": "Advanced Patterns for Preventing Goroutine Leaks",
        "level": 2,
        "wordCount": 183
      },
      {
        "id": "detecting-goroutine-leaks",
        "title": "Detecting Goroutine Leaks",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "real-world-example-http-server-with-proper-goroutine-management",
        "title": "Real-World Example: HTTP Server with Proper Goroutine Management",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 128
      }
    ],
    "totalWordCount": 1200,
    "estimatedReadingTime": 300000,
    "title": "avoiding_goroutine_leaks",
    "frontmatter": {}
  },
  "public\\content\\go\\fundamentals\\variables_and_basic_data_types.md": {
    "path": "public\\content\\go\\fundamentals\\variables_and_basic_data_types.md",
    "sections": [
      {
        "id": "go-golang-variables-constants-and-basic-data-types-a-first-principles-approach",
        "title": "Go (Golang) Variables, Constants, and Basic Data Types: A First-Principles Approach",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "1-variables-the-essence-of-data-storage",
        "title": "1. Variables: The Essence of Data Storage",
        "level": 2,
        "wordCount": 300
      },
      {
        "id": "2-constants-immutable-values",
        "title": "2. Constants: Immutable Values",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "3-basic-data-types",
        "title": "3. Basic Data Types",
        "level": 2,
        "wordCount": 241
      },
      {
        "id": "4-type-conversions",
        "title": "4. Type Conversions",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "5-putting-it-all-together",
        "title": "5. Putting It All Together",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 144
      }
    ],
    "totalWordCount": 966,
    "estimatedReadingTime": 240000,
    "title": "variables_and_basic_data_types",
    "frontmatter": {}
  },
  "public\\content\\go\\fundamentals\\philosophy_and_design_principles.md": {
    "path": "public\\content\\go\\fundamentals\\philosophy_and_design_principles.md",
    "sections": [
      {
        "id": "go-philosophy-and-design-principles",
        "title": "Go Philosophy and Design Principles",
        "level": 1,
        "wordCount": 43
      },
      {
        "id": "the-context-why-go-was-created",
        "title": "The Context: Why Go Was Created",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "core-philosophy-simplicity-above-all",
        "title": "Core Philosophy: Simplicity Above All",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "first-principles-of-go-design",
        "title": "First Principles of Go Design",
        "level": 2,
        "wordCount": 373
      },
      {
        "id": "the-go-proverbs",
        "title": "The Go Proverbs",
        "level": 2,
        "wordCount": 191
      },
      {
        "id": "practical-manifestations-of-go-philosophy",
        "title": "Practical Manifestations of Go Philosophy",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "tradeoffs-in-gos-design",
        "title": "Tradeoffs in Go's Design",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "conclusion-gos-place-in-programming",
        "title": "Conclusion: Go's Place in Programming",
        "level": 2,
        "wordCount": 150
      }
    ],
    "totalWordCount": 1223,
    "estimatedReadingTime": 300000,
    "title": "philosophy_and_design_principles",
    "frontmatter": {}
  },
  "public\\content\\go\\fundamentals\\packages_and_imports.md": {
    "path": "public\\content\\go\\fundamentals\\packages_and_imports.md",
    "sections": [
      {
        "id": "understanding-go-packages-and-imports-from-first-principles",
        "title": "Understanding Go Packages and Imports from First Principles",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "what-is-a-package-in-go",
        "title": "What is a Package in Go?",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "why-do-we-need-packages",
        "title": "Why Do We Need Packages?",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "visibility-rules-in-go-the-capital-letter-principle",
        "title": "Visibility Rules in Go: The Capital Letter Principle",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "the-import-system",
        "title": "The Import System",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "package-naming-conventions",
        "title": "Package Naming Conventions",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "go-modules-the-foundation-of-package-management",
        "title": "Go Modules: The Foundation of Package Management",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "package-organization-patterns",
        "title": "Package Organization Patterns",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "import-aliases-and-the-dot-import",
        "title": "Import Aliases and the Dot Import",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "import-side-effects-the-blank-identifier",
        "title": "Import Side Effects: The Blank Identifier",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "circular-dependencies-a-package-system-constraint",
        "title": "Circular Dependencies: A Package System Constraint",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "standard-library-organization",
        "title": "Standard Library Organization",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "working-with-third-party-packages",
        "title": "Working with Third-Party Packages",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "building-and-distributing-your-own-packages",
        "title": "Building and Distributing Your Own Packages",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "real-world-example-building-a-complete-application",
        "title": "Real-World Example: Building a Complete Application",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 109
      }
    ],
    "totalWordCount": 1233,
    "estimatedReadingTime": 300000,
    "title": "packages_and_imports",
    "frontmatter": {}
  },
  "public\\content\\go\\fundamentals\\go_development_environment.md": {
    "path": "public\\content\\go\\fundamentals\\go_development_environment.md",
    "sections": [
      {
        "id": "setting-up-the-go-development-environment-a-first-principles-approach",
        "title": "Setting Up the Go Development Environment: A First-Principles Approach",
        "level": 1,
        "wordCount": 63
      },
      {
        "id": "understanding-gos-philosophy-of-development",
        "title": "Understanding Go's Philosophy of Development",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "core-components-of-a-go-development-environment",
        "title": "Core Components of a Go Development Environment",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "the-go-toolchain-the-foundation",
        "title": "The Go Toolchain: The Foundation",
        "level": 2,
        "wordCount": 166
      },
      {
        "id": "understanding-gos-workspace-concept",
        "title": "Understanding Go's Workspace Concept",
        "level": 2,
        "wordCount": 227
      },
      {
        "id": "environment-variables-for-go-development",
        "title": "Environment Variables for Go Development",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "setting-up-your-code-editor",
        "title": "Setting Up Your Code Editor",
        "level": 2,
        "wordCount": 216
      },
      {
        "id": "creating-your-first-go-project",
        "title": "Creating Your First Go Project",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "understanding-gos-build-system",
        "title": "Understanding Go's Build System",
        "level": 2,
        "wordCount": 188
      },
      {
        "id": "managing-dependencies-with-go-modules",
        "title": "Managing Dependencies with Go Modules",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "go-tools-for-development",
        "title": "Go Tools for Development",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "debugging-go-code",
        "title": "Debugging Go Code",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "advanced-environment-setup",
        "title": "Advanced Environment Setup",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "project-structure-best-practices",
        "title": "Project Structure Best Practices",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "real-world-development-workflow-example",
        "title": "Real-World Development Workflow Example",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "conclusion-building-your-go-workflow",
        "title": "Conclusion: Building Your Go Workflow",
        "level": 2,
        "wordCount": 185
      }
    ],
    "totalWordCount": 1938,
    "estimatedReadingTime": 480000,
    "title": "go_development_environment",
    "frontmatter": {}
  },
  "public\\content\\go\\fundamentals\\go_compilation_and_execution_model.md": {
    "path": "public\\content\\go\\fundamentals\\go_compilation_and_execution_model.md",
    "sections": [
      {
        "id": "understanding-gos-compilation-and-execution-model",
        "title": "Understanding Go's Compilation and Execution Model",
        "level": 1,
        "wordCount": 29
      },
      {
        "id": "1-what-is-compilation",
        "title": "1. What Is Compilation?",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "2-gos-compilation-process",
        "title": "2. Go's Compilation Process",
        "level": 2,
        "wordCount": 245
      },
      {
        "id": "3-static-compilation-and-linking",
        "title": "3. Static Compilation and Linking",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "4-gos-execution-model",
        "title": "4. Go's Execution Model",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "5-the-go-memory-model",
        "title": "5. The Go Memory Model",
        "level": 2,
        "wordCount": 119
      },
      {
        "id": "6-concurrency-model-goroutines-and-channels",
        "title": "6. Concurrency Model: Goroutines and Channels",
        "level": 2,
        "wordCount": 171
      },
      {
        "id": "7-cross-compilation",
        "title": "7. Cross-Compilation",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "8-build-tags-and-conditional-compilation",
        "title": "8. Build Tags and Conditional Compilation",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "9-toolchain-and-compilation-commands",
        "title": "9. Toolchain and Compilation Commands",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "10-practical-example-compilation-lifecycle",
        "title": "10. Practical Example: Compilation Lifecycle",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 94
      }
    ],
    "totalWordCount": 1171,
    "estimatedReadingTime": 300000,
    "title": "go_compilation_and_execution_model",
    "frontmatter": {}
  },
  "public\\content\\go\\fundamentals\\error_handling_fundamentals.md": {
    "path": "public\\content\\go\\fundamentals\\error_handling_fundamentals.md",
    "sections": [
      {
        "id": "go-error-handling-fundamentals-a-first-principles-approach",
        "title": "Go Error Handling Fundamentals: A First Principles Approach",
        "level": 1,
        "wordCount": 53
      },
      {
        "id": "1-the-nature-of-errors-in-go",
        "title": "1. The Nature of Errors in Go",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "2-returning-errors-from-functions",
        "title": "2. Returning Errors from Functions",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "3-error-handling-patterns",
        "title": "3. Error Handling Patterns",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "4-creating-custom-error-types",
        "title": "4. Creating Custom Error Types",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "5-error-wrapping-with-fmterrorf",
        "title": "5. Error Wrapping with fmt.Errorf",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "6-working-with-wrapped-errors-go-113",
        "title": "6. Working with Wrapped Errors (Go 1.13+)",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "7-sentinel-errors",
        "title": "7. Sentinel Errors",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "8-handling-multiple-error-types",
        "title": "8. Handling Multiple Error Types",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "9-error-handling-in-concurrent-code",
        "title": "9. Error Handling in Concurrent Code",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "10-the-error-function-chain-pattern",
        "title": "10. The Error Function Chain Pattern",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "11-defer-panic-and-recover",
        "title": "11. Defer, Panic, and Recover",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "12-best-practices-for-error-handling-in-go",
        "title": "12. Best Practices for Error Handling in Go",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "13-error-handling-in-http-servers",
        "title": "13. Error Handling in HTTP Servers",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 172
      }
    ],
    "totalWordCount": 1219,
    "estimatedReadingTime": 300000,
    "title": "error_handling_fundamentals",
    "frontmatter": {}
  },
  "public\\content\\go\\fundamentals\\control_structures.md": {
    "path": "public\\content\\go\\fundamentals\\control_structures.md",
    "sections": [
      {
        "id": "go-language-control-structures-if-for-and-switch",
        "title": "Go Language Control Structures: if, for, and switch",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "1-the-if-statement",
        "title": "1. The `if` Statement",
        "level": 2,
        "wordCount": 206
      },
      {
        "id": "2-the-for-loop",
        "title": "2. The `for` Loop",
        "level": 2,
        "wordCount": 297
      },
      {
        "id": "3-the-switch-statement",
        "title": "3. The `switch` Statement",
        "level": 2,
        "wordCount": 209
      },
      {
        "id": "4-practical-examples-and-patterns",
        "title": "4. Practical Examples and Patterns",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "5-best-practices",
        "title": "5. Best Practices",
        "level": 2,
        "wordCount": 135
      }
    ],
    "totalWordCount": 982,
    "estimatedReadingTime": 240000,
    "title": "control_structures",
    "frontmatter": {}
  },
  "public\\content\\go\\fundamentals\\basic_syntax_and_language_structure.md": {
    "path": "public\\content\\go\\fundamentals\\basic_syntax_and_language_structure.md",
    "sections": [
      {
        "id": "go-programming-language-basic-syntax-and-structure",
        "title": "Go Programming Language - Basic Syntax and Structure",
        "level": 1,
        "wordCount": 36
      },
      {
        "id": "1-the-fundamental-building-blocks",
        "title": "1. The Fundamental Building Blocks",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "2-packages-and-imports",
        "title": "2. Packages and Imports",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "3-variables-and-data-types",
        "title": "3. Variables and Data Types",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "4-constants",
        "title": "4. Constants",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "5-functions",
        "title": "5. Functions",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "6-control-structures",
        "title": "6. Control Structures",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "7-composite-types",
        "title": "7. Composite Types",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "8-methods",
        "title": "8. Methods",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "9-interfaces",
        "title": "9. Interfaces",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "10-error-handling",
        "title": "10. Error Handling",
        "level": 2,
        "wordCount": 12
      },
      {
        "id": "11-concurrency",
        "title": "11. Concurrency",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "12-deferred-function-calls",
        "title": "12. Deferred Function Calls",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 123
      }
    ],
    "totalWordCount": 768,
    "estimatedReadingTime": 240000,
    "title": "basic_syntax_and_language_structure",
    "frontmatter": {}
  },
  "public\\content\\go\\core\\type_assertions_and_type_switches.md": {
    "path": "public\\content\\go\\core\\type_assertions_and_type_switches.md",
    "sections": [
      {
        "id": "type-assertions-and-type-switches-in-go",
        "title": "Type Assertions and Type Switches in Go",
        "level": 1,
        "wordCount": 54
      },
      {
        "id": "understanding-interfaces-first",
        "title": "Understanding Interfaces First",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "type-assertions",
        "title": "Type Assertions",
        "level": 2,
        "wordCount": 201
      },
      {
        "id": "type-switches",
        "title": "Type Switches",
        "level": 2,
        "wordCount": 161
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 204
      },
      {
        "id": "understanding-at-a-deeper-level",
        "title": "Understanding at a Deeper Level",
        "level": 2,
        "wordCount": 226
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 142
      }
    ],
    "totalWordCount": 1215,
    "estimatedReadingTime": 300000,
    "title": "type_assertions_and_type_switches",
    "frontmatter": {}
  },
  "public\\content\\go\\core\\structs_and_custom_types.md": {
    "path": "public\\content\\go\\core\\structs_and_custom_types.md",
    "sections": [
      {
        "id": "structs-and-custom-types-in-go-a-first-principles-exploration",
        "title": "Structs and Custom Types in Go: A First Principles Exploration",
        "level": 1,
        "wordCount": 50
      },
      {
        "id": "1-basic-data-organization-why-do-we-need-structs",
        "title": "1. Basic Data Organization: Why Do We Need Structs?",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "2-structs-fundamentals",
        "title": "2. Structs: Fundamentals",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "3-struct-embedding-composition-over-inheritance",
        "title": "3. Struct Embedding: Composition Over Inheritance",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "4-anonymous-structs-when-you-dont-need-reusability",
        "title": "4. Anonymous Structs: When You Don't Need Reusability",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "5-methods-adding-behavior-to-structs",
        "title": "5. Methods: Adding Behavior to Structs",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "6-custom-types-beyond-structs",
        "title": "6. Custom Types Beyond Structs",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "7-type-alias-vs-type-definition",
        "title": "7. Type Alias vs. Type Definition",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "8-exported-vs-unexported-fields",
        "title": "8. Exported vs. Unexported Fields",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "9-tags-metadata-for-struct-fields",
        "title": "9. Tags: Metadata for Struct Fields",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "10-practical-example-building-a-simple-library-system",
        "title": "10. Practical Example: Building a Simple Library System",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "11-common-patterns-and-best-practices",
        "title": "11. Common Patterns and Best Practices",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 104
      }
    ],
    "totalWordCount": 849,
    "estimatedReadingTime": 240000,
    "title": "structs_and_custom_types",
    "frontmatter": {}
  },
  "public\\content\\go\\core\\pointers_and_memory_management.md": {
    "path": "public\\content\\go\\core\\pointers_and_memory_management.md",
    "sections": [
      {
        "id": "pointers-and-memory-management-in-go",
        "title": "Pointers and Memory Management in Go",
        "level": 1,
        "wordCount": 27
      },
      {
        "id": "what-is-memory",
        "title": "What is Memory?",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "what-are-pointers",
        "title": "What Are Pointers?",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "pointers-in-go",
        "title": "Pointers in Go",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "why-use-pointers",
        "title": "Why Use Pointers?",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "pointer-types",
        "title": "Pointer Types",
        "level": 2,
        "wordCount": 27
      },
      {
        "id": "nil-pointers",
        "title": "Nil Pointers",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "memory-allocation-new-and-make",
        "title": "Memory Allocation: new() and make()",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "pointers-to-structs",
        "title": "Pointers to Structs",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "function-receivers-value-vs-pointer",
        "title": "Function Receivers: Value vs. Pointer",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "memory-management-in-go",
        "title": "Memory Management in Go",
        "level": 2,
        "wordCount": 257
      },
      {
        "id": "best-practices-for-pointers-and-memory-management-in-go",
        "title": "Best Practices for Pointers and Memory Management in Go",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "real-world-example-implementing-a-simple-linked-list",
        "title": "Real-World Example: Implementing a Simple Linked List",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 146
      }
    ],
    "totalWordCount": 1259,
    "estimatedReadingTime": 360000,
    "title": "pointers_and_memory_management",
    "frontmatter": {}
  },
  "public\\content\\go\\core\\methods_and_receiver_types.md": {
    "path": "public\\content\\go\\core\\methods_and_receiver_types.md",
    "sections": [
      {
        "id": "go-methods-and-receiver-types-value-vs-pointer-receivers",
        "title": "Go Methods and Receiver Types: Value vs. Pointer Receivers",
        "level": 1,
        "wordCount": 45
      },
      {
        "id": "1-what-are-methods-in-go",
        "title": "1. What Are Methods in Go?",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "2-understanding-receivers-the-foundation",
        "title": "2. Understanding Receivers: The Foundation",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "3-value-receivers-working-with-copies",
        "title": "3. Value Receivers: Working with Copies",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "4-pointer-receivers-working-with-references",
        "title": "4. Pointer Receivers: Working with References",
        "level": 2,
        "wordCount": 144
      },
      {
        "id": "5-gos-special-method-call-syntax",
        "title": "5. Go's Special Method Call Syntax",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "6-method-sets-what-methods-can-be-called",
        "title": "6. Method Sets: What Methods Can Be Called",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "7-deep-example-building-a-banking-system",
        "title": "7. Deep Example: Building a Banking System",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "8-receivers-and-interfaces",
        "title": "8. Receivers and Interfaces",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "9-value-semantics-vs-reference-semantics",
        "title": "9. Value Semantics vs. Reference Semantics",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "10-performance-considerations",
        "title": "10. Performance Considerations",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "11-best-practices-and-guidelines",
        "title": "11. Best Practices and Guidelines",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "12-common-patterns-and-examples",
        "title": "12. Common Patterns and Examples",
        "level": 2,
        "wordCount": 13
      },
      {
        "id": "13-real-world-decision-making",
        "title": "13. Real-World Decision Making",
        "level": 2,
        "wordCount": 143
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 151
      }
    ],
    "totalWordCount": 1312,
    "estimatedReadingTime": 360000,
    "title": "methods_and_receiver_types",
    "frontmatter": {}
  },
  "public\\content\\go\\core\\maps_implementation.md": {
    "path": "public\\content\\go\\core\\maps_implementation.md",
    "sections": [
      {
        "id": "understanding-go-maps-from-first-principles",
        "title": "Understanding Go Maps from First Principles",
        "level": 1,
        "wordCount": 32
      },
      {
        "id": "1-what-is-a-map-the-fundamental-concept",
        "title": "1. What Is a Map? The Fundamental Concept",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "2-gos-map-implementation-the-hashtable",
        "title": "2. Go's Map Implementation: The HashTable",
        "level": 2,
        "wordCount": 168
      },
      {
        "id": "3-map-operations-in-detail",
        "title": "3. Map Operations in Detail",
        "level": 2,
        "wordCount": 173
      },
      {
        "id": "4-map-growth-and-load-factor",
        "title": "4. Map Growth and Load Factor",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "5-performance-characteristics",
        "title": "5. Performance Characteristics",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "6-important-implementation-details",
        "title": "6. Important Implementation Details",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "7-advanced-performance-considerations",
        "title": "7. Advanced Performance Considerations",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "8-common-patterns-and-idioms",
        "title": "8. Common Patterns and Idioms",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "9-practical-examples",
        "title": "9. Practical Examples",
        "level": 2,
        "wordCount": 8
      },
      {
        "id": "10-common-pitfalls-and-best-practices",
        "title": "10. Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 77
      }
    ],
    "totalWordCount": 944,
    "estimatedReadingTime": 240000,
    "title": "maps_implementation",
    "frontmatter": {}
  },
  "public\\content\\go\\core\\interfaces_and_polymorphism.md": {
    "path": "public\\content\\go\\core\\interfaces_and_polymorphism.md",
    "sections": [
      {
        "id": "interfaces-and-polymorphism-in-go",
        "title": "Interfaces and Polymorphism in Go",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "understanding-interfaces-from-first-principles",
        "title": "Understanding Interfaces from First Principles",
        "level": 2,
        "wordCount": 230
      },
      {
        "id": "implicit-interface-implementation",
        "title": "Implicit Interface Implementation",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "the-empty-interface",
        "title": "The Empty Interface",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "type-assertions-and-type-switches",
        "title": "Type Assertions and Type Switches",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "real-world-example-a-simple-format-system",
        "title": "Real-World Example: A Simple Format System",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "interface-composition",
        "title": "Interface Composition",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "the-ioreader-and-iowriter-interfaces",
        "title": "The io.Reader and io.Writer Interfaces",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "interface-values-and-method-sets",
        "title": "Interface Values and Method Sets",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "the-stringer-interface-a-common-use-case",
        "title": "The Stringer Interface: A Common Use Case",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "polymorphism-through-interfaces-a-banking-example",
        "title": "Polymorphism Through Interfaces: A Banking Example",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "best-practices-for-using-interfaces",
        "title": "Best Practices for Using Interfaces",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "advanced-concept-interface-satisfaction-checks",
        "title": "Advanced Concept: Interface Satisfaction Checks",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 166
      }
    ],
    "totalWordCount": 1332,
    "estimatedReadingTime": 360000,
    "title": "interfaces_and_polymorphism",
    "frontmatter": {}
  },
  "public\\content\\go\\core\\garbage_collection_principles.md": {
    "path": "public\\content\\go\\core\\garbage_collection_principles.md",
    "sections": [
      {
        "id": "gos-garbage-collection-understanding-from-first-principles",
        "title": "Go's Garbage Collection: Understanding from First Principles",
        "level": 1,
        "wordCount": 49
      },
      {
        "id": "memory-management-fundamentals",
        "title": "Memory Management Fundamentals",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "what-is-garbage-collection",
        "title": "What is Garbage Collection?",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "gos-garbage-collection-philosophy",
        "title": "Go's Garbage Collection Philosophy",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "the-evolution-of-gos-garbage-collector",
        "title": "The Evolution of Go's Garbage Collector",
        "level": 2,
        "wordCount": 204
      },
      {
        "id": "gos-gc-implementation-details",
        "title": "Go's GC Implementation Details",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "practical-aspects-of-gos-garbage-collection",
        "title": "Practical Aspects of Go's Garbage Collection",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "gc-mechanics-a-practical-example",
        "title": "GC Mechanics: A Practical Example",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "understanding-gc-pauses-and-performance",
        "title": "Understanding GC Pauses and Performance",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "common-misconceptions-about-gos-gc",
        "title": "Common Misconceptions about Go's GC",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "putting-it-all-together-the-gcs-impact-on-go-programs",
        "title": "Putting It All Together: The GC's Impact on Go Programs",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 65
      }
    ],
    "totalWordCount": 970,
    "estimatedReadingTime": 240000,
    "title": "garbage_collection_principles",
    "frontmatter": {}
  },
  "public\\content\\go\\core\\defer_panic_and_recover_mechanisms.md": {
    "path": "public\\content\\go\\core\\defer_panic_and_recover_mechanisms.md",
    "sections": [
      {
        "id": "gos-defer-panic-and-recover-mechanisms-from-first-principles",
        "title": "Go's Defer, Panic, and Recover Mechanisms: From First Principles",
        "level": 1,
        "wordCount": 44
      },
      {
        "id": "defer-function-call-scheduling",
        "title": "Defer: Function Call Scheduling",
        "level": 2,
        "wordCount": 331
      },
      {
        "id": "panic-when-things-go-wrong",
        "title": "Panic: When Things Go Wrong",
        "level": 2,
        "wordCount": 174
      },
      {
        "id": "recover-catching-the-panic",
        "title": "Recover: Catching the Panic",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "putting-it-all-together-practical-examples",
        "title": "Putting It All Together: Practical Examples",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 167
      },
      {
        "id": "understanding-the-mechanics-how-it-works-under-the-hood",
        "title": "Understanding the Mechanics: How It Works Under the Hood",
        "level": 2,
        "wordCount": 169
      },
      {
        "id": "conclusion-the-power-of-the-trio",
        "title": "Conclusion: The Power of the Trio",
        "level": 2,
        "wordCount": 114
      }
    ],
    "totalWordCount": 1218,
    "estimatedReadingTime": 300000,
    "title": "defer_panic_and_recover_mechanisms",
    "frontmatter": {}
  },
  "public\\content\\go\\core\\arrays_slices_and_their_internal_structure.md": {
    "path": "public\\content\\go\\core\\arrays_slices_and_their_internal_structure.md",
    "sections": [
      {
        "id": "understanding-go-arrays-and-slices-from-first-principles",
        "title": "Understanding Go Arrays and Slices from First Principles",
        "level": 1,
        "wordCount": 51
      },
      {
        "id": "1-memory-fundamentals",
        "title": "1. Memory Fundamentals",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "2-arrays-in-go",
        "title": "2. Arrays in Go",
        "level": 2,
        "wordCount": 202
      },
      {
        "id": "3-slices-in-go",
        "title": "3. Slices in Go",
        "level": 2,
        "wordCount": 260
      },
      {
        "id": "4-deeper-into-slice-internals",
        "title": "4. Deeper Into Slice Internals",
        "level": 2,
        "wordCount": 149
      },
      {
        "id": "5-practical-examples",
        "title": "5. Practical Examples",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "6-performance-considerations",
        "title": "6. Performance Considerations",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "7-common-pitfalls",
        "title": "7. Common Pitfalls",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "8-summary-and-best-practices",
        "title": "8. Summary and Best Practices",
        "level": 2,
        "wordCount": 155
      }
    ],
    "totalWordCount": 1046,
    "estimatedReadingTime": 300000,
    "title": "arrays_slices_and_their_internal_structure",
    "frontmatter": {}
  },
  "public\\content\\go\\context_package_deep_dive\\testing_code_that_uses_context.md": {
    "path": "public\\content\\go\\context_package_deep_dive\\testing_code_that_uses_context.md",
    "sections": [
      {
        "id": "understanding-go-testing-with-context-from-first-principles",
        "title": "Understanding Go Testing with Context from First Principles",
        "level": 1,
        "wordCount": 30
      },
      {
        "id": "1-what-is-context-in-go",
        "title": "1. What is Context in Go?",
        "level": 2,
        "wordCount": 168
      },
      {
        "id": "2-testing-fundamentals-in-go",
        "title": "2. Testing Fundamentals in Go",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "3-why-testing-with-context",
        "title": "3. Why Testing with Context?",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "4-basic-context-testing-examples",
        "title": "4. Basic Context Testing Examples",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "5-testing-context-values",
        "title": "5. Testing Context Values",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "6-testing-cancellation-propagation",
        "title": "6. Testing Cancellation Propagation",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "7-testing-with-context-in-http-handlers",
        "title": "7. Testing with Context in HTTP Handlers",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "8-table-driven-tests-with-context",
        "title": "8. Table-Driven Tests with Context",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "9-testing-middleware-with-context",
        "title": "9. Testing Middleware with Context",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "10-testing-context-with-mocks-and-interfaces",
        "title": "10. Testing Context with Mocks and Interfaces",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 138
      }
    ],
    "totalWordCount": 907,
    "estimatedReadingTime": 240000,
    "title": "testing_code_that_uses_context",
    "frontmatter": {}
  },
  "public\\content\\go\\context_package_deep_dive\\deadline_and_timeout_propagation.md": {
    "path": "public\\content\\go\\context_package_deep_dive\\deadline_and_timeout_propagation.md",
    "sections": [
      {
        "id": "deadline-and-timeout-propagation-in-go-from-first-principles",
        "title": "Deadline and Timeout Propagation in Go: From First Principles",
        "level": 1,
        "wordCount": 33
      },
      {
        "id": "understanding-time-in-computing",
        "title": "Understanding Time in Computing",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "concurrency-and-the-need-for-cancellation",
        "title": "Concurrency and the Need for Cancellation",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "context-gos-solution-for-cancellation",
        "title": "Context: Go's Solution for Cancellation",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "deadlines-vs-timeouts-whats-the-difference",
        "title": "Deadlines vs. Timeouts: What's the Difference?",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "deadline-propagation-how-it-works",
        "title": "Deadline Propagation: How It Works",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "how-context-implements-deadline-propagation",
        "title": "How Context Implements Deadline Propagation",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "timeout-propagation-in-practice",
        "title": "Timeout Propagation in Practice",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "listening-for-cancellation",
        "title": "Listening for Cancellation",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "common-timeout-patterns-in-go",
        "title": "Common Timeout Patterns in Go",
        "level": 2,
        "wordCount": 19
      },
      {
        "id": "advanced-deadline-inheritance-across-api-boundaries",
        "title": "Advanced: Deadline Inheritance Across API Boundaries",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "common-mistakes-and-best-practices",
        "title": "Common Mistakes and Best Practices",
        "level": 2,
        "wordCount": 23
      },
      {
        "id": "best-practices-for-context-timeout-management",
        "title": "Best Practices for Context Timeout Management",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "conclusion-and-real-world-significance",
        "title": "Conclusion and Real-World Significance",
        "level": 2,
        "wordCount": 133
      }
    ],
    "totalWordCount": 786,
    "estimatedReadingTime": 240000,
    "title": "deadline_and_timeout_propagation",
    "frontmatter": {}
  },
  "public\\content\\go\\context_package_deep_dive\\custom_context_implementations.md": {
    "path": "public\\content\\go\\context_package_deep_dive\\custom_context_implementations.md",
    "sections": [
      {
        "id": "custom-context-implementations-in-go",
        "title": "Custom Context Implementations in Go",
        "level": 1,
        "wordCount": 28
      },
      {
        "id": "understanding-context-in-go-the-foundation",
        "title": "Understanding Context in Go - The Foundation",
        "level": 2,
        "wordCount": 151
      },
      {
        "id": "built-in-context-types",
        "title": "Built-in Context Types",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "creating-custom-context-implementations-the-heart-of-our-topic",
        "title": "Creating Custom Context Implementations - The Heart of Our Topic",
        "level": 2,
        "wordCount": 182
      },
      {
        "id": "challenges-and-considerations-when-implementing-custom-contexts",
        "title": "Challenges and Considerations When Implementing Custom Contexts",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "advanced-example-request-scoped-database-transaction-context",
        "title": "Advanced Example: Request-scoped Database Transaction Context",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "testing-custom-context-implementations",
        "title": "Testing Custom Context Implementations",
        "level": 2,
        "wordCount": 21
      },
      {
        "id": "best-practices-for-custom-context-implementations",
        "title": "Best Practices for Custom Context Implementations",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "real-world-applications-of-custom-contexts",
        "title": "Real-world Applications of Custom Contexts",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 101
      }
    ],
    "totalWordCount": 873,
    "estimatedReadingTime": 240000,
    "title": "custom_context_implementations",
    "frontmatter": {}
  },
  "public\\content\\go\\context_package_deep_dive\\creating_and_cascading_cancellation.md": {
    "path": "public\\content\\go\\context_package_deep_dive\\creating_and_cascading_cancellation.md",
    "sections": [
      {
        "id": "understanding-context-and-cancellation-in-go-from-first-principles",
        "title": "Understanding Context and Cancellation in Go from First Principles",
        "level": 1,
        "wordCount": 44
      },
      {
        "id": "what-is-context-in-go",
        "title": "What is Context in Go?",
        "level": 2,
        "wordCount": 145
      },
      {
        "id": "the-context-interface",
        "title": "The Context Interface",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "creating-contexts",
        "title": "Creating Contexts",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "understanding-cancellation-mechanics",
        "title": "Understanding Cancellation Mechanics",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "context-cascading",
        "title": "Context Cascading",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "types-of-context-cancellation",
        "title": "Types of Context Cancellation",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "advanced-cascading-patterns",
        "title": "Advanced Cascading Patterns",
        "level": 2,
        "wordCount": 132
      },
      {
        "id": "best-practices-for-context-usage",
        "title": "Best Practices for Context Usage",
        "level": 2,
        "wordCount": 144
      },
      {
        "id": "complete-example-http-server-with-cascading-cancellation",
        "title": "Complete Example: HTTP Server with Cascading Cancellation",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 114
      }
    ],
    "totalWordCount": 1085,
    "estimatedReadingTime": 300000,
    "title": "creating_and_cascading_cancellation",
    "frontmatter": {}
  },
  "public\\content\\go\\context_package_deep_dive\\context_values_for_request_scoped_data.md": {
    "path": "public\\content\\go\\context_package_deep_dive\\context_values_for_request_scoped_data.md",
    "sections": [
      {
        "id": "understanding-golang-context-values-from-first-principles",
        "title": "Understanding Golang Context Values from First Principles",
        "level": 1,
        "wordCount": 31
      },
      {
        "id": "what-is-context-in-go",
        "title": "What is Context in Go?",
        "level": 2,
        "wordCount": 147
      },
      {
        "id": "the-context-package-first-principles",
        "title": "The Context Package: First Principles",
        "level": 2,
        "wordCount": 125
      },
      {
        "id": "context-values-the-deep-dive",
        "title": "Context Values: The Deep Dive",
        "level": 2,
        "wordCount": 286
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "building-your-own-context-aware-functions",
        "title": "Building Your Own Context-Aware Functions",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "context-values-in-distributed-systems",
        "title": "Context Values in Distributed Systems",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 95
      }
    ],
    "totalWordCount": 973,
    "estimatedReadingTime": 240000,
    "title": "context_values_for_request_scoped_data",
    "frontmatter": {}
  },
  "public\\content\\go\\context_package_deep_dive\\context_performance_considerations.md": {
    "path": "public\\content\\go\\context_package_deep_dive\\context_performance_considerations.md",
    "sections": [
      {
        "id": "understanding-golang-context-performance-considerations-from-first-principles",
        "title": "Understanding Golang Context Performance Considerations from First Principles",
        "level": 1,
        "wordCount": 53
      },
      {
        "id": "what-is-context",
        "title": "What is Context?",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "the-need-for-context",
        "title": "The Need for Context",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "context-implementation",
        "title": "Context Implementation",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 308
      },
      {
        "id": "best-practices-for-performance",
        "title": "Best Practices for Performance",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "measuring-context-performance",
        "title": "Measuring Context Performance",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "real-world-case-studies",
        "title": "Real-World Case Studies",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 132
      }
    ],
    "totalWordCount": 933,
    "estimatedReadingTime": 240000,
    "title": "context_performance_considerations",
    "frontmatter": {}
  },
  "public\\content\\go\\context_package_deep_dive\\context_integration_with_apis.md": {
    "path": "public\\content\\go\\context_package_deep_dive\\context_integration_with_apis.md",
    "sections": [
      {
        "id": "understanding-golang-context-and-api-integration-from-first-principles",
        "title": "Understanding Golang Context and API Integration from First Principles",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "what-is-context-in-go",
        "title": "What is Context in Go?",
        "level": 2,
        "wordCount": 218
      },
      {
        "id": "creating-and-using-contexts",
        "title": "Creating and Using Contexts",
        "level": 2,
        "wordCount": 197
      },
      {
        "id": "integrating-context-with-apis",
        "title": "Integrating Context with APIs",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "database-operations-with-context",
        "title": "Database Operations with Context",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "propagating-context-through-api-layers",
        "title": "Propagating Context Through API Layers",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "best-practices-for-context",
        "title": "Best Practices for Context",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "real-world-example-building-a-weather-api-client",
        "title": "Real-World Example: Building a Weather API Client",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "using-context-with-grpc-apis",
        "title": "Using Context with gRPC APIs",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 122
      }
    ],
    "totalWordCount": 1089,
    "estimatedReadingTime": 300000,
    "title": "context_integration_with_apis",
    "frontmatter": {}
  },
  "public\\content\\go\\context_package_deep_dive\\context_design_principles_and_usage.md": {
    "path": "public\\content\\go\\context_package_deep_dive\\context_design_principles_and_usage.md",
    "sections": [
      {
        "id": "understanding-golangs-context-package-design-principles-and-usage",
        "title": "Understanding Golang's Context Package: Design Principles and Usage",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "first-principles-why-context-exists",
        "title": "First Principles: Why Context Exists",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "the-nature-of-context",
        "title": "The Nature of Context",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "context-principles",
        "title": "Context Principles",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "types-of-contexts",
        "title": "Types of Contexts",
        "level": 2,
        "wordCount": 168
      },
      {
        "id": "best-practices-and-common-patterns",
        "title": "Best Practices and Common Patterns",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "real-world-examples",
        "title": "Real-World Examples",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "advanced-patterns",
        "title": "Advanced Patterns",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "common-pitfalls-and-how-to-avoid-them",
        "title": "Common Pitfalls and How to Avoid Them",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 123
      }
    ],
    "totalWordCount": 828,
    "estimatedReadingTime": 240000,
    "title": "context_design_principles_and_usage",
    "frontmatter": {}
  },
  "public\\content\\go\\context_package_deep_dive\\common_context_anti_patterns.md": {
    "path": "public\\content\\go\\context_package_deep_dive\\common_context_anti_patterns.md",
    "sections": [
      {
        "id": "common-context-anti-patterns-a-first-principles-explanation",
        "title": "Common Context Anti-Patterns: A First Principles Explanation",
        "level": 1,
        "wordCount": 62
      },
      {
        "id": "what-is-context",
        "title": "What is Context?",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "anti-pattern-1-excessive-global-context",
        "title": "Anti-Pattern 1: Excessive Global Context",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "anti-pattern-2-deep-component-nesting",
        "title": "Anti-Pattern 2: Deep Component Nesting",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "anti-pattern-3-context-for-prop-drilling",
        "title": "Anti-Pattern 3: Context for Prop Drilling",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "anti-pattern-4-mutable-context-values",
        "title": "Anti-Pattern 4: Mutable Context Values",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "anti-pattern-5-context-without-performance-optimization",
        "title": "Anti-Pattern 5: Context Without Performance Optimization",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "anti-pattern-6-business-logic-in-context-providers",
        "title": "Anti-Pattern 6: Business Logic in Context Providers",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "anti-pattern-7-context-values-without-default-values",
        "title": "Anti-Pattern 7: Context Values Without Default Values",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "anti-pattern-8-context-overuse-for-component-communication",
        "title": "Anti-Pattern 8: Context Overuse for Component Communication",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "anti-pattern-9-duplicate-context-values",
        "title": "Anti-Pattern 9: Duplicate Context Values",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "conclusion-principles-for-effective-context-usage",
        "title": "Conclusion: Principles for Effective Context Usage",
        "level": 2,
        "wordCount": 168
      }
    ],
    "totalWordCount": 1036,
    "estimatedReadingTime": 300000,
    "title": "common_context_anti_patterns",
    "frontmatter": {}
  },
  "public\\content\\go\\context_package_deep_dive\\best_practices_for_context_propagation.md": {
    "path": "public\\content\\go\\context_package_deep_dive\\best_practices_for_context_propagation.md",
    "sections": [
      {
        "id": "go-context-propagation-best-practices-from-first-principles",
        "title": "Go Context Propagation: Best Practices from First Principles",
        "level": 1,
        "wordCount": 48
      },
      {
        "id": "understanding-context-from-first-principles",
        "title": "Understanding Context from First Principles",
        "level": 2,
        "wordCount": 157
      },
      {
        "id": "context-creation-and-propagation",
        "title": "Context Creation and Propagation",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "best-practices-for-context-propagation",
        "title": "Best Practices for Context Propagation",
        "level": 2,
        "wordCount": 191
      },
      {
        "id": "real-world-example-http-server-with-context",
        "title": "Real-World Example: HTTP Server with Context",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "advanced-context-patterns",
        "title": "Advanced Context Patterns",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "common-pitfalls-and-anti-patterns",
        "title": "Common Pitfalls and Anti-patterns",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "in-summary",
        "title": "In Summary",
        "level": 2,
        "wordCount": 127
      }
    ],
    "totalWordCount": 800,
    "estimatedReadingTime": 240000,
    "title": "best_practices_for_context_propagation",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_safety\\verification_approaches_for_concurrent_code.md": {
    "path": "public\\content\\go\\concurrency_safety\\verification_approaches_for_concurrent_code.md",
    "sections": [
      {
        "id": "verification-approaches-for-concurrent-go-code-from-first-principles",
        "title": "Verification Approaches for Concurrent Go Code: From First Principles",
        "level": 1,
        "wordCount": 62
      },
      {
        "id": "understanding-concurrency-fundamentals",
        "title": "Understanding Concurrency Fundamentals",
        "level": 2,
        "wordCount": 132
      },
      {
        "id": "verification-approach-1-static-analysis",
        "title": "Verification Approach 1: Static Analysis",
        "level": 2,
        "wordCount": 136
      },
      {
        "id": "verification-approach-2-dynamic-analysis",
        "title": "Verification Approach 2: Dynamic Analysis",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "verification-approach-3-model-checking-and-formal-verification",
        "title": "Verification Approach 3: Model Checking and Formal Verification",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "verification-approach-4-structured-concurrency-patterns",
        "title": "Verification Approach 4: Structured Concurrency Patterns",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "verification-approach-5-synchronization-primitives",
        "title": "Verification Approach 5: Synchronization Primitives",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "verification-approach-6-design-by-contract-for-concurrency",
        "title": "Verification Approach 6: Design by Contract for Concurrency",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "verification-approach-7-message-passing-and-csp",
        "title": "Verification Approach 7: Message Passing and CSP",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "practical-example-a-thread-safe-cache",
        "title": "Practical Example: A Thread-Safe Cache",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "advanced-topic-verification-through-formal-methods",
        "title": "Advanced Topic: Verification Through Formal Methods",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 138
      }
    ],
    "totalWordCount": 1138,
    "estimatedReadingTime": 300000,
    "title": "verification_approaches_for_concurrent_code",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_safety\\using_the_race_detector_effectively.md": {
    "path": "public\\content\\go\\concurrency_safety\\using_the_race_detector_effectively.md",
    "sections": [
      {
        "id": "understanding-golangs-race-detector-from-first-principles",
        "title": "Understanding Golang's Race Detector from First Principles",
        "level": 1,
        "wordCount": 53
      },
      {
        "id": "what-is-a-race-condition",
        "title": "What is a Race Condition?",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "the-go-race-detector-how-it-works",
        "title": "The Go Race Detector: How It Works",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "using-the-race-detector-from-theory-to-practice",
        "title": "Using the Race Detector: From Theory to Practice",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "fixing-race-conditions-core-principles",
        "title": "Fixing Race Conditions: Core Principles",
        "level": 2,
        "wordCount": 144
      },
      {
        "id": "advanced-race-detector-usage",
        "title": "Advanced Race Detector Usage",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "common-race-patterns-and-solutions",
        "title": "Common Race Patterns and Solutions",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "case-study-real-world-race-detection",
        "title": "Case Study: Real-world Race Detection",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "best-practices-for-race-detection",
        "title": "Best Practices for Race Detection",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "real-world-limitations-and-considerations",
        "title": "Real-world Limitations and Considerations",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 101
      }
    ],
    "totalWordCount": 1054,
    "estimatedReadingTime": 300000,
    "title": "using_the_race_detector_effectively",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_safety\\thread_safe_data_structure_design.md": {
    "path": "public\\content\\go\\concurrency_safety\\thread_safe_data_structure_design.md",
    "sections": [
      {
        "id": "thread-safe-data-structure-design-in-go-from-first-principles",
        "title": "Thread-Safe Data Structure Design in Go from First Principles",
        "level": 1,
        "wordCount": 45
      },
      {
        "id": "understanding-concurrency-and-thread-safety",
        "title": "Understanding Concurrency and Thread Safety",
        "level": 2,
        "wordCount": 227
      },
      {
        "id": "core-principles-of-thread-safety",
        "title": "Core Principles of Thread Safety",
        "level": 2,
        "wordCount": 187
      },
      {
        "id": "common-thread-safe-data-structures-in-go",
        "title": "Common Thread-Safe Data Structures in Go",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "advanced-thread-safety-techniques",
        "title": "Advanced Thread-Safety Techniques",
        "level": 2,
        "wordCount": 218
      },
      {
        "id": "channels-gos-concurrency-primitive",
        "title": "Channels: Go's Concurrency Primitive",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "common-pitfalls-in-thread-safe-data-structure-design",
        "title": "Common Pitfalls in Thread-Safe Data Structure Design",
        "level": 2,
        "wordCount": 156
      },
      {
        "id": "best-practices-for-thread-safe-data-structures-in-go",
        "title": "Best Practices for Thread-Safe Data Structures in Go",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 101
      }
    ],
    "totalWordCount": 1227,
    "estimatedReadingTime": 300000,
    "title": "thread_safe_data_structure_design",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_safety\\synchronization_boundary_design.md": {
    "path": "public\\content\\go\\concurrency_safety\\synchronization_boundary_design.md",
    "sections": [
      {
        "id": "golang-synchronization-boundary-design-from-first-principles",
        "title": "Golang Synchronization Boundary Design: From First Principles",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "1-what-is-concurrency",
        "title": "1. What Is Concurrency?",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "2-the-need-for-synchronization",
        "title": "2. The Need for Synchronization",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "3-synchronization-boundaries-core-concept",
        "title": "3. Synchronization Boundaries: Core Concept",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "4-designing-synchronization-boundaries",
        "title": "4. Designing Synchronization Boundaries",
        "level": 2,
        "wordCount": 149
      },
      {
        "id": "5-advanced-synchronization-patterns",
        "title": "5. Advanced Synchronization Patterns",
        "level": 2,
        "wordCount": 143
      },
      {
        "id": "6-practical-synchronization-boundary-design",
        "title": "6. Practical Synchronization Boundary Design",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "7-context-based-synchronization",
        "title": "7. Context-Based Synchronization",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "8-designing-for-error-handling",
        "title": "8. Designing for Error Handling",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "9-testing-synchronization-boundaries",
        "title": "9. Testing Synchronization Boundaries",
        "level": 2,
        "wordCount": 25
      },
      {
        "id": "10-real-world-example-http-server-with-rate-limiting",
        "title": "10. Real-World Example: HTTP Server with Rate Limiting",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "11-principles-of-good-synchronization-boundary-design",
        "title": "11. Principles of Good Synchronization Boundary Design",
        "level": 2,
        "wordCount": 159
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 93
      }
    ],
    "totalWordCount": 1070,
    "estimatedReadingTime": 300000,
    "title": "synchronization_boundary_design",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_safety\\starvation_issues_in_concurrent_systems.md": {
    "path": "public\\content\\go\\concurrency_safety\\starvation_issues_in_concurrent_systems.md",
    "sections": [
      {
        "id": "understanding-starvation-in-go-concurrent-systems-from-first-principles",
        "title": "Understanding Starvation in Go Concurrent Systems from First Principles",
        "level": 1,
        "wordCount": 58
      },
      {
        "id": "first-principles-what-is-concurrency",
        "title": "First Principles: What is Concurrency?",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "the-need-for-resource-coordination",
        "title": "The Need for Resource Coordination",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "coordination-mechanisms-and-their-trade-offs",
        "title": "Coordination Mechanisms and Their Trade-offs",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "understanding-starvation-definition-and-causes",
        "title": "Understanding Starvation: Definition and Causes",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "example-1-mutex-starvation",
        "title": "Example 1: Mutex Starvation",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "example-2-reader-writer-lock-starvation",
        "title": "Example 2: Reader-Writer Lock Starvation",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "diving-deeper-gos-scheduler-and-its-role-in-starvation",
        "title": "Diving Deeper: Go's Scheduler and Its Role in Starvation",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "example-3-scheduler-induced-starvation",
        "title": "Example 3: Scheduler-Induced Starvation",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "common-starvation-patterns-in-go",
        "title": "Common Starvation Patterns in Go",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "mitigating-starvation-in-go",
        "title": "Mitigating Starvation in Go",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "deep-dive-detecting-starvation",
        "title": "Deep Dive: Detecting Starvation",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "real-world-applications-and-patterns",
        "title": "Real-World Applications and Patterns",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "conclusion-preventing-starvation-in-production-systems",
        "title": "Conclusion: Preventing Starvation in Production Systems",
        "level": 2,
        "wordCount": 119
      }
    ],
    "totalWordCount": 1085,
    "estimatedReadingTime": 300000,
    "title": "starvation_issues_in_concurrent_systems",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_safety\\race_conditions_and_detection.md": {
    "path": "public\\content\\go\\concurrency_safety\\race_conditions_and_detection.md",
    "sections": [
      {
        "id": "understanding-go-race-conditions-and-detection-from-first-principles",
        "title": "Understanding Go Race Conditions and Detection from First Principles",
        "level": 1,
        "wordCount": 54
      },
      {
        "id": "what-is-a-race-condition-the-fundamental-concept",
        "title": "What Is a Race Condition? The Fundamental Concept",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "concurrency-basics-in-go-the-foundation",
        "title": "Concurrency Basics in Go: The Foundation",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "race-conditions-in-go-the-core-problem",
        "title": "Race Conditions in Go: The Core Problem",
        "level": 2,
        "wordCount": 162
      },
      {
        "id": "race-condition-detection-in-go-the-tools",
        "title": "Race Condition Detection in Go: The Tools",
        "level": 2,
        "wordCount": 266
      },
      {
        "id": "example-race-conditions-understanding-through-specific-cases",
        "title": "Example Race Conditions: Understanding Through Specific Cases",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "solving-race-conditions-the-principles-of-synchronization",
        "title": "Solving Race Conditions: The Principles of Synchronization",
        "level": 2,
        "wordCount": 185
      },
      {
        "id": "best-practices-for-avoiding-race-conditions-in-go",
        "title": "Best Practices for Avoiding Race Conditions in Go",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "real-world-scenario-a-data-processing-pipeline",
        "title": "Real-World Scenario: A Data Processing Pipeline",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "advanced-race-detection-beyond-the-standard-tools",
        "title": "Advanced Race Detection: Beyond the Standard Tools",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "conclusion-mastering-race-conditions-in-go",
        "title": "Conclusion: Mastering Race Conditions in Go",
        "level": 2,
        "wordCount": 111
      }
    ],
    "totalWordCount": 1374,
    "estimatedReadingTime": 360000,
    "title": "race_conditions_and_detection",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_safety\\livelock_detection_and_prevention.md": {
    "path": "public\\content\\go\\concurrency_safety\\livelock_detection_and_prevention.md",
    "sections": [
      {
        "id": "golang-livelock-detection-and-prevention-understanding-from-first-principles",
        "title": "Golang Livelock Detection and Prevention: Understanding from First Principles",
        "level": 1,
        "wordCount": 40
      },
      {
        "id": "what-is-a-livelock",
        "title": "What is a Livelock?",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "livelocks-in-go-a-first-principles-understanding",
        "title": "Livelocks in Go: A First-Principles Understanding",
        "level": 2,
        "wordCount": 150
      },
      {
        "id": "detecting-livelocks-in-go",
        "title": "Detecting Livelocks in Go",
        "level": 2,
        "wordCount": 204
      },
      {
        "id": "preventing-livelocks-in-go",
        "title": "Preventing Livelocks in Go",
        "level": 2,
        "wordCount": 262
      },
      {
        "id": "advanced-livelock-prevention-context-aware-resource-management",
        "title": "Advanced Livelock Prevention: Context-Aware Resource Management",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "real-world-applications-and-considerations",
        "title": "Real-World Applications and Considerations",
        "level": 2,
        "wordCount": 229
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 135
      }
    ],
    "totalWordCount": 1235,
    "estimatedReadingTime": 300000,
    "title": "livelock_detection_and_prevention",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_safety\\immutability_as_a_concurrency_strategy.md": {
    "path": "public\\content\\go\\concurrency_safety\\immutability_as_a_concurrency_strategy.md",
    "sections": [
      {
        "id": "golang-immutability-as-a-concurrency-strategy",
        "title": "Golang Immutability as a Concurrency Strategy",
        "level": 1,
        "wordCount": 36
      },
      {
        "id": "what-is-immutability",
        "title": "What is Immutability?",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "the-root-problem-of-concurrency",
        "title": "The Root Problem of Concurrency",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "how-go-approaches-immutability",
        "title": "How Go Approaches Immutability",
        "level": 2,
        "wordCount": 187
      },
      {
        "id": "immutability-patterns-in-go-for-concurrency",
        "title": "Immutability Patterns in Go for Concurrency",
        "level": 2,
        "wordCount": 192
      },
      {
        "id": "benefits-of-immutability-for-concurrency",
        "title": "Benefits of Immutability for Concurrency",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "costs-and-considerations",
        "title": "Costs and Considerations",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "real-world-patterns",
        "title": "Real-World Patterns",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 145
      }
    ],
    "totalWordCount": 972,
    "estimatedReadingTime": 240000,
    "title": "immutability_as_a_concurrency_strategy",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_safety\\deadlock_detection_and_prevention.md": {
    "path": "public\\content\\go\\concurrency_safety\\deadlock_detection_and_prevention.md",
    "sections": [
      {
        "id": "golang-deadlock-detection-and-prevention-a-first-principles-approach",
        "title": "Golang Deadlock Detection and Prevention: A First Principles Approach",
        "level": 1,
        "wordCount": 23
      },
      {
        "id": "what-is-a-deadlock",
        "title": "What is a Deadlock?",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "the-four-conditions-for-deadlock",
        "title": "The Four Conditions for Deadlock",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "deadlocks-in-go",
        "title": "Deadlocks in Go",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "channel-deadlocks",
        "title": "Channel Deadlocks",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "mutex-deadlocks",
        "title": "Mutex Deadlocks",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "gos-built-in-deadlock-detection",
        "title": "Go's Built-in Deadlock Detection",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "deadlock-prevention-strategies",
        "title": "Deadlock Prevention Strategies",
        "level": 2,
        "wordCount": 169
      },
      {
        "id": "advanced-deadlock-detection-using-gos-race-detector",
        "title": "Advanced Deadlock Detection: Using Go's Race Detector",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "a-real-world-example-worker-pool-with-deadlock-prevention",
        "title": "A Real-world Example: Worker Pool with Deadlock Prevention",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "deadlock-debugging-in-go",
        "title": "Deadlock Debugging in Go",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "summary-key-principles-for-deadlock-prevention-in-go",
        "title": "Summary: Key Principles for Deadlock Prevention in Go",
        "level": 2,
        "wordCount": 127
      }
    ],
    "totalWordCount": 1012,
    "estimatedReadingTime": 300000,
    "title": "deadlock_detection_and_prevention",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_safety\\data_races_vs_race_conditions.md": {
    "path": "public\\content\\go\\concurrency_safety\\data_races_vs_race_conditions.md",
    "sections": [
      {
        "id": "data-races-vs-race-conditions-in-go-from-first-principles",
        "title": "Data Races vs Race Conditions in Go: From First Principles",
        "level": 1,
        "wordCount": 44
      },
      {
        "id": "understanding-concurrency-the-foundation",
        "title": "Understanding Concurrency: The Foundation",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "data-races-uncoordinated-memory-access",
        "title": "Data Races: Uncoordinated Memory Access",
        "level": 2,
        "wordCount": 302
      },
      {
        "id": "race-conditions-unexpected-behavior-due-to-timing",
        "title": "Race Conditions: Unexpected Behavior Due to Timing",
        "level": 2,
        "wordCount": 218
      },
      {
        "id": "key-differences-between-data-races-and-race-conditions",
        "title": "Key Differences Between Data Races and Race Conditions",
        "level": 2,
        "wordCount": 153
      },
      {
        "id": "best-practices-to-avoid-both-problems",
        "title": "Best Practices to Avoid Both Problems",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 97
      }
    ],
    "totalWordCount": 1032,
    "estimatedReadingTime": 300000,
    "title": "data_races_vs_race_conditions",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_foundations\\select_statement_for_channel_operations.md": {
    "path": "public\\content\\go\\concurrency_foundations\\select_statement_for_channel_operations.md",
    "sections": [
      {
        "id": "understanding-select-in-go-a-first-principles-approach",
        "title": "Understanding Select in Go: A First Principles Approach",
        "level": 1,
        "wordCount": 27
      },
      {
        "id": "first-principles-what-is-concurrency",
        "title": "First Principles: What is Concurrency?",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "channels-the-foundation",
        "title": "Channels: The Foundation",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "the-problem-select-solves",
        "title": "The Problem Select Solves",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "select-statement-the-basics",
        "title": "Select Statement: The Basics",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "example-1-basic-select",
        "title": "Example 1: Basic Select",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "example-2-non-blocking-operations-with-default",
        "title": "Example 2: Non-blocking Operations with Default",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "example-3-timeouts",
        "title": "Example 3: Timeouts",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "example-4-selecting-between-send-and-receive-operations",
        "title": "Example 4: Selecting Between Send and Receive Operations",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "example-5-select-in-a-loop",
        "title": "Example 5: Select in a Loop",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "understanding-random-selection",
        "title": "Understanding Random Selection",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "empty-select",
        "title": "Empty Select",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "select-and-closed-channels",
        "title": "Select and Closed Channels",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "practical-application-worker-pool",
        "title": "Practical Application: Worker Pool",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "key-insights-about-select",
        "title": "Key Insights About Select",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "example-disabling-a-case-with-nil-channels",
        "title": "Example: Disabling a Case with Nil Channels",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 99
      }
    ],
    "totalWordCount": 1112,
    "estimatedReadingTime": 300000,
    "title": "select_statement_for_channel_operations",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_foundations\\introduction_to_goroutines.md": {
    "path": "public\\content\\go\\concurrency_foundations\\introduction_to_goroutines.md",
    "sections": [
      {
        "id": "introduction-to-goroutines-lightweight-concurrency-in-go",
        "title": "Introduction to Goroutines: Lightweight Concurrency in Go",
        "level": 1,
        "wordCount": 48
      },
      {
        "id": "what-is-concurrency",
        "title": "What Is Concurrency?",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "traditional-threads-vs-goroutines",
        "title": "Traditional Threads vs. Goroutines",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "how-goroutines-work-the-fundamental-principles",
        "title": "How Goroutines Work: The Fundamental Principles",
        "level": 2,
        "wordCount": 227
      },
      {
        "id": "a-simple-goroutine-example",
        "title": "A Simple Goroutine Example",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "communication-between-goroutines-channels",
        "title": "Communication Between Goroutines: Channels",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "common-goroutine-patterns",
        "title": "Common Goroutine Patterns",
        "level": 2,
        "wordCount": 129
      },
      {
        "id": "goroutine-gotchas-and-best-practices",
        "title": "Goroutine Gotchas and Best Practices",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "real-world-applications-of-goroutines",
        "title": "Real-World Applications of Goroutines",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 125
      }
    ],
    "totalWordCount": 1138,
    "estimatedReadingTime": 300000,
    "title": "introduction_to_goroutines",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_foundations\\go_scheduler_and_work_stealing.md": {
    "path": "public\\content\\go\\concurrency_foundations\\go_scheduler_and_work_stealing.md",
    "sections": [
      {
        "id": "understanding-gos-scheduler-and-work-stealing-from-first-principles",
        "title": "Understanding Go's Scheduler and Work Stealing from First Principles",
        "level": 1,
        "wordCount": 56
      },
      {
        "id": "foundations-what-is-a-process",
        "title": "Foundations: What is a Process?",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "from-processes-to-threads",
        "title": "From Processes to Threads",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "traditional-threading-models",
        "title": "Traditional Threading Models",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "enter-gos-concurrency-model",
        "title": "Enter Go's Concurrency Model",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "the-go-scheduler-a-deep-dive",
        "title": "The Go Scheduler: A Deep Dive",
        "level": 2,
        "wordCount": 228
      },
      {
        "id": "the-scheduling-process",
        "title": "The Scheduling Process",
        "level": 2,
        "wordCount": 125
      },
      {
        "id": "work-stealing-the-key-to-efficiency",
        "title": "Work Stealing: The Key to Efficiency",
        "level": 2,
        "wordCount": 175
      },
      {
        "id": "benefits-of-work-stealing",
        "title": "Benefits of Work Stealing",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "implementation-details",
        "title": "Implementation Details",
        "level": 2,
        "wordCount": 178
      },
      {
        "id": "real-world-example-web-server",
        "title": "Real-World Example: Web Server",
        "level": 2,
        "wordCount": 125
      },
      {
        "id": "advanced-work-stealing-strategies",
        "title": "Advanced Work Stealing Strategies",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "practical-implications-for-go-developers",
        "title": "Practical Implications for Go Developers",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "common-pitfalls-and-how-to-avoid-them",
        "title": "Common Pitfalls and How to Avoid Them",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "comparing-with-other-models",
        "title": "Comparing with Other Models",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 157
      }
    ],
    "totalWordCount": 1950,
    "estimatedReadingTime": 480000,
    "title": "go_scheduler_and_work_stealing",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_foundations\\go_channels.md": {
    "path": "public\\content\\go\\concurrency_foundations\\go_channels.md",
    "sections": [
      {
        "id": "understanding-go-channels-from-first-principles",
        "title": "Understanding Go Channels from First Principles",
        "level": 1,
        "wordCount": 34
      },
      {
        "id": "the-problem-concurrent-communication",
        "title": "The Problem: Concurrent Communication",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "what-are-channels",
        "title": "What Are Channels?",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "creating-channels",
        "title": "Creating Channels",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "channel-operations",
        "title": "Channel Operations",
        "level": 2,
        "wordCount": 235
      },
      {
        "id": "understanding-with-examples",
        "title": "Understanding With Examples",
        "level": 2,
        "wordCount": 161
      },
      {
        "id": "channel-directionality",
        "title": "Channel Directionality",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "common-patterns-and-deeper-understanding",
        "title": "Common Patterns and Deeper Understanding",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "understanding-channels-at-a-deeper-level",
        "title": "Understanding Channels at a Deeper Level",
        "level": 2,
        "wordCount": 151
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 100
      }
    ],
    "totalWordCount": 1125,
    "estimatedReadingTime": 300000,
    "title": "go_channels",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_foundations\\goroutine_memory_consumption.md": {
    "path": "public\\content\\go\\concurrency_foundations\\goroutine_memory_consumption.md",
    "sections": [
      {
        "id": "understanding-goroutine-memory-consumption-and-stacks-from-first-principles",
        "title": "Understanding Goroutine Memory Consumption and Stacks from First Principles",
        "level": 1,
        "wordCount": 51
      },
      {
        "id": "1-what-is-a-goroutine",
        "title": "1. What is a Goroutine?",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "2-memory-allocation-understanding-the-stack",
        "title": "2. Memory Allocation: Understanding the Stack",
        "level": 2,
        "wordCount": 186
      },
      {
        "id": "3-stack-growth-mechanics",
        "title": "3. Stack Growth Mechanics",
        "level": 2,
        "wordCount": 195
      },
      {
        "id": "4-continuous-stack",
        "title": "4. Continuous Stack",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "5-stack-vs-heap-allocation",
        "title": "5. Stack vs. Heap Allocation",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "6-real-world-goroutine-memory-usage",
        "title": "6. Real-World Goroutine Memory Usage",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "7-memory-efficiency-techniques",
        "title": "7. Memory Efficiency Techniques",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "8-stack-size-evolution-in-go",
        "title": "8. Stack Size Evolution in Go",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "9-advanced-topic-stack-tracing-and-inspection",
        "title": "9. Advanced Topic: Stack Tracing and Inspection",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "10-real-world-impact-goroutines-vs-os-threads",
        "title": "10. Real-World Impact: Goroutines vs. OS Threads",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 110
      }
    ],
    "totalWordCount": 1159,
    "estimatedReadingTime": 300000,
    "title": "goroutine_memory_consumption",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_foundations\\goroutine_creation_and_lifecycle.md": {
    "path": "public\\content\\go\\concurrency_foundations\\goroutine_creation_and_lifecycle.md",
    "sections": [
      {
        "id": "goroutines-creation-and-lifecycle-from-first-principles",
        "title": "Goroutines: Creation and Lifecycle from First Principles",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "what-is-concurrency",
        "title": "What Is Concurrency?",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "what-is-a-goroutine",
        "title": "What Is a Goroutine?",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "first-principles-of-goroutine-creation",
        "title": "First Principles of Goroutine Creation",
        "level": 2,
        "wordCount": 126
      },
      {
        "id": "goroutine-lifecycle",
        "title": "Goroutine Lifecycle",
        "level": 2,
        "wordCount": 246
      },
      {
        "id": "the-go-scheduler",
        "title": "The Go Scheduler",
        "level": 2,
        "wordCount": 160
      },
      {
        "id": "synchronization-between-goroutines",
        "title": "Synchronization Between Goroutines",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "common-patterns-and-idioms",
        "title": "Common Patterns and Idioms",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 109
      }
    ],
    "totalWordCount": 1226,
    "estimatedReadingTime": 300000,
    "title": "goroutine_creation_and_lifecycle",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_foundations\\concurrency_vs_parallelism.md": {
    "path": "public\\content\\go\\concurrency_foundations\\concurrency_vs_parallelism.md",
    "sections": [
      {
        "id": "concurrency-vs-parallelism-in-go-a-first-principles-explanation",
        "title": "Concurrency vs. Parallelism in Go: A First Principles Explanation",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "starting-with-first-principles",
        "title": "Starting with First Principles",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "concurrency-the-fundamental-concept",
        "title": "Concurrency: The Fundamental Concept",
        "level": 2,
        "wordCount": 202
      },
      {
        "id": "parallelism-the-hardware-execution",
        "title": "Parallelism: The Hardware Execution",
        "level": 2,
        "wordCount": 192
      },
      {
        "id": "the-key-distinction-structure-vs-execution",
        "title": "The Key Distinction: Structure vs. Execution",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "gos-concurrency-model-csp",
        "title": "Go's Concurrency Model: CSP",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "practical-differences-and-use-cases",
        "title": "Practical Differences and Use Cases",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "common-concurrency-patterns-in-go",
        "title": "Common Concurrency Patterns in Go",
        "level": 2,
        "wordCount": 125
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 147
      }
    ],
    "totalWordCount": 1142,
    "estimatedReadingTime": 300000,
    "title": "concurrency_vs_parallelism",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_foundations\\concurrency_safety_fundamentals.md": {
    "path": "public\\content\\go\\concurrency_foundations\\concurrency_safety_fundamentals.md",
    "sections": [
      {
        "id": "go-concurrency-safety-fundamentals",
        "title": "Go Concurrency Safety Fundamentals",
        "level": 1,
        "wordCount": 42
      },
      {
        "id": "1-what-is-concurrency",
        "title": "1. What is Concurrency?",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "2-goroutines-the-foundation-of-go-concurrency",
        "title": "2. Goroutines: The Foundation of Go Concurrency",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "3-race-conditions-the-primary-concurrency-hazard",
        "title": "3. Race Conditions: The Primary Concurrency Hazard",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "4-concurrency-safety-tools-in-go",
        "title": "4. Concurrency Safety Tools in Go",
        "level": 2,
        "wordCount": 200
      },
      {
        "id": "5-memory-models-and-happens-before-relationship",
        "title": "5. Memory Models and Happens-Before Relationship",
        "level": 2,
        "wordCount": 171
      },
      {
        "id": "6-concurrency-patterns",
        "title": "6. Concurrency Patterns",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "7-context-package-for-cancellation-and-deadlines",
        "title": "7. Context Package for Cancellation and Deadlines",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "8-detecting-race-conditions",
        "title": "8. Detecting Race Conditions",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "9-atomics-for-simple-operations",
        "title": "9. Atomics for Simple Operations",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "10-key-principles-for-concurrency-safety",
        "title": "10. Key Principles for Concurrency Safety",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 84
      }
    ],
    "totalWordCount": 1162,
    "estimatedReadingTime": 300000,
    "title": "concurrency_safety_fundamentals",
    "frontmatter": {}
  },
  "public\\content\\go\\concurrency_foundations\\buffered_vs_unbuffered_channels.md": {
    "path": "public\\content\\go\\concurrency_foundations\\buffered_vs_unbuffered_channels.md",
    "sections": [
      {
        "id": "go-channels-buffered-vs-unbuffered-from-first-principles",
        "title": "Go Channels: Buffered vs. Unbuffered - From First Principles",
        "level": 1,
        "wordCount": 28
      },
      {
        "id": "the-core-concept-what-is-a-channel",
        "title": "The Core Concept: What Is a Channel?",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "channels-as-types",
        "title": "Channels as Types",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "the-two-fundamental-channel-varieties",
        "title": "The Two Fundamental Channel Varieties",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "unbuffered-channels-the-synchronous-meeting-point",
        "title": "Unbuffered Channels: The Synchronous Meeting Point",
        "level": 2,
        "wordCount": 164
      },
      {
        "id": "buffered-channels-the-mailbox-with-limited-capacity",
        "title": "Buffered Channels: The Mailbox with Limited Capacity",
        "level": 2,
        "wordCount": 175
      },
      {
        "id": "key-differences-a-comparative-look",
        "title": "Key Differences: A Comparative Look",
        "level": 2,
        "wordCount": 196
      },
      {
        "id": "choosing-between-buffered-and-unbuffered-channels",
        "title": "Choosing Between Buffered and Unbuffered Channels",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "common-patterns-with-channels",
        "title": "Common Patterns with Channels",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "edge-cases-and-gotchas",
        "title": "Edge Cases and Gotchas",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "practical-applications",
        "title": "Practical Applications",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 129
      }
    ],
    "totalWordCount": 1202,
    "estimatedReadingTime": 300000,
    "title": "buffered_vs_unbuffered_channels",
    "frontmatter": {}
  },
  "public\\content\\go\\channels\\nil_channels_and_their_behavior.md": {
    "path": "public\\content\\go\\channels\\nil_channels_and_their_behavior.md",
    "sections": [
      {
        "id": "understanding-nil-channels-in-go-from-first-principles",
        "title": "Understanding Nil Channels in Go from First Principles",
        "level": 1,
        "wordCount": 42
      },
      {
        "id": "what-is-a-channel-in-go",
        "title": "What is a Channel in Go?",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "what-is-a-nil-channel",
        "title": "What is a Nil Channel?",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "the-behavior-of-nil-channels",
        "title": "The Behavior of Nil Channels",
        "level": 2,
        "wordCount": 179
      },
      {
        "id": "practical-uses-of-nil-channels",
        "title": "Practical Uses of Nil Channels",
        "level": 2,
        "wordCount": 173
      },
      {
        "id": "understanding-the-memory-model-implications",
        "title": "Understanding the Memory Model Implications",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "common-mistakes-and-gotchas-with-nil-channels",
        "title": "Common Mistakes and Gotchas with Nil Channels",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "testing-understanding-with-more-examples",
        "title": "Testing Understanding with More Examples",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "summary-the-key-principles-of-nil-channels",
        "title": "Summary: The Key Principles of Nil Channels",
        "level": 2,
        "wordCount": 93
      }
    ],
    "totalWordCount": 934,
    "estimatedReadingTime": 240000,
    "title": "nil_channels_and_their_behavior",
    "frontmatter": {}
  },
  "public\\content\\go\\channels\\implementing_timeouts_with_channels.md": {
    "path": "public\\content\\go\\channels\\implementing_timeouts_with_channels.md",
    "sections": [
      {
        "id": "implementing-timeouts-with-channels-in-go-a-first-principles-approach",
        "title": "Implementing Timeouts with Channels in Go: A First Principles Approach",
        "level": 1,
        "wordCount": 67
      },
      {
        "id": "1-understanding-channels-the-foundation",
        "title": "1. Understanding Channels: The Foundation",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "2-goroutines-concurrent-execution-units",
        "title": "2. Goroutines: Concurrent Execution Units",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "3-the-select-statement-the-decision-maker",
        "title": "3. The `select` Statement: The Decision Maker",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "4-the-timeafter-function-the-timeout-mechanism",
        "title": "4. The `time.After` Function: The Timeout Mechanism",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "5-implementing-basic-timeouts",
        "title": "5. Implementing Basic Timeouts",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "6-context-package-sophisticated-timeout-management",
        "title": "6. Context Package: Sophisticated Timeout Management",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "7-practical-example-http-client-with-timeout",
        "title": "7. Practical Example: HTTP Client with Timeout",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "8-timeout-patterns-multiple-operations-with-timeouts",
        "title": "8. Timeout Patterns: Multiple Operations with Timeouts",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "9-resource-management-preventing-goroutine-leaks",
        "title": "9. Resource Management: Preventing Goroutine Leaks",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "10-putting-it-all-together-a-complete-http-service-example",
        "title": "10. Putting It All Together: A Complete HTTP Service Example",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "11-advanced-patterns-dynamic-timeouts",
        "title": "11. Advanced Patterns: Dynamic Timeouts",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 125
      }
    ],
    "totalWordCount": 910,
    "estimatedReadingTime": 240000,
    "title": "implementing_timeouts_with_channels",
    "frontmatter": {}
  },
  "public\\content\\go\\channels\\implementing_backpressure_with_channels.md": {
    "path": "public\\content\\go\\channels\\implementing_backpressure_with_channels.md",
    "sections": [
      {
        "id": "implementing-backpressure-with-channels-in-go",
        "title": "Implementing Backpressure with Channels in Go",
        "level": 1,
        "wordCount": 31
      },
      {
        "id": "first-principles-of-backpressure",
        "title": "First Principles of Backpressure",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "first-principles-of-go-channels",
        "title": "First Principles of Go Channels",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "how-channels-naturally-implement-backpressure",
        "title": "How Channels Naturally Implement Backpressure",
        "level": 2,
        "wordCount": 149
      },
      {
        "id": "practical-backpressure-patterns",
        "title": "Practical Backpressure Patterns",
        "level": 2,
        "wordCount": 171
      },
      {
        "id": "pattern-3-flow-control-with-multiple-channels",
        "title": "Pattern 3: Flow Control with Multiple Channels",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "real-world-applications-of-backpressure",
        "title": "Real-World Applications of Backpressure",
        "level": 2,
        "wordCount": 153
      },
      {
        "id": "understanding-the-benefits-of-backpressure",
        "title": "Understanding the Benefits of Backpressure",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "when-to-use-different-backpressure-patterns",
        "title": "When to Use Different Backpressure Patterns",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 112
      }
    ],
    "totalWordCount": 1056,
    "estimatedReadingTime": 300000,
    "title": "implementing_backpressure_with_channels",
    "frontmatter": {}
  },
  "public\\content\\go\\channels\\go_directional_channels.md": {
    "path": "public\\content\\go\\channels\\go_directional_channels.md",
    "sections": [
      {
        "id": "go-channels-a-first-principles-explanation",
        "title": "Go Channels: A First Principles Explanation",
        "level": 1,
        "wordCount": 40
      },
      {
        "id": "the-problem-concurrent-communication",
        "title": "The Problem: Concurrent Communication",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "first-principles-what-is-a-channel",
        "title": "First Principles: What is a Channel?",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "channel-creation-and-basic-operations",
        "title": "Channel Creation and Basic Operations",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "unbuffered-vs-buffered-channels",
        "title": "Unbuffered vs. Buffered Channels",
        "level": 2,
        "wordCount": 160
      },
      {
        "id": "channel-directions",
        "title": "Channel Directions",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "range-and-close",
        "title": "Range and Close",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "select-statement",
        "title": "Select Statement",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "channel-design-patterns",
        "title": "Channel Design Patterns",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "implementation-details-and-best-practices",
        "title": "Implementation Details and Best Practices",
        "level": 2,
        "wordCount": 216
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 101
      }
    ],
    "totalWordCount": 1078,
    "estimatedReadingTime": 300000,
    "title": "go_directional_channels",
    "frontmatter": {}
  },
  "public\\content\\go\\channels\\go_channels.md": {
    "path": "public\\content\\go\\channels\\go_channels.md",
    "sections": [
      {
        "id": "go-channels-a-first-principles-explanation",
        "title": "Go Channels: A First Principles Explanation",
        "level": 1,
        "wordCount": 40
      },
      {
        "id": "the-problem-concurrent-communication",
        "title": "The Problem: Concurrent Communication",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "first-principles-what-is-a-channel",
        "title": "First Principles: What is a Channel?",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "channel-creation-and-basic-operations",
        "title": "Channel Creation and Basic Operations",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "unbuffered-vs-buffered-channels",
        "title": "Unbuffered vs. Buffered Channels",
        "level": 2,
        "wordCount": 160
      },
      {
        "id": "channel-directions",
        "title": "Channel Directions",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "range-and-close",
        "title": "Range and Close",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "select-statement",
        "title": "Select Statement",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "channel-design-patterns",
        "title": "Channel Design Patterns",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "implementation-details-and-best-practices",
        "title": "Implementation Details and Best Practices",
        "level": 2,
        "wordCount": 216
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 101
      }
    ],
    "totalWordCount": 1078,
    "estimatedReadingTime": 300000,
    "title": "go_channels",
    "frontmatter": {}
  },
  "public\\content\\go\\channels\\fan_out_fan_in_patterns.md": {
    "path": "public\\content\\go\\channels\\fan_out_fan_in_patterns.md",
    "sections": [
      {
        "id": "go-fan-out-fan-in-patterns-with-channels-a-first-principles-explanation",
        "title": "Go Fan-Out, Fan-In Patterns with Channels: A First Principles Explanation",
        "level": 1,
        "wordCount": 40
      },
      {
        "id": "1-understanding-channels-from-first-principles",
        "title": "1. Understanding Channels from First Principles",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "2-basic-concurrency-with-channels",
        "title": "2. Basic Concurrency with Channels",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "3-fan-out-pattern-from-one-to-many",
        "title": "3. Fan-Out Pattern: From One to Many",
        "level": 2,
        "wordCount": 140
      },
      {
        "id": "4-fan-in-pattern-from-many-to-one",
        "title": "4. Fan-In Pattern: From Many to One",
        "level": 2,
        "wordCount": 164
      },
      {
        "id": "5-complete-fan-out-fan-in-pipeline",
        "title": "5. Complete Fan-Out, Fan-In Pipeline",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "6-real-world-example-image-processing-pipeline",
        "title": "6. Real-World Example: Image Processing Pipeline",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "7-advanced-patterns-and-best-practices",
        "title": "7. Advanced Patterns and Best Practices",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "8-common-pitfalls-and-how-to-avoid-them",
        "title": "8. Common Pitfalls and How to Avoid Them",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "9-real-world-applications-for-fan-out-fan-in",
        "title": "9. Real-World Applications for Fan-Out, Fan-In",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "10-conclusion-and-best-practices-summary",
        "title": "10. Conclusion and Best Practices Summary",
        "level": 2,
        "wordCount": 169
      }
    ],
    "totalWordCount": 1223,
    "estimatedReadingTime": 300000,
    "title": "fan_out_fan_in_patterns",
    "frontmatter": {}
  },
  "public\\content\\go\\channels\\channel_ownership_principles.md": {
    "path": "public\\content\\go\\channels\\channel_ownership_principles.md",
    "sections": [
      {
        "id": "go-channel-ownership-first-principles",
        "title": "Go Channel Ownership: First Principles",
        "level": 1,
        "wordCount": 35
      },
      {
        "id": "what-is-a-channel",
        "title": "What is a Channel?",
        "level": 2,
        "wordCount": 134
      },
      {
        "id": "the-fundamental-problem-who-owns-the-channel",
        "title": "The Fundamental Problem: Who Owns the Channel?",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "channel-closure-first-principles",
        "title": "Channel Closure: First Principles",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "channel-ownership-principle-1-the-creator-is-usually-the-sender-and-closer",
        "title": "Channel Ownership Principle #1: The Creator is Usually the Sender and Closer",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "channel-ownership-principle-2-use-channel-direction-to-enforce-ownership",
        "title": "Channel Ownership Principle #2: Use Channel Direction to Enforce Ownership",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "channel-ownership-principle-3-multiple-senders-single-closer",
        "title": "Channel Ownership Principle #3: Multiple Senders, Single Closer",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "channel-ownership-principle-4-the-done-channel-pattern",
        "title": "Channel Ownership Principle #4: The Done Channel Pattern",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "channel-ownership-principle-5-fan-out-fan-in-pattern",
        "title": "Channel Ownership Principle #5: Fan-Out, Fan-In Pattern",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "practical-applications",
        "title": "Practical Applications",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "common-mistakes-and-their-consequences",
        "title": "Common Mistakes and Their Consequences",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "advanced-pattern-contexts-for-ownership-and-cancellation",
        "title": "Advanced Pattern: Contexts for Ownership and Cancellation",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "summary-of-channel-ownership-principles",
        "title": "Summary of Channel Ownership Principles",
        "level": 2,
        "wordCount": 138
      }
    ],
    "totalWordCount": 957,
    "estimatedReadingTime": 240000,
    "title": "channel_ownership_principles",
    "frontmatter": {}
  },
  "public\\content\\go\\channels\\channel_closing_semantics.md": {
    "path": "public\\content\\go\\channels\\channel_closing_semantics.md",
    "sections": [
      {
        "id": "go-channels-closing-semantics-and-best-practices",
        "title": "Go Channels: Closing Semantics and Best Practices",
        "level": 1,
        "wordCount": 31
      },
      {
        "id": "1-what-are-channels-in-go",
        "title": "1. What Are Channels in Go?",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "2-understanding-channel-closing",
        "title": "2. Understanding Channel Closing",
        "level": 2,
        "wordCount": 146
      },
      {
        "id": "3-the-ok-idiom-for-detecting-closed-channels",
        "title": "3. The \"ok\" Idiom for Detecting Closed Channels",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "4-range-loop-with-channels",
        "title": "4. Range Loop with Channels",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "5-never-close-a-channel-from-the-receiver-side",
        "title": "5. Never Close a Channel from the Receiver Side",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "6-handling-multiple-senders",
        "title": "6. Handling Multiple Senders",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "7-using-a-done-channel-for-signaling",
        "title": "7. Using a \"Done\" Channel for Signaling",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "8-nil-channels-block-forever",
        "title": "8. Nil Channels Block Forever",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "9-buffered-channels-and-closing",
        "title": "9. Buffered Channels and Closing",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "10-best-practices-summary",
        "title": "10. Best Practices Summary",
        "level": 2,
        "wordCount": 203
      },
      {
        "id": "11-common-closing-patterns",
        "title": "11. Common Closing Patterns",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "12-conclusion",
        "title": "12. Conclusion",
        "level": 2,
        "wordCount": 114
      }
    ],
    "totalWordCount": 1059,
    "estimatedReadingTime": 300000,
    "title": "channel_closing_semantics",
    "frontmatter": {}
  },
  "public\\content\\go\\channels\\channel_based_semaphores.md": {
    "path": "public\\content\\go\\channels\\channel_based_semaphores.md",
    "sections": [
      {
        "id": "channel-based-semaphores-in-go-a-first-principles-approach",
        "title": "Channel-Based Semaphores in Go: A First Principles Approach",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "understanding-concurrency-fundamentals",
        "title": "Understanding Concurrency Fundamentals",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "what-is-a-semaphore",
        "title": "What is a Semaphore?",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "gos-concurrency-model",
        "title": "Go's Concurrency Model",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "implementing-semaphores-with-channels",
        "title": "Implementing Semaphores with Channels",
        "level": 2,
        "wordCount": 154
      },
      {
        "id": "a-practical-example",
        "title": "A Practical Example",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "improving-our-implementation",
        "title": "Improving Our Implementation",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "comparing-with-traditional-semaphores",
        "title": "Comparing with Traditional Semaphores",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "real-world-example-rate-limiting",
        "title": "Real-World Example: Rate Limiting",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "advantages-of-channel-based-semaphores",
        "title": "Advantages of Channel-Based Semaphores",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "when-to-use-semaphores-in-go",
        "title": "When to Use Semaphores in Go",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "potential-pitfalls",
        "title": "Potential Pitfalls",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "alternative-approaches-in-go",
        "title": "Alternative Approaches in Go",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 93
      }
    ],
    "totalWordCount": 1042,
    "estimatedReadingTime": 300000,
    "title": "channel_based_semaphores",
    "frontmatter": {}
  },
  "public\\content\\go\\channels\\cancellation_propagation_via_channels.md": {
    "path": "public\\content\\go\\channels\\cancellation_propagation_via_channels.md",
    "sections": [
      {
        "id": "understanding-golang-cancellation-propagation-via-channels",
        "title": "Understanding Golang Cancellation Propagation via Channels",
        "level": 1,
        "wordCount": 34
      },
      {
        "id": "first-principles-what-is-cancellation",
        "title": "First Principles: What is Cancellation?",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "why-use-channels-for-cancellation",
        "title": "Why Use Channels for Cancellation?",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "basic-cancellation-pattern-with-channels",
        "title": "Basic Cancellation Pattern with Channels",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "why-empty-struct-channels",
        "title": "Why Empty Struct Channels?",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "cancellation-propagation-the-key-concept",
        "title": "Cancellation Propagation: The Key Concept",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "context-package-the-standard-way",
        "title": "Context Package: The Standard Way",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "bidirectional-cancellation",
        "title": "Bidirectional Cancellation",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "timeouts-and-deadlines",
        "title": "Timeouts and Deadlines",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "pattern-cancellation-resource-cleanup",
        "title": "Pattern: Cancellation + Resource Cleanup",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "advanced-pattern-cancellation-groups",
        "title": "Advanced Pattern: Cancellation Groups",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "real-world-example-http-server-with-graceful-shutdown",
        "title": "Real-World Example: HTTP Server with Graceful Shutdown",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "understanding-the-mechanics",
        "title": "Understanding the Mechanics",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "best-practices-for-channel-based-cancellation",
        "title": "Best Practices for Channel-Based Cancellation",
        "level": 2,
        "wordCount": 150
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 110
      }
    ],
    "totalWordCount": 1189,
    "estimatedReadingTime": 300000,
    "title": "cancellation_propagation_via_channels",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_concurrency_patterns\\worker_pool_implementation_strategies.md": {
    "path": "public\\content\\go\\advanced_concurrency_patterns\\worker_pool_implementation_strategies.md",
    "sections": [
      {
        "id": "golang-worker-pool-implementation-strategies",
        "title": "Golang Worker Pool Implementation Strategies",
        "level": 1,
        "wordCount": 27
      },
      {
        "id": "understanding-concurrency-the-foundation",
        "title": "Understanding Concurrency: The Foundation",
        "level": 2,
        "wordCount": 211
      },
      {
        "id": "worker-pools-the-concept",
        "title": "Worker Pools: The Concept",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "basic-worker-pool-implementation",
        "title": "Basic Worker Pool Implementation",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "worker-pool-with-waitgroups",
        "title": "Worker Pool with WaitGroups",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "advanced-worker-pool-with-job-struct",
        "title": "Advanced Worker Pool with Job Struct",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "worker-pool-with-context-for-cancellation",
        "title": "Worker Pool with Context for Cancellation",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "worker-pool-with-job-queue-and-dispatcher",
        "title": "Worker Pool with Job Queue and Dispatcher",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "error-handling-in-worker-pools",
        "title": "Error Handling in Worker Pools",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "rate-limited-worker-pool",
        "title": "Rate-Limited Worker Pool",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "dynamic-worker-pool",
        "title": "Dynamic Worker Pool",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "conclusion-and-best-practices",
        "title": "Conclusion and Best Practices",
        "level": 2,
        "wordCount": 160
      }
    ],
    "totalWordCount": 1183,
    "estimatedReadingTime": 300000,
    "title": "worker_pool_implementation_strategies",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_concurrency_patterns\\timeout_and_deadline_management.md": {
    "path": "public\\content\\go\\advanced_concurrency_patterns\\timeout_and_deadline_management.md",
    "sections": [
      {
        "id": "go-timeout-and-deadline-management-from-first-principles",
        "title": "Go Timeout and Deadline Management: From First Principles",
        "level": 1,
        "wordCount": 52
      },
      {
        "id": "what-are-timeouts-and-deadlines",
        "title": "What Are Timeouts and Deadlines?",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "why-do-we-need-them",
        "title": "Why Do We Need Them?",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "gos-time-package-fundamentals",
        "title": "Go's Time Package Fundamentals",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "context-package-the-foundation-of-gos-timeout-management",
        "title": "Context Package: The Foundation of Go's Timeout Management",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "http-client-timeouts",
        "title": "HTTP Client Timeouts",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "socket-connection-timeouts",
        "title": "Socket Connection Timeouts",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "database-connection-timeouts",
        "title": "Database Connection Timeouts",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "implementing-custom-timeout-logic",
        "title": "Implementing Custom Timeout Logic",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "practical-example-http-server-with-timeouts",
        "title": "Practical Example: HTTP Server with Timeouts",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "best-practices-for-timeout-management",
        "title": "Best Practices for Timeout Management",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "common-timeout-patterns",
        "title": "Common Timeout Patterns",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 119
      }
    ],
    "totalWordCount": 901,
    "estimatedReadingTime": 240000,
    "title": "timeout_and_deadline_management",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_concurrency_patterns\\resource_pooling_patterns.md": {
    "path": "public\\content\\go\\advanced_concurrency_patterns\\resource_pooling_patterns.md",
    "sections": [
      {
        "id": "go-resource-pooling-patterns-from-first-principles",
        "title": "Go Resource Pooling Patterns From First Principles",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "understanding-resources-and-why-we-need-pools",
        "title": "Understanding Resources and Why We Need Pools",
        "level": 2,
        "wordCount": 173
      },
      {
        "id": "first-principles-of-resource-pooling-in-go",
        "title": "First Principles of Resource Pooling in Go",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "basic-resource-pool-implementation",
        "title": "Basic Resource Pool Implementation",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "using-our-basic-pool",
        "title": "Using Our Basic Pool",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "implementing-the-syncpool-built-in",
        "title": "Implementing the sync.Pool Built-in",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "when-to-use-syncpool-vs-custom-pool",
        "title": "When to Use sync.Pool vs. Custom Pool",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "real-world-example-database-connection-pool",
        "title": "Real-World Example: Database Connection Pool",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "application-worker-pool-pattern",
        "title": "Application: Worker Pool Pattern",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "advanced-pattern-connection-pool-with-circuit-breaker",
        "title": "Advanced Pattern: Connection Pool with Circuit Breaker",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "implementing-leaky-bucket-rate-limiting",
        "title": "Implementing Leaky Bucket Rate Limiting",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "context-aware-resource-pooling",
        "title": "Context-Aware Resource Pooling",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "resource-pool-management-strategies",
        "title": "Resource Pool Management Strategies",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "conclusion-and-best-practices",
        "title": "Conclusion and Best Practices",
        "level": 2,
        "wordCount": 134
      }
    ],
    "totalWordCount": 1054,
    "estimatedReadingTime": 300000,
    "title": "resource_pooling_patterns",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_concurrency_patterns\\rate_limiting_implementations.md": {
    "path": "public\\content\\go\\advanced_concurrency_patterns\\rate_limiting_implementations.md",
    "sections": [
      {
        "id": "rate-limiting-in-go-from-first-principles",
        "title": "Rate Limiting in Go: From First Principles",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "understanding-rate-limiting-the-core-concept",
        "title": "Understanding Rate Limiting: The Core Concept",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "rate-limiting-algorithms-the-building-blocks",
        "title": "Rate Limiting Algorithms: The Building Blocks",
        "level": 2,
        "wordCount": 264
      },
      {
        "id": "gos-standard-library-timerate-package",
        "title": "Go's Standard Library: time/rate Package",
        "level": 2,
        "wordCount": 265
      },
      {
        "id": "practical-applications-of-rate-limiters-in-go",
        "title": "Practical Applications of Rate Limiters in Go",
        "level": 2,
        "wordCount": 237
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 160
      },
      {
        "id": "advanced-concepts-adaptive-rate-limiting",
        "title": "Advanced Concepts: Adaptive Rate Limiting",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "advanced-patterns-rate-limiting-by-multiple-dimensions",
        "title": "Advanced Patterns: Rate Limiting by Multiple Dimensions",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "hierarchical-rate-limiting",
        "title": "Hierarchical Rate Limiting",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "rate-limiting-with-queueing",
        "title": "Rate Limiting with Queueing",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 201
      }
    ],
    "totalWordCount": 1586,
    "estimatedReadingTime": 420000,
    "title": "rate_limiting_implementations",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_concurrency_patterns\\pipeline_construction_for_data_processing.md": {
    "path": "public\\content\\go\\advanced_concurrency_patterns\\pipeline_construction_for_data_processing.md",
    "sections": [
      {
        "id": "go-pipeline-construction-for-data-processing-from-first-principles",
        "title": "Go Pipeline Construction for Data Processing: From First Principles",
        "level": 1,
        "wordCount": 59
      },
      {
        "id": "1-what-is-a-pipeline",
        "title": "1. What is a Pipeline?",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "2-first-principles-of-go-concurrency",
        "title": "2. First Principles of Go Concurrency",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "3-building-blocks-of-go-pipelines",
        "title": "3. Building Blocks of Go Pipelines",
        "level": 2,
        "wordCount": 217
      },
      {
        "id": "4-complete-pipeline-example",
        "title": "4. Complete Pipeline Example",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "5-managing-pipeline-cancellation",
        "title": "5. Managing Pipeline Cancellation",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "6-error-handling-in-pipelines",
        "title": "6. Error Handling in Pipelines",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "7-advanced-pipeline-patterns",
        "title": "7. Advanced Pipeline Patterns",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "8-real-world-example-log-processing-pipeline",
        "title": "8. Real-World Example: Log Processing Pipeline",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "9-best-practices-for-go-pipelines",
        "title": "9. Best Practices for Go Pipelines",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "10-conclusion",
        "title": "10. Conclusion",
        "level": 2,
        "wordCount": 137
      }
    ],
    "totalWordCount": 999,
    "estimatedReadingTime": 240000,
    "title": "pipeline_construction_for_data_processing",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_concurrency_patterns\\futures_and_promises_in_go.md": {
    "path": "public\\content\\go\\advanced_concurrency_patterns\\futures_and_promises_in_go.md",
    "sections": [
      {
        "id": "understanding-futures-and-promises-in-go-from-first-principles",
        "title": "Understanding Futures and Promises in Go from First Principles",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "what-are-futures-and-promises",
        "title": "What Are Futures and Promises?",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "gos-approach-to-concurrency",
        "title": "Go's Approach to Concurrency",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "implementing-future-like-patterns-in-go",
        "title": "Implementing Future-like Patterns in Go",
        "level": 2,
        "wordCount": 182
      },
      {
        "id": "promise-pattern-in-go",
        "title": "Promise Pattern in Go",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "practical-examples-in-real-world-go-code",
        "title": "Practical Examples in Real-World Go Code",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "comparison-with-context-and-select",
        "title": "Comparison with Context and Select",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "error-handling",
        "title": "Error Handling",
        "level": 2,
        "wordCount": 23
      },
      {
        "id": "comparing-gos-approach-to-other-languages",
        "title": "Comparing Go's Approach to Other Languages",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "when-to-use-future-patterns-in-go",
        "title": "When to Use Future Patterns in Go",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 147
      }
    ],
    "totalWordCount": 969,
    "estimatedReadingTime": 240000,
    "title": "futures_and_promises_in_go",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_concurrency_patterns\\context_package_for_cancellation.md": {
    "path": "public\\content\\go\\advanced_concurrency_patterns\\context_package_for_cancellation.md",
    "sections": [
      {
        "id": "understanding-gos-context-package-from-first-principles",
        "title": "Understanding Go's Context Package from First Principles",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "what-is-a-context",
        "title": "What is a Context?",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "why-do-we-need-context",
        "title": "Why Do We Need Context?",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "how-context-enables-cancellation",
        "title": "How Context Enables Cancellation",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "creating-and-using-contexts",
        "title": "Creating and Using Contexts",
        "level": 2,
        "wordCount": 194
      },
      {
        "id": "context-values",
        "title": "Context Values",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "best-practices-for-using-context",
        "title": "Best Practices for Using Context",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "real-world-example-http-client-with-timeout",
        "title": "Real-World Example: HTTP Client with Timeout",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "context-propagation-in-microservices",
        "title": "Context Propagation in Microservices",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "error-handling-with-context",
        "title": "Error Handling with Context",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 107
      }
    ],
    "totalWordCount": 941,
    "estimatedReadingTime": 240000,
    "title": "context_package_for_cancellation",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_concurrency_patterns\\concurrent_map_implementations.md": {
    "path": "public\\content\\go\\advanced_concurrency_patterns\\concurrent_map_implementations.md",
    "sections": [
      {
        "id": "understanding-gos-concurrent-map-implementations-from-first-principles",
        "title": "Understanding Go's Concurrent Map Implementations from First Principles",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "1-the-problem-why-regular-maps-arent-thread-safe",
        "title": "1. The Problem: Why Regular Maps Aren't Thread-Safe",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "2-first-solution-mutex-protected-maps",
        "title": "2. First Solution: Mutex-Protected Maps",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "3-improving-with-read-write-mutex-rwmutex",
        "title": "3. Improving with Read-Write Mutex (RWMutex)",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "4-the-syncmap-solution",
        "title": "4. The sync.Map Solution",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "5-understanding-syncmaps-implementation",
        "title": "5. Understanding sync.Map's Implementation",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "6-shardedpartitioned-maps",
        "title": "6. Sharded/Partitioned Maps",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "7-performance-considerations-and-tradeoffs",
        "title": "7. Performance Considerations and Tradeoffs",
        "level": 2,
        "wordCount": 227
      },
      {
        "id": "8-real-world-example-a-concurrent-cache",
        "title": "8. Real-World Example: A Concurrent Cache",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "9-advanced-techniques-lock-free-maps",
        "title": "9. Advanced Techniques: Lock-Free Maps",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "10-conclusion-choosing-the-right-implementation",
        "title": "10. Conclusion: Choosing the Right Implementation",
        "level": 2,
        "wordCount": 129
      }
    ],
    "totalWordCount": 1148,
    "estimatedReadingTime": 300000,
    "title": "concurrent_map_implementations",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_concurrency_patterns\\broadcast_and_subscription_models.md": {
    "path": "public\\content\\go\\advanced_concurrency_patterns\\broadcast_and_subscription_models.md",
    "sections": [
      {
        "id": "go-broadcast-and-subscription-models-a-first-principles-approach",
        "title": "Go Broadcast and Subscription Models: A First Principles Approach",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "starting-from-first-principles",
        "title": "Starting from First Principles",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "foundational-concepts",
        "title": "Foundational Concepts",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "the-simple-pub-sub-model",
        "title": "The Simple Pub-Sub Model",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "topic-based-subscription",
        "title": "Topic-Based Subscription",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "more-advanced-pattern-based-subscription",
        "title": "More Advanced: Pattern-Based Subscription",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "advanced-context-aware-subscription",
        "title": "Advanced: Context-Aware Subscription",
        "level": 2,
        "wordCount": 19
      },
      {
        "id": "real-world-application-event-bus",
        "title": "Real-World Application: Event Bus",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "real-world-libraries",
        "title": "Real-World Libraries",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "best-practices",
        "title": "Best Practices",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 80
      }
    ],
    "totalWordCount": 734,
    "estimatedReadingTime": 180000,
    "title": "broadcast_and_subscription_models",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_concurrency_patterns\\bounded_concurrency_patterns.md": {
    "path": "public\\content\\go\\advanced_concurrency_patterns\\bounded_concurrency_patterns.md",
    "sections": [
      {
        "id": "golang-bounded-concurrency-patterns-from-first-principles",
        "title": "Golang Bounded Concurrency Patterns from First Principles",
        "level": 1,
        "wordCount": 31
      },
      {
        "id": "understanding-concurrency-the-foundation",
        "title": "Understanding Concurrency: The Foundation",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "what-are-goroutines",
        "title": "What are Goroutines?",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "the-problem-unbounded-concurrency",
        "title": "The Problem: Unbounded Concurrency",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "first-principles-of-bounded-concurrency",
        "title": "First Principles of Bounded Concurrency",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "pattern-1-worker-pool-with-waitgroup",
        "title": "Pattern 1: Worker Pool with WaitGroup",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "pattern-2-semaphore-pattern",
        "title": "Pattern 2: Semaphore Pattern",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "pattern-3-rate-limiting-with-time-throttling",
        "title": "Pattern 3: Rate Limiting with Time Throttling",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "pattern-4-combined-worker-pool-with-rate-limiting",
        "title": "Pattern 4: Combined Worker Pool with Rate Limiting",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "pattern-5-cancellation-with-context",
        "title": "Pattern 5: Cancellation with Context",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "pattern-6-error-handling-and-circuit-breaking",
        "title": "Pattern 6: Error Handling and Circuit Breaking",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "real-world-considerations",
        "title": "Real-World Considerations",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 137
      }
    ],
    "totalWordCount": 964,
    "estimatedReadingTime": 240000,
    "title": "bounded_concurrency_patterns",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_channel_patterns\\throttling_patterns_with_channels.md": {
    "path": "public\\content\\go\\advanced_channel_patterns\\throttling_patterns_with_channels.md",
    "sections": [
      {
        "id": "go-throttling-patterns-with-channels-a-first-principles-approach",
        "title": "Go Throttling Patterns with Channels: A First Principles Approach",
        "level": 1,
        "wordCount": 31
      },
      {
        "id": "what-is-throttling",
        "title": "What is Throttling?",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "channels-the-foundation-of-go-concurrency",
        "title": "Channels: The Foundation of Go Concurrency",
        "level": 2,
        "wordCount": 189
      },
      {
        "id": "basic-throttling-patterns-in-go",
        "title": "Basic Throttling Patterns in Go",
        "level": 2,
        "wordCount": 336
      },
      {
        "id": "advanced-throttling-patterns",
        "title": "Advanced Throttling Patterns",
        "level": 2,
        "wordCount": 214
      },
      {
        "id": "practical-example-http-api-client-with-rate-limiting",
        "title": "Practical Example: HTTP API Client with Rate Limiting",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "common-patterns-and-best-practices",
        "title": "Common Patterns and Best Practices",
        "level": 2,
        "wordCount": 134
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 107
      }
    ],
    "totalWordCount": 1193,
    "estimatedReadingTime": 300000,
    "title": "throttling_patterns_with_channels",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_channel_patterns\\synchronous_vs_asynchronous_messaging.md": {
    "path": "public\\content\\go\\advanced_channel_patterns\\synchronous_vs_asynchronous_messaging.md",
    "sections": [
      {
        "id": "go-channels-synchronous-vs-asynchronous-messaging",
        "title": "Go Channels: Synchronous vs. Asynchronous Messaging",
        "level": 1,
        "wordCount": 33
      },
      {
        "id": "what-are-channels-in-go",
        "title": "What Are Channels in Go?",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "first-principles-of-concurrent-communication",
        "title": "First Principles of Concurrent Communication",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "creating-and-using-channels-in-go",
        "title": "Creating and Using Channels in Go",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "synchronous-messaging-unbuffered-channels",
        "title": "Synchronous Messaging (Unbuffered Channels)",
        "level": 2,
        "wordCount": 144
      },
      {
        "id": "asynchronous-messaging-buffered-channels",
        "title": "Asynchronous Messaging (Buffered Channels)",
        "level": 2,
        "wordCount": 164
      },
      {
        "id": "comparing-synchronous-and-asynchronous-channels",
        "title": "Comparing Synchronous and Asynchronous Channels",
        "level": 2,
        "wordCount": 157
      },
      {
        "id": "channel-direction",
        "title": "Channel Direction",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "select-statement-with-channels",
        "title": "Select Statement with Channels",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "patterns-and-best-practices",
        "title": "Patterns and Best Practices",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "common-pitfalls",
        "title": "Common Pitfalls",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "real-world-examples",
        "title": "Real-World Examples",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "summary-when-to-use-which-type-of-channel",
        "title": "Summary: When to Use Which Type of Channel",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 98
      }
    ],
    "totalWordCount": 1226,
    "estimatedReadingTime": 300000,
    "title": "synchronous_vs_asynchronous_messaging",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_channel_patterns\\recursive_channel_algorithms.md": {
    "path": "public\\content\\go\\advanced_channel_patterns\\recursive_channel_algorithms.md",
    "sections": [
      {
        "id": "golang-recursive-channel-algorithms-a-first-principles-exploration",
        "title": "Golang Recursive Channel Algorithms: A First Principles Exploration",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "1-understanding-channels-in-go-from-first-principles",
        "title": "1. Understanding Channels in Go from First Principles",
        "level": 2,
        "wordCount": 152
      },
      {
        "id": "2-recursion-from-first-principles",
        "title": "2. Recursion from First Principles",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "3-combining-recursion-and-channels",
        "title": "3. Combining Recursion and Channels",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "4-tree-traversal-with-recursive-channels",
        "title": "4. Tree Traversal with Recursive Channels",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "5-concurrent-recursive-processing-with-channels",
        "title": "5. Concurrent Recursive Processing with Channels",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "6-producer-consumer-pattern-with-recursive-generation",
        "title": "6. Producer-Consumer Pattern with Recursive Generation",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "7-bounded-recursion-with-channel-feedback",
        "title": "7. Bounded Recursion with Channel Feedback",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "8-mutual-recursion-with-channels",
        "title": "8. Mutual Recursion with Channels",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "9-parallelizing-recursive-divide-and-conquer-algorithms",
        "title": "9. Parallelizing Recursive Divide-and-Conquer Algorithms",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "10-advanced-pattern-recursive-pipeline-with-feedback",
        "title": "10. Advanced Pattern: Recursive Pipeline with Feedback",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "conclusion-the-power-of-recursive-channel-algorithms",
        "title": "Conclusion: The Power of Recursive Channel Algorithms",
        "level": 2,
        "wordCount": 179
      }
    ],
    "totalWordCount": 1041,
    "estimatedReadingTime": 300000,
    "title": "recursive_channel_algorithms",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_channel_patterns\\implementing_timeouts_and_deadlines.md": {
    "path": "public\\content\\go\\advanced_channel_patterns\\implementing_timeouts_and_deadlines.md",
    "sections": [
      {
        "id": "golang-implementing-timeouts-and-deadlines-from-first-principles",
        "title": "Golang: Implementing Timeouts and Deadlines from First Principles",
        "level": 1,
        "wordCount": 37
      },
      {
        "id": "1-why-time-constraints-matter-first-principles",
        "title": "1. Why Time Constraints Matter: First Principles",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "2-time-in-go-the-fundamental-building-blocks",
        "title": "2. Time in Go: The Fundamental Building Blocks",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "3-context-gos-timeout-foundation",
        "title": "3. Context: Go's Timeout Foundation",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "4-practical-implementation-http-requests-with-timeouts",
        "title": "4. Practical Implementation: HTTP Requests with Timeouts",
        "level": 2,
        "wordCount": 126
      },
      {
        "id": "5-advanced-example-database-queries-with-timeouts",
        "title": "5. Advanced Example: Database Queries with Timeouts",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "6-implementing-custom-timeouts-with-channels",
        "title": "6. Implementing Custom Timeouts with Channels",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "7-using-deadline-aware-io-operations",
        "title": "7. Using Deadline-Aware I/O Operations",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "8-best-practices-for-implementing-timeouts",
        "title": "8. Best Practices for Implementing Timeouts",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "9-real-world-example-timeout-aware-web-server",
        "title": "9. Real-World Example: Timeout-Aware Web Server",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "10-understanding-the-underlying-mechanisms",
        "title": "10. Understanding the Underlying Mechanisms",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 116
      }
    ],
    "totalWordCount": 1061,
    "estimatedReadingTime": 300000,
    "title": "implementing_timeouts_and_deadlines",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_channel_patterns\\implementing_priority_queues.md": {
    "path": "public\\content\\go\\advanced_channel_patterns\\implementing_priority_queues.md",
    "sections": [
      {
        "id": "priority-queues-using-channels-in-go-from-first-principles",
        "title": "Priority Queues Using Channels in Go: From First Principles",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "1-understanding-the-fundamentals",
        "title": "1. Understanding the Fundamentals",
        "level": 2,
        "wordCount": 154
      },
      {
        "id": "2-the-connection-from-channels-to-priority-queues",
        "title": "2. The Connection: From Channels to Priority Queues",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "3-building-a-basic-priority-queue",
        "title": "3. Building a Basic Priority Queue",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "4-implementing-basic-operations",
        "title": "4. Implementing Basic Operations",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "5-a-critical-issue-blocking-operations",
        "title": "5. A Critical Issue: Blocking Operations",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "6-a-complete-example-with-real-world-application",
        "title": "6. A Complete Example with Real-World Application",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "7-advanced-implementation-efficient-waiting-with-multiple-channels",
        "title": "7. Advanced Implementation: Efficient Waiting with Multiple Channels",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "8-a-better-advanced-solution-priority-selection",
        "title": "8. A Better Advanced Solution: Priority Selection",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "9-real-world-considerations-and-tradeoffs",
        "title": "9. Real-World Considerations and Tradeoffs",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "10-practical-example-job-scheduler",
        "title": "10. Practical Example: Job Scheduler",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "11-conclusion-the-power-of-combining-go-concepts",
        "title": "11. Conclusion: The Power of Combining Go Concepts",
        "level": 2,
        "wordCount": 121
      }
    ],
    "totalWordCount": 871,
    "estimatedReadingTime": 240000,
    "title": "implementing_priority_queues",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_channel_patterns\\implementing_futures_with_channels.md": {
    "path": "public\\content\\go\\advanced_channel_patterns\\implementing_futures_with_channels.md",
    "sections": [
      {
        "id": "implementing-futures-with-channels-in-go-a-first-principles-approach",
        "title": "Implementing Futures with Channels in Go: A First Principles Approach",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "1-understanding-the-core-concepts",
        "title": "1. Understanding the Core Concepts",
        "level": 2,
        "wordCount": 149
      },
      {
        "id": "2-building-a-future-pattern-from-first-principles",
        "title": "2. Building a Future Pattern From First Principles",
        "level": 2,
        "wordCount": 201
      },
      {
        "id": "3-building-a-complete-future-implementation",
        "title": "3. Building a Complete Future Implementation",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "4-advanced-patterns-with-futures",
        "title": "4. Advanced Patterns with Futures",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "5-real-world-example-concurrent-api-requests",
        "title": "5. Real-World Example: Concurrent API Requests",
        "level": 2,
        "wordCount": 21
      },
      {
        "id": "6-understanding-the-implementation-details",
        "title": "6. Understanding the Implementation Details",
        "level": 2,
        "wordCount": 197
      },
      {
        "id": "7-conclusion",
        "title": "7. Conclusion",
        "level": 2,
        "wordCount": 115
      }
    ],
    "totalWordCount": 825,
    "estimatedReadingTime": 240000,
    "title": "implementing_futures_with_channels",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_channel_patterns\\implementing_complex_state_machines.md": {
    "path": "public\\content\\go\\advanced_channel_patterns\\implementing_complex_state_machines.md",
    "sections": [
      {
        "id": "implementing-complex-state-machines-in-go-with-channels",
        "title": "Implementing Complex State Machines in Go with Channels",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "what-is-a-state-machine",
        "title": "What is a State Machine?",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "why-go-channels-for-state-machines",
        "title": "Why Go Channels for State Machines?",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "building-blocks-channels-and-events",
        "title": "Building Blocks: Channels and Events",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "simple-state-machine-example",
        "title": "Simple State Machine Example",
        "level": 2,
        "wordCount": 153
      },
      {
        "id": "adding-actions-to-transitions",
        "title": "Adding Actions to Transitions",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "handling-complex-state-with-additional-data",
        "title": "Handling Complex State with Additional Data",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "multiple-channel-patterns-for-complex-logic",
        "title": "Multiple Channel Patterns for Complex Logic",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "using-context-for-cancelation",
        "title": "Using Context for Cancelation",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "real-world-example-http-server-state-machine",
        "title": "Real-World Example: HTTP Server State Machine",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "advanced-pattern-hierarchical-state-machines-hsm",
        "title": "Advanced Pattern: Hierarchical State Machines (HSM)",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "best-practices-and-considerations",
        "title": "Best Practices and Considerations",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "testing-state-machines",
        "title": "Testing State Machines",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 97
      }
    ],
    "totalWordCount": 1160,
    "estimatedReadingTime": 300000,
    "title": "implementing_complex_state_machines",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_channel_patterns\\composable_channel_operations.md": {
    "path": "public\\content\\go\\advanced_channel_patterns\\composable_channel_operations.md",
    "sections": [
      {
        "id": "golang-composable-channel-operations-from-first-principles",
        "title": "Golang Composable Channel Operations: From First Principles",
        "level": 1,
        "wordCount": 27
      },
      {
        "id": "1-understanding-channels-the-basic-building-block",
        "title": "1. Understanding Channels - The Basic Building Block",
        "level": 2,
        "wordCount": 186
      },
      {
        "id": "2-the-problem-channels-solve-concurrency-coordination",
        "title": "2. The Problem Channels Solve: Concurrency Coordination",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "3-the-select-statement-the-foundation-of-composition",
        "title": "3. The Select Statement: The Foundation of Composition",
        "level": 2,
        "wordCount": 142
      },
      {
        "id": "4-composable-patterns-with-channels-and-select",
        "title": "4. Composable Patterns with Channels and Select",
        "level": 2,
        "wordCount": 192
      },
      {
        "id": "5-advanced-composition-pipelines",
        "title": "5. Advanced Composition: Pipelines",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "6-practical-example-building-a-concurrent-web-crawler",
        "title": "6. Practical Example: Building a Concurrent Web Crawler",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "7-common-patterns-for-channel-closing-and-cleanup",
        "title": "7. Common Patterns for Channel Closing and Cleanup",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "8-understanding-channel-behaviors-and-gotchas",
        "title": "8. Understanding Channel Behaviors and Gotchas",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "9-real-world-applications-and-best-practices",
        "title": "9. Real-World Applications and Best Practices",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "10-conclusion-and-further-learning",
        "title": "10. Conclusion and Further Learning",
        "level": 2,
        "wordCount": 157
      }
    ],
    "totalWordCount": 1250,
    "estimatedReadingTime": 300000,
    "title": "composable_channel_operations",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_channel_patterns\\batching_strategies_with_channels.md": {
    "path": "public\\content\\go\\advanced_channel_patterns\\batching_strategies_with_channels.md",
    "sections": [
      {
        "id": "golang-batching-strategies-with-channels-from-first-principles",
        "title": "Golang Batching Strategies with Channels: From First Principles",
        "level": 1,
        "wordCount": 64
      },
      {
        "id": "1-understanding-go-channels-the-foundation",
        "title": "1. Understanding Go Channels: The Foundation",
        "level": 2,
        "wordCount": 162
      },
      {
        "id": "2-why-batching-matters-the-problem",
        "title": "2. Why Batching Matters: The Problem",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "3-basic-batching-with-channels-first-approach",
        "title": "3. Basic Batching with Channels: First Approach",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "4-time-based-batching-adding-a-timer",
        "title": "4. Time-Based Batching: Adding a Timer",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "5-multiple-workers-parallel-batch-processing",
        "title": "5. Multiple Workers: Parallel Batch Processing",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "6-backpressure-handling-preventing-overload",
        "title": "6. Backpressure Handling: Preventing Overload",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "7-dynamic-batch-sizing-adapting-to-load",
        "title": "7. Dynamic Batch Sizing: Adapting to Load",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "8-real-world-example-batch-database-inserts",
        "title": "8. Real-World Example: Batch Database Inserts",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "9-managing-batch-size-tradeoffs",
        "title": "9. Managing Batch Size Tradeoffs",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "10-combining-strategies-a-complete-solution",
        "title": "10. Combining Strategies: A Complete Solution",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "11-testing-batching-strategies",
        "title": "11. Testing Batching Strategies",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 137
      }
    ],
    "totalWordCount": 1132,
    "estimatedReadingTime": 300000,
    "title": "batching_strategies_with_channels",
    "frontmatter": {}
  },
  "public\\content\\go\\advanced_channel_patterns\\advanced_error_handling_with_channels.md": {
    "path": "public\\content\\go\\advanced_channel_patterns\\advanced_error_handling_with_channels.md",
    "sections": [
      {
        "id": "advanced-error-handling-with-channels-in-go",
        "title": "Advanced Error Handling with Channels in Go",
        "level": 1,
        "wordCount": 24
      },
      {
        "id": "understanding-channels-the-foundation",
        "title": "Understanding Channels: The Foundation",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "the-need-for-error-handling-with-channels",
        "title": "The Need for Error Handling with Channels",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "technique-1-using-select-with-default-case",
        "title": "Technique 1: Using Select with Default Case",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "technique-2-error-channels",
        "title": "Technique 2: Error Channels",
        "level": 2,
        "wordCount": 126
      },
      {
        "id": "technique-3-structured-error-types",
        "title": "Technique 3: Structured Error Types",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "technique-4-done-channel-pattern",
        "title": "Technique 4: Done Channel Pattern",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "technique-5-result-struct-pattern",
        "title": "Technique 5: Result Struct Pattern",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "technique-6-context-based-cancellation",
        "title": "Technique 6: Context-Based Cancellation",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "deep-dive-error-handling-patterns-in-production-systems",
        "title": "Deep Dive: Error Handling Patterns in Production Systems",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "technique-7-fan-outfan-in-with-error-handling",
        "title": "Technique 7: Fan-Out/Fan-In with Error Handling",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "key-best-practices",
        "title": "Key Best Practices",
        "level": 2,
        "wordCount": 149
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 124
      }
    ],
    "totalWordCount": 1252,
    "estimatedReadingTime": 360000,
    "title": "advanced_error_handling_with_channels",
    "frontmatter": {}
  },
  "public\\content\\git\\rebase\\interactive_rebasing.md": {
    "path": "public\\content\\git\\rebase\\interactive_rebasing.md",
    "sections": [
      {
        "id": "understanding-interactive-rebasing-in-git",
        "title": "Understanding Interactive Rebasing in Git",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "first-principles-what-is-a-git-commit",
        "title": "First Principles: What is a Git Commit?",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "what-is-rebasing",
        "title": "What is Rebasing?",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "interactive-rebasing-the-core-concept",
        "title": "Interactive Rebasing: The Core Concept",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "the-mental-model-commits-as-patches",
        "title": "The Mental Model: Commits as Patches",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "when-to-use-interactive-rebasing",
        "title": "When to Use Interactive Rebasing",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "the-interactive-rebasing-process",
        "title": "The Interactive Rebasing Process",
        "level": 2,
        "wordCount": 290
      },
      {
        "id": "real-world-examples",
        "title": "Real-World Examples",
        "level": 2,
        "wordCount": 147
      },
      {
        "id": "potential-pitfalls-and-how-to-handle-them",
        "title": "Potential Pitfalls and How to Handle Them",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "advanced-interactive-rebasing-techniques",
        "title": "Advanced Interactive Rebasing Techniques",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "practical-workflow-example",
        "title": "Practical Workflow Example",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "conclusion-the-philosophy-of-interactive-rebasing",
        "title": "Conclusion: The Philosophy of Interactive Rebasing",
        "level": 2,
        "wordCount": 105
      }
    ],
    "totalWordCount": 1220,
    "estimatedReadingTime": 300000,
    "title": "interactive_rebasing",
    "frontmatter": {}
  },
  "public\\content\\git\\rebase\\git_rebasing_vs_merging.md": {
    "path": "public\\content\\git\\rebase\\git_rebasing_vs_merging.md",
    "sections": [
      {
        "id": "git-rebasing-vs-merging-a-first-principles-exploration",
        "title": "Git Rebasing vs. Merging: A First Principles Exploration",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "1-gits-core-data-model",
        "title": "1. Git's Core Data Model",
        "level": 2,
        "wordCount": 156
      },
      {
        "id": "2-understanding-divergent-history",
        "title": "2. Understanding Divergent History",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "3-the-problem-bringing-changes-together",
        "title": "3. The Problem: Bringing Changes Together",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "4-merging-the-direct-approach",
        "title": "4. Merging: The Direct Approach",
        "level": 2,
        "wordCount": 206
      },
      {
        "id": "5-rebasing-the-linear-approach",
        "title": "5. Rebasing: The Linear Approach",
        "level": 2,
        "wordCount": 199
      },
      {
        "id": "6-the-deeper-distinction-history-preservation-vs-history-rewriting",
        "title": "6. The Deeper Distinction: History Preservation vs. History Rewriting",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "7-working-with-remote-branches",
        "title": "7. Working with Remote Branches",
        "level": 2,
        "wordCount": 170
      },
      {
        "id": "8-practical-workflow-patterns",
        "title": "8. Practical Workflow Patterns",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "9-hybrid-approach-squash-and-merge",
        "title": "9. Hybrid Approach: \"Squash and Merge\"",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "10-practical-commands-for-different-scenarios",
        "title": "10. Practical Commands for Different Scenarios",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 130
      }
    ],
    "totalWordCount": 1269,
    "estimatedReadingTime": 360000,
    "title": "git_rebasing_vs_merging",
    "frontmatter": {}
  },
  "public\\content\\git\\rebase\\git_rebase.md": {
    "path": "public\\content\\git\\rebase\\git_rebase.md",
    "sections": [
      {
        "id": "understanding-git-rebase-from-first-principles",
        "title": "Understanding Git Rebase from First Principles",
        "level": 1,
        "wordCount": 48
      },
      {
        "id": "what-is-a-git-branch",
        "title": "What is a Git Branch?",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "what-is-a-base-in-git",
        "title": "What is a Base in Git?",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "the-problem-that-rebase-solves",
        "title": "The Problem That Rebase Solves",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "git-rebase-the-conceptual-model",
        "title": "Git Rebase: The Conceptual Model",
        "level": 2,
        "wordCount": 173
      },
      {
        "id": "git-rebase-step-by-step-a-practical-example",
        "title": "Git Rebase Step-by-Step: A Practical Example",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "what-happens-during-rebase-conflicts",
        "title": "What Happens During Rebase Conflicts?",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "interactive-rebase-a-powerful-extension",
        "title": "Interactive Rebase: A Powerful Extension",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "the-philosophy-behind-rebase-linear-history",
        "title": "The Philosophy Behind Rebase: Linear History",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "when-to-use-rebase-vs-merge",
        "title": "When to Use Rebase vs. Merge",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "best-practices-for-rebasing",
        "title": "Best Practices for Rebasing",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 83
      }
    ],
    "totalWordCount": 1122,
    "estimatedReadingTime": 300000,
    "title": "git_rebase",
    "frontmatter": {}
  },
  "public\\content\\git\\objects\\tree_objects.md": {
    "path": "public\\content\\git\\objects\\tree_objects.md",
    "sections": [
      {
        "id": "understanding-tree-objects-from-first-principles",
        "title": "Understanding Tree Objects: From First Principles",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "the-problem-trees-solve",
        "title": "The Problem Trees Solve",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "what-is-a-tree-object",
        "title": "What Is a Tree Object?",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "the-structure-of-a-tree-object",
        "title": "The Structure of a Tree Object",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "creating-a-tree-object-a-concrete-example",
        "title": "Creating a Tree Object: A Concrete Example",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "trees-and-nested-directories",
        "title": "Trees and Nested Directories",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "trees-and-immutability",
        "title": "Trees and Immutability",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "examining-trees-in-git",
        "title": "Examining Trees in Git",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "how-trees-connect-to-commits",
        "title": "How Trees Connect to Commits",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "trees-in-action-comparing-snapshots",
        "title": "Trees in Action: Comparing Snapshots",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "implementation-details-tree-serialization",
        "title": "Implementation Details: Tree Serialization",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "practical-example-creating-trees-programmatically",
        "title": "Practical Example: Creating Trees Programmatically",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "trees-vs-working-directory-vs-index",
        "title": "Trees vs. Working Directory vs. Index",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 70
      }
    ],
    "totalWordCount": 896,
    "estimatedReadingTime": 240000,
    "title": "tree_objects",
    "frontmatter": {}
  },
  "public\\content\\git\\objects\\tag_objects.md": {
    "path": "public\\content\\git\\objects\\tag_objects.md",
    "sections": [
      {
        "id": "git-tag-objects-a-first-principles-exploration",
        "title": "Git Tag Objects: A First Principles Exploration",
        "level": 1,
        "wordCount": 52
      },
      {
        "id": "starting-with-gits-object-model",
        "title": "Starting with Git's Object Model",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "what-is-a-git-tag-object",
        "title": "What Is a Git Tag Object?",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "types-of-git-tags",
        "title": "Types of Git Tags",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "tag-objects-the-internal-structure",
        "title": "Tag Objects: The Internal Structure",
        "level": 2,
        "wordCount": 140
      },
      {
        "id": "creating-tags-from-first-principles",
        "title": "Creating Tags from First Principles",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "tags-vs-branches-a-deeper-comparison",
        "title": "Tags vs. Branches: A Deeper Comparison",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "tag-objects-in-the-git-workflow",
        "title": "Tag Objects in the Git Workflow",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "the-relationship-between-tags-and-other-git-objects",
        "title": "The Relationship Between Tags and Other Git Objects",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "advanced-tag-usage",
        "title": "Advanced Tag Usage",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 128
      }
    ],
    "totalWordCount": 1041,
    "estimatedReadingTime": 300000,
    "title": "tag_objects",
    "frontmatter": {}
  },
  "public\\content\\git\\objects\\object_verification.md": {
    "path": "public\\content\\git\\objects\\object_verification.md",
    "sections": [
      {
        "id": "git-object-verification-and-repository-integrity",
        "title": "Git Object Verification and Repository Integrity",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "the-foundation-gits-content-addressable-storage",
        "title": "The Foundation: Git's Content-Addressable Storage",
        "level": 2,
        "wordCount": 204
      },
      {
        "id": "verification-mechanisms-ensuring-integrity",
        "title": "Verification Mechanisms: Ensuring Integrity",
        "level": 2,
        "wordCount": 189
      },
      {
        "id": "practical-integrity-scenarios",
        "title": "Practical Integrity Scenarios",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "the-git-reflog-your-safety-net",
        "title": "The Git Reflog: Your Safety Net",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "cryptographic-signing-adding-human-verification",
        "title": "Cryptographic Signing: Adding Human Verification",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "understanding-gits-security-model",
        "title": "Understanding Git's Security Model",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "a-practical-mental-model",
        "title": "A Practical Mental Model",
        "level": 2,
        "wordCount": 120
      }
    ],
    "totalWordCount": 760,
    "estimatedReadingTime": 240000,
    "title": "object_verification",
    "frontmatter": {}
  },
  "public\\content\\git\\objects\\loose_vs_packed_formats.md": {
    "path": "public\\content\\git\\objects\\loose_vs_packed_formats.md",
    "sections": [
      {
        "id": "git-object-storage-loose-vs-packed-formats",
        "title": "Git Object Storage: Loose vs. Packed Formats",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "the-foundation-git-as-a-content-addressable-filesystem",
        "title": "The Foundation: Git as a Content-Addressable Filesystem",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "1-the-loose-object-format",
        "title": "1. The Loose Object Format",
        "level": 2,
        "wordCount": 272
      },
      {
        "id": "2-the-packed-object-format",
        "title": "2. The Packed Object Format",
        "level": 2,
        "wordCount": 266
      },
      {
        "id": "3-when-and-how-objects-get-packed",
        "title": "3. When and How Objects Get Packed",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "4-implementation-details",
        "title": "4. Implementation Details",
        "level": 2,
        "wordCount": 166
      },
      {
        "id": "5-practical-implications",
        "title": "5. Practical Implications",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 105
      }
    ],
    "totalWordCount": 1131,
    "estimatedReadingTime": 300000,
    "title": "loose_vs_packed_formats",
    "frontmatter": {}
  },
  "public\\content\\git\\objects\\lifecycle.md": {
    "path": "public\\content\\git\\objects\\lifecycle.md",
    "sections": [
      {
        "id": "git-object-lifecycle-from-creation-to-garbage-collection",
        "title": "Git Object Lifecycle: From Creation to Garbage Collection",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "the-foundation-gits-data-model",
        "title": "The Foundation: Git's Data Model",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "object-creation",
        "title": "Object Creation",
        "level": 2,
        "wordCount": 198
      },
      {
        "id": "object-storage",
        "title": "Object Storage",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "object-referencing",
        "title": "Object Referencing",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "object-packing",
        "title": "Object Packing",
        "level": 2,
        "wordCount": 125
      },
      {
        "id": "garbage-collection",
        "title": "Garbage Collection",
        "level": 2,
        "wordCount": 240
      },
      {
        "id": "dangling-objects",
        "title": "Dangling Objects",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "the-reflog-object-safety-net",
        "title": "The Reflog: Object Safety Net",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "a-complete-object-lifecycle",
        "title": "A Complete Object Lifecycle",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "best-practices-for-managing-git-objects",
        "title": "Best Practices for Managing Git Objects",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 88
      }
    ],
    "totalWordCount": 1149,
    "estimatedReadingTime": 300000,
    "title": "lifecycle",
    "frontmatter": {}
  },
  "public\\content\\git\\objects\\inspecting_git_objects.md": {
    "path": "public\\content\\git\\objects\\inspecting_git_objects.md",
    "sections": [
      {
        "id": "understanding-git-cat-file-inspecting-git-objects-from-first-principles",
        "title": "Understanding `git cat-file`: Inspecting Git Objects from First Principles",
        "level": 1,
        "wordCount": 44
      },
      {
        "id": "the-foundation-gits-object-model",
        "title": "The Foundation: Git's Object Model",
        "level": 2,
        "wordCount": 137
      },
      {
        "id": "enter-git-cat-file-your-window-into-git-objects",
        "title": "Enter `git cat-file`: Your Window into Git Objects",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "basic-syntax-and-options",
        "title": "Basic Syntax and Options",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "example-1-examining-a-commit-object",
        "title": "Example 1: Examining a Commit Object",
        "level": 2,
        "wordCount": 129
      },
      {
        "id": "example-2-exploring-a-tree-object",
        "title": "Example 2: Exploring a Tree Object",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "example-3-examining-a-blob-object",
        "title": "Example 3: Examining a Blob Object",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "example-4-following-the-object-graph",
        "title": "Example 4: Following the Object Graph",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "understanding-git-object-hashes",
        "title": "Understanding Git Object Hashes",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "practical-uses-of-git-cat-file",
        "title": "Practical Uses of `git cat-file`",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "advanced-git-cat-file-features",
        "title": "Advanced `git cat-file` Features",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "the-relationship-between-git-cat-file-and-git-internals",
        "title": "The Relationship Between `git cat-file` and Git Internals",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "git-plumbing-vs-porcelain-commands",
        "title": "Git Plumbing vs. Porcelain Commands",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 110
      }
    ],
    "totalWordCount": 1023,
    "estimatedReadingTime": 300000,
    "title": "inspecting_git_objects",
    "frontmatter": {}
  },
  "public\\content\\git\\objects\\git_objects.md": {
    "path": "public\\content\\git\\objects\\git_objects.md",
    "sections": [
      {
        "id": "understanding-git-objects-blobs-trees-commits-and-tags",
        "title": "Understanding Git Objects: Blobs, Trees, Commits, and Tags",
        "level": 1,
        "wordCount": 67
      },
      {
        "id": "the-foundation-git-as-a-content-addressable-filesystem",
        "title": "The Foundation: Git as a Content-Addressable Filesystem",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "1-blobs-the-content-containers",
        "title": "1. Blobs: The Content Containers",
        "level": 2,
        "wordCount": 206
      },
      {
        "id": "2-trees-the-directory-structure",
        "title": "2. Trees: The Directory Structure",
        "level": 2,
        "wordCount": 205
      },
      {
        "id": "3-commits-the-history-snapshots",
        "title": "3. Commits: The History Snapshots",
        "level": 2,
        "wordCount": 216
      },
      {
        "id": "4-tags-the-permanent-references",
        "title": "4. Tags: The Permanent References",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "how-these-objects-work-together",
        "title": "How These Objects Work Together",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "the-git-object-model-in-practice",
        "title": "The Git Object Model in Practice",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "practical-example-tracing-object-relationships",
        "title": "Practical Example: Tracing Object Relationships",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 124
      }
    ],
    "totalWordCount": 1367,
    "estimatedReadingTime": 360000,
    "title": "git_objects",
    "frontmatter": {}
  },
  "public\\content\\git\\objects\\commit_objects.md": {
    "path": "public\\content\\git\\objects\\commit_objects.md",
    "sections": [
      {
        "id": "git-commit-objects-snapshots-of-the-repository",
        "title": "Git Commit Objects: Snapshots of the Repository",
        "level": 1,
        "wordCount": 48
      },
      {
        "id": "what-is-a-git-commit-object-really",
        "title": "What is a Git Commit Object, Really?",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "gits-content-addressable-storage-system",
        "title": "Git's Content-Addressable Storage System",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "the-four-types-of-git-objects",
        "title": "The Four Types of Git Objects",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "inside-a-commit-object",
        "title": "Inside a Commit Object",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "how-git-generates-commit-hashes",
        "title": "How Git Generates Commit Hashes",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "example-tracing-a-commits-relationship",
        "title": "Example: Tracing a Commit's Relationship",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "commit-objects-vs-working-directory",
        "title": "Commit Objects vs. Working Directory",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "merges-and-multiple-parents",
        "title": "Merges and Multiple Parents",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "how-commit-objects-enable-gits-features",
        "title": "How Commit Objects Enable Git's Features",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "practical-implications",
        "title": "Practical Implications",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "exploring-commit-objects",
        "title": "Exploring Commit Objects",
        "level": 2,
        "wordCount": 11
      },
      {
        "id": "git-internals-how-commits-are-stored",
        "title": "Git Internals: How Commits Are Stored",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "creating-a-commit-programmatically",
        "title": "Creating a Commit Programmatically",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 101
      }
    ],
    "totalWordCount": 1012,
    "estimatedReadingTime": 300000,
    "title": "commit_objects",
    "frontmatter": {}
  },
  "public\\content\\git\\objects\\blob_objects.md": {
    "path": "public\\content\\git\\objects\\blob_objects.md",
    "sections": [
      {
        "id": "git-blob-objects-understanding-file-content-storage-from-first-principles",
        "title": "Git Blob Objects: Understanding File Content Storage from First Principles",
        "level": 1,
        "wordCount": 62
      },
      {
        "id": "what-is-a-blob-object",
        "title": "What Is a Blob Object?",
        "level": 2,
        "wordCount": 224
      },
      {
        "id": "the-anatomy-of-a-blob",
        "title": "The Anatomy of a Blob",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "how-blobs-are-stored-physically",
        "title": "How Blobs Are Stored Physically",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "why-blobs-dont-store-metadata",
        "title": "Why Blobs Don't Store Metadata",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "blob-objects-in-the-git-workflow",
        "title": "Blob Objects in the Git Workflow",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "blobs-and-gits-efficiency",
        "title": "Blobs and Git's Efficiency",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 132
      }
    ],
    "totalWordCount": 864,
    "estimatedReadingTime": 240000,
    "title": "blob_objects",
    "frontmatter": {}
  },
  "public\\content\\git\\merge\\merge_conflicts.md": {
    "path": "public\\content\\git\\merge\\merge_conflicts.md",
    "sections": [
      {
        "id": "git-merge-conflicts-understanding-and-resolving-them-from-first-principles",
        "title": "Git Merge Conflicts: Understanding and Resolving Them from First Principles",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "what-is-a-merge-conflict",
        "title": "What is a Merge Conflict?",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "why-do-merge-conflicts-happen",
        "title": "Why Do Merge Conflicts Happen?",
        "level": 2,
        "wordCount": 147
      },
      {
        "id": "anatomy-of-a-merge-conflict",
        "title": "Anatomy of a Merge Conflict",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "how-to-resolve-merge-conflicts",
        "title": "How to Resolve Merge Conflicts",
        "level": 2,
        "wordCount": 182
      },
      {
        "id": "advanced-conflict-resolution-strategies",
        "title": "Advanced Conflict Resolution Strategies",
        "level": 2,
        "wordCount": 265
      },
      {
        "id": "real-world-example-resolving-a-complex-conflict",
        "title": "Real-World Example: Resolving a Complex Conflict",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "understanding-gits-merge-strategies",
        "title": "Understanding Git's Merge Strategies",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 105
      }
    ],
    "totalWordCount": 1167,
    "estimatedReadingTime": 300000,
    "title": "merge_conflicts",
    "frontmatter": {}
  },
  "public\\content\\git\\merge\\merges_at_the_object_level.md": {
    "path": "public\\content\\git\\merge\\merges_at_the_object_level.md",
    "sections": [
      {
        "id": "git-merges-at-the-object-level",
        "title": "Git Merges at the Object Level",
        "level": 1,
        "wordCount": 36
      },
      {
        "id": "gits-core-data-model",
        "title": "Git's Core Data Model",
        "level": 2,
        "wordCount": 172
      },
      {
        "id": "the-commit-graph",
        "title": "The Commit Graph",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "diverging-histories-and-the-need-for-merges",
        "title": "Diverging Histories and the Need for Merges",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "merge-mechanics-at-the-object-level",
        "title": "Merge Mechanics at the Object Level",
        "level": 2,
        "wordCount": 255
      },
      {
        "id": "merge-commit-structure",
        "title": "Merge Commit Structure",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "resolving-merge-conflicts-at-the-object-level",
        "title": "Resolving Merge Conflicts at the Object Level",
        "level": 2,
        "wordCount": 174
      },
      {
        "id": "fast-forward-merges",
        "title": "Fast-Forward Merges",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "recursive-merge-strategy",
        "title": "Recursive Merge Strategy",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "octopus-merge",
        "title": "Octopus Merge",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "the-reset-reference-log-reflog",
        "title": "The Reset Reference Log (reflog)",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "example-tracing-object-changes-during-a-merge",
        "title": "Example: Tracing Object Changes During a Merge",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 119
      }
    ],
    "totalWordCount": 1216,
    "estimatedReadingTime": 300000,
    "title": "merges_at_the_object_level",
    "frontmatter": {}
  },
  "public\\content\\git\\merge\\fast_forward_vs_three_way.md": {
    "path": "public\\content\\git\\merge\\fast_forward_vs_three_way.md",
    "sections": [
      {
        "id": "git-merges-fast-forward-vs-three-way",
        "title": "Git Merges: Fast-Forward vs. Three-Way",
        "level": 1,
        "wordCount": 27
      },
      {
        "id": "the-foundation-what-is-a-merge",
        "title": "The Foundation: What Is a Merge?",
        "level": 2,
        "wordCount": 132
      },
      {
        "id": "fast-forward-merges",
        "title": "Fast-Forward Merges",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "three-way-merges",
        "title": "Three-Way Merges",
        "level": 2,
        "wordCount": 216
      },
      {
        "id": "comparing-the-approaches",
        "title": "Comparing the Approaches",
        "level": 2,
        "wordCount": 161
      },
      {
        "id": "potential-issues-and-solutions",
        "title": "Potential Issues and Solutions",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "best-practices",
        "title": "Best Practices",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 88
      }
    ],
    "totalWordCount": 870,
    "estimatedReadingTime": 240000,
    "title": "fast_forward_vs_three_way",
    "frontmatter": {}
  },
  "public\\content\\git\\internals\\porcelain_vs_plumbing_commands.md": {
    "path": "public\\content\\git\\internals\\porcelain_vs_plumbing_commands.md",
    "sections": [
      {
        "id": "gits-plumbing-vs-porcelain-commands-understanding-git-from-first-principles",
        "title": "Git's Plumbing vs. Porcelain Commands: Understanding Git from First Principles",
        "level": 1,
        "wordCount": 42
      },
      {
        "id": "the-essence-of-git-a-content-addressable-filesystem",
        "title": "The Essence of Git: A Content-Addressable Filesystem",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "plumbing-commands-the-foundation",
        "title": "Plumbing Commands: The Foundation",
        "level": 2,
        "wordCount": 293
      },
      {
        "id": "porcelain-commands-the-user-interface",
        "title": "Porcelain Commands: The User Interface",
        "level": 2,
        "wordCount": 219
      },
      {
        "id": "connecting-plumbing-and-porcelain-a-real-world-example",
        "title": "Connecting Plumbing and Porcelain: A Real-World Example",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "why-this-distinction-matters",
        "title": "Why This Distinction Matters",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "practical-applications",
        "title": "Practical Applications",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "understanding-gits-object-types",
        "title": "Understanding Git's Object Types",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 114
      }
    ],
    "totalWordCount": 1037,
    "estimatedReadingTime": 300000,
    "title": "porcelain_vs_plumbing_commands",
    "frontmatter": {}
  },
  "public\\content\\git\\internals\\objects_database_and_pack_files.md": {
    "path": "public\\content\\git\\internals\\objects_database_and_pack_files.md",
    "sections": [
      {
        "id": "understanding-object-databases-and-pack-formats-from-first-principles",
        "title": "Understanding Object Databases and Pack Formats from First Principles",
        "level": 1,
        "wordCount": 55
      },
      {
        "id": "1-what-is-an-object-database",
        "title": "1. What Is an Object Database?",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "2-the-four-fundamental-object-types-in-git",
        "title": "2. The Four Fundamental Object Types (in Git)",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "3-the-object-database-structure",
        "title": "3. The Object Database Structure",
        "level": 2,
        "wordCount": 139
      },
      {
        "id": "4-object-storage-formats",
        "title": "4. Object Storage Formats",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "5-the-pack-format-in-depth",
        "title": "5. The Pack Format in Depth",
        "level": 2,
        "wordCount": 286
      },
      {
        "id": "6-creating-and-using-pack-files",
        "title": "6. Creating and Using Pack Files",
        "level": 2,
        "wordCount": 164
      },
      {
        "id": "7-benefits-of-the-object-database-and-pack-format",
        "title": "7. Benefits of the Object Database and Pack Format",
        "level": 2,
        "wordCount": 155
      },
      {
        "id": "8-practical-implementation-of-object-database-operations",
        "title": "8. Practical Implementation of Object Database Operations",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "9-how-object-databases-differ-from-traditional-databases",
        "title": "9. How Object Databases Differ from Traditional Databases",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "10-beyond-git-other-applications-of-object-databases",
        "title": "10. Beyond Git: Other Applications of Object Databases",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "11-extending-the-object-database-concept",
        "title": "11. Extending the Object Database Concept",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 82
      }
    ],
    "totalWordCount": 1463,
    "estimatedReadingTime": 360000,
    "title": "objects_database_and_pack_files",
    "frontmatter": {}
  },
  "public\\content\\git\\internals\\head.md": {
    "path": "public\\content\\git\\internals\\head.md",
    "sections": [
      {
        "id": "the-head-reference-in-git-a-first-principles-exploration",
        "title": "The HEAD Reference in Git: A First Principles Exploration",
        "level": 1,
        "wordCount": 48
      },
      {
        "id": "what-is-head-at-its-core",
        "title": "What is HEAD, at its core?",
        "level": 2,
        "wordCount": 147
      },
      {
        "id": "heads-special-role-reference-to-a-reference",
        "title": "HEAD's Special Role: Reference to a Reference",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "detached-head-state-a-direct-reference",
        "title": "Detached HEAD State: A Direct Reference",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "understanding-head-updates-during-git-operations",
        "title": "Understanding HEAD Updates During Git Operations",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "the-head-file-implementation-details",
        "title": "The HEAD File: Implementation Details",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "practical-examples-of-working-with-head",
        "title": "Practical Examples of Working with HEAD",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "visualizing-head-movement-a-mental-model",
        "title": "Visualizing HEAD Movement: A Mental Model",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "head-and-gits-internal-data-model",
        "title": "HEAD and Git's Internal Data Model",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "common-issues-with-head",
        "title": "Common Issues with HEAD",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 107
      }
    ],
    "totalWordCount": 978,
    "estimatedReadingTime": 240000,
    "title": "head",
    "frontmatter": {}
  },
  "public\\content\\git\\internals\\git_refrences.md": {
    "path": "public\\content\\git\\internals\\git_refrences.md",
    "sections": [
      {
        "id": "git-references-the-pointers-to-your-commit-history",
        "title": "Git References: The Pointers to Your Commit History",
        "level": 1,
        "wordCount": 51
      },
      {
        "id": "the-fundamental-problem-identifying-commits",
        "title": "The Fundamental Problem: Identifying Commits",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "what-are-git-references",
        "title": "What Are Git References?",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "types-of-git-references",
        "title": "Types of Git References",
        "level": 2,
        "wordCount": 221
      },
      {
        "id": "reference-navigation-and-ancestry",
        "title": "Reference Navigation and Ancestry",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "symbolic-references",
        "title": "Symbolic References",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "how-references-get-updated",
        "title": "How References Get Updated",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "reference-internals-the-reflog",
        "title": "Reference Internals: The Reflog",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "practical-examples-of-working-with-references",
        "title": "Practical Examples of Working with References",
        "level": 2,
        "wordCount": 23
      },
      {
        "id": "detached-head-state",
        "title": "Detached HEAD State",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "reference-management-commands",
        "title": "Reference Management Commands",
        "level": 2,
        "wordCount": 10
      },
      {
        "id": "practical-use-cases-for-understanding-references",
        "title": "Practical Use Cases for Understanding References",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 119
      }
    ],
    "totalWordCount": 988,
    "estimatedReadingTime": 240000,
    "title": "git_refrences",
    "frontmatter": {}
  },
  "public\\content\\git\\internals\\git_reflog.md": {
    "path": "public\\content\\git\\internals\\git_reflog.md",
    "sections": [
      {
        "id": "git-reflog-understanding-the-reference-log-mechanism",
        "title": "Git Reflog: Understanding the Reference Log Mechanism",
        "level": 1,
        "wordCount": 49
      },
      {
        "id": "what-is-git-reflog",
        "title": "What is Git Reflog?",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "first-principles-how-references-work-in-git",
        "title": "First Principles: How References Work in Git",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "how-reflog-records-changes",
        "title": "How Reflog Records Changes",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "reflog-format-and-storage",
        "title": "Reflog Format and Storage",
        "level": 2,
        "wordCount": 19
      },
      {
        "id": "the-head-reflog",
        "title": "The HEAD Reflog",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "examining-the-reflog",
        "title": "Examining the Reflog",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "reflog-expiration",
        "title": "Reflog Expiration",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "practical-examples-recovering-lost-work",
        "title": "Practical Examples: Recovering Lost Work",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "the-reflogs-internals",
        "title": "The Reflog's Internals",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "advanced-reflog-usage",
        "title": "Advanced Reflog Usage",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "implementing-a-simple-reflog-viewer",
        "title": "Implementing a Simple Reflog Viewer",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "comparing-to-similar-git-features",
        "title": "Comparing to Similar Git Features",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "real-world-examples",
        "title": "Real-World Examples",
        "level": 2,
        "wordCount": 18
      },
      {
        "id": "best-practices-for-working-with-reflog",
        "title": "Best Practices for Working with Reflog",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 108
      }
    ],
    "totalWordCount": 875,
    "estimatedReadingTime": 240000,
    "title": "git_reflog",
    "frontmatter": {}
  },
  "public\\content\\git\\internals\\git_index_area.md": {
    "path": "public\\content\\git\\internals\\git_index_area.md",
    "sections": [
      {
        "id": "understanding-gits-index-staging-area-from-first-principles",
        "title": "Understanding Git's Index (Staging Area) From First Principles",
        "level": 1,
        "wordCount": 42
      },
      {
        "id": "what-is-the-git-index",
        "title": "What is the Git Index?",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "the-physical-structure-of-the-index",
        "title": "The Physical Structure of the Index",
        "level": 2,
        "wordCount": 160
      },
      {
        "id": "the-index-as-a-snapshot",
        "title": "The Index as a Snapshot",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "multi-stage-entries-and-conflict-resolution",
        "title": "Multi-Stage Entries and Conflict Resolution",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "how-git-reads-and-writes-the-index",
        "title": "How Git Reads and Writes the Index",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "the-cache-in-directory-cache",
        "title": "The Cache in \"Directory Cache\"",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "index-extensions",
        "title": "Index Extensions",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "the-index-in-daily-git-operations",
        "title": "The Index in Daily Git Operations",
        "level": 2,
        "wordCount": 195
      },
      {
        "id": "practical-implications-of-the-index-design",
        "title": "Practical Implications of the Index Design",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "the-index-as-a-cache",
        "title": "The Index as a Cache",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 99
      }
    ],
    "totalWordCount": 1171,
    "estimatedReadingTime": 300000,
    "title": "git_index_area",
    "frontmatter": {}
  },
  "public\\content\\git\\internals\\git_garbage_collection.md": {
    "path": "public\\content\\git\\internals\\git_garbage_collection.md",
    "sections": [
      {
        "id": "understanding-gits-garbage-collection-and-object-pruning",
        "title": "Understanding Git's Garbage Collection and Object Pruning",
        "level": 1,
        "wordCount": 40
      },
      {
        "id": "the-foundation-gits-object-model",
        "title": "The Foundation: Git's Object Model",
        "level": 2,
        "wordCount": 175
      },
      {
        "id": "the-problem-accumulation-of-objects",
        "title": "The Problem: Accumulation of Objects",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "garbage-collection-reclaiming-space",
        "title": "Garbage Collection: Reclaiming Space",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "the-garbage-collection-process-in-detail",
        "title": "The Garbage Collection Process in Detail",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "object-pruning-configuration-and-control",
        "title": "Object Pruning: Configuration and Control",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "a-practical-example-cleaning-a-repository",
        "title": "A Practical Example: Cleaning a Repository",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "protecting-objects-from-pruning",
        "title": "Protecting Objects from Pruning",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "beyond-basic-garbage-collection-advanced-techniques",
        "title": "Beyond Basic Garbage Collection: Advanced Techniques",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "understanding-the-trade-offs",
        "title": "Understanding the Trade-offs",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 90
      }
    ],
    "totalWordCount": 856,
    "estimatedReadingTime": 240000,
    "title": "git_garbage_collection",
    "frontmatter": {}
  },
  "public\\content\\git\\internals\\git_filesystem.md": {
    "path": "public\\content\\git\\internals\\git_filesystem.md",
    "sections": [
      {
        "id": "gits-content-addressable-filesystem-architecture",
        "title": "Git's Content-Addressable Filesystem Architecture",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "what-is-a-content-addressable-filesystem",
        "title": "What is a Content-Addressable Filesystem?",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "the-git-object-database",
        "title": "The Git Object Database",
        "level": 2,
        "wordCount": 308
      },
      {
        "id": "how-everything-fits-together",
        "title": "How Everything Fits Together",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "the-power-of-content-addressable-storage",
        "title": "The Power of Content-Addressable Storage",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "the-git-index-bridging-filesystems",
        "title": "The Git Index: Bridging Filesystems",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "packed-objects-and-optimization",
        "title": "Packed Objects and Optimization",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "practical-demonstration-with-real-git-commands",
        "title": "Practical Demonstration with Real Git Commands",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "implications-for-git-operations",
        "title": "Implications for Git Operations",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "understanding-gits-plumbing-commands",
        "title": "Understanding Git's Plumbing Commands",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 65
      }
    ],
    "totalWordCount": 1054,
    "estimatedReadingTime": 300000,
    "title": "git_filesystem",
    "frontmatter": {}
  },
  "public\\content\\git\\internals\\git_directory.md": {
    "path": "public\\content\\git\\internals\\git_directory.md",
    "sections": [
      {
        "id": "the-git-directory-understanding-gits-internal-structure",
        "title": "The .git Directory: Understanding Git's Internal Structure",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "first-principles-what-is-git",
        "title": "First Principles: What Is Git?",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "the-git-directory-your-repositorys-database",
        "title": "The .git Directory: Your Repository's Database",
        "level": 2,
        "wordCount": 601
      },
      {
        "id": "practical-example-following-a-commit-through-gits-internals",
        "title": "Practical Example: Following a Commit Through Git's Internals",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "how-gits-design-makes-it-powerful",
        "title": "How Git's Design Makes It Powerful",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "the-packfiles-gitobjectspack",
        "title": "The Packfiles (.git/objects/pack/)",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "a-mental-model-for-gits-structure",
        "title": "A Mental Model for Git's Structure",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "common-questions-about-the-git-directory",
        "title": "Common Questions About the .git Directory",
        "level": 2,
        "wordCount": 125
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 72
      }
    ],
    "totalWordCount": 1256,
    "estimatedReadingTime": 360000,
    "title": "git_directory",
    "frontmatter": {}
  },
  "public\\content\\git\\internals\\git_branch_storage.md": {
    "path": "public\\content\\git\\internals\\git_branch_storage.md",
    "sections": [
      {
        "id": "git-branches-understanding-the-simple-elegance",
        "title": "Git Branches: Understanding the Simple Elegance",
        "level": 1,
        "wordCount": 32
      },
      {
        "id": "the-foundation-gits-object-model",
        "title": "The Foundation: Git's Object Model",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "the-key-insight-references-as-pointers",
        "title": "The Key Insight: References as Pointers",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "a-concrete-example",
        "title": "A Concrete Example",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "how-git-updates-branch-references",
        "title": "How Git Updates Branch References",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "special-reference-head",
        "title": "Special Reference: HEAD",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "packed-references",
        "title": "Packed References",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "remote-tracking-branches",
        "title": "Remote-Tracking Branches",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "under-the-hood-moving-a-branch",
        "title": "Under the Hood: Moving a Branch",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "the-plumbing-command-update-ref",
        "title": "The Plumbing Command: update-ref",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "practical-implications-of-this-design",
        "title": "Practical Implications of This Design",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "example-examining-branch-structure-in-a-real-repository",
        "title": "Example: Examining Branch Structure in a Real Repository",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 131
      }
    ],
    "totalWordCount": 922,
    "estimatedReadingTime": 240000,
    "title": "git_branch_storage",
    "frontmatter": {}
  },
  "public\\content\\git\\internals\\file_tracking.md": {
    "path": "public\\content\\git\\internals\\file_tracking.md",
    "sections": [
      {
        "id": "understanding-gits-file-tracking-system-from-first-principles",
        "title": "Understanding Git's File Tracking System From First Principles",
        "level": 1,
        "wordCount": 49
      },
      {
        "id": "the-core-problem-git-solves",
        "title": "The Core Problem Git Solves",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "the-three-file-states-in-git",
        "title": "The Three File States in Git",
        "level": 2,
        "wordCount": 526
      },
      {
        "id": "how-git-tracks-changes",
        "title": "How Git Tracks Changes",
        "level": 2,
        "wordCount": 287
      },
      {
        "id": "real-world-example-tracking-changes-through-a-files-lifecycle",
        "title": "Real-World Example: Tracking Changes Through a File's Lifecycle",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "the-power-of-the-three-states",
        "title": "The Power of the Three States",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "advanced-considerations-beyond-the-basic-states",
        "title": "Advanced Considerations: Beyond the Basic States",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "how-it-all-works-together",
        "title": "How It All Works Together",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 69
      }
    ],
    "totalWordCount": 1315,
    "estimatedReadingTime": 360000,
    "title": "file_tracking",
    "frontmatter": {}
  },
  "public\\content\\git\\internals\\delta_compression_in_packfiles.md": {
    "path": "public\\content\\git\\internals\\delta_compression_in_packfiles.md",
    "sections": [
      {
        "id": "delta-compression-in-git-packfiles-from-first-principles",
        "title": "Delta Compression in Git Packfiles: From First Principles",
        "level": 1,
        "wordCount": 33
      },
      {
        "id": "1-the-storage-challenge-in-version-control",
        "title": "1. The Storage Challenge in Version Control",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "2-gits-object-model-the-foundation",
        "title": "2. Git's Object Model: The Foundation",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "3-the-problem-with-loose-objects",
        "title": "3. The Problem with Loose Objects",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "4-enter-packfiles",
        "title": "4. Enter Packfiles",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "5-delta-compression-the-core-concept",
        "title": "5. Delta Compression: The Core Concept",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "6-how-delta-compression-works-in-detail",
        "title": "6. How Delta Compression Works in Detail",
        "level": 2,
        "wordCount": 137
      },
      {
        "id": "7-finding-the-best-base-object",
        "title": "7. Finding the Best Base Object",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "8-the-delta-format",
        "title": "8. The Delta Format",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "9-lets-code-a-simple-delta-algorithm",
        "title": "9. Let's Code a Simple Delta Algorithm",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "10-exploring-a-real-git-packfile",
        "title": "10. Exploring a Real Git Packfile",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "11-performance-implications",
        "title": "11. Performance Implications",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "12-practical-example-visualizing-delta-compression",
        "title": "12. Practical Example: Visualizing Delta Compression",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "13-when-delta-compression-doesnt-help",
        "title": "13. When Delta Compression Doesn't Help",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "14-delta-compression-during-network-operations",
        "title": "14. Delta Compression During Network Operations",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "15-putting-it-all-together",
        "title": "15. Putting It All Together",
        "level": 2,
        "wordCount": 161
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 69
      }
    ],
    "totalWordCount": 1335,
    "estimatedReadingTime": 360000,
    "title": "delta_compression_in_packfiles",
    "frontmatter": {}
  },
  "public\\content\\git\\branch\\understanding_git_branches.md": {
    "path": "public\\content\\git\\branch\\understanding_git_branches.md",
    "sections": [
      {
        "id": "understanding-git-branches-from-first-principles",
        "title": "Understanding Git Branches from First Principles",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "the-foundation-what-is-git",
        "title": "The Foundation: What is Git?",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "gits-data-model",
        "title": "Git's Data Model",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "what-is-a-branch-really",
        "title": "What is a Branch, Really?",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "creating-and-switching-branches",
        "title": "Creating and Switching Branches",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "how-branches-diverge",
        "title": "How Branches Diverge",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "the-current-working-directory",
        "title": "The Current Working Directory",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "practical-example-feature-development",
        "title": "Practical Example: Feature Development",
        "level": 2,
        "wordCount": 23
      },
      {
        "id": "merging-branches",
        "title": "Merging Branches",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "example-of-resolving-a-merge-conflict",
        "title": "Example of Resolving a Merge Conflict",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "advanced-branch-concepts",
        "title": "Advanced Branch Concepts",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "mental-model-parallel-universes",
        "title": "Mental Model: Parallel Universes",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 117
      }
    ],
    "totalWordCount": 871,
    "estimatedReadingTime": 240000,
    "title": "understanding_git_branches",
    "frontmatter": {}
  },
  "public\\content\\git\\branch\\reflog_and_recovery.md": {
    "path": "public\\content\\git\\branch\\reflog_and_recovery.md",
    "sections": [
      {
        "id": "understanding-git-branch-reflog-and-recovery-from-first-principles",
        "title": "Understanding Git Branch, Reflog, and Recovery from First Principles",
        "level": 1,
        "wordCount": 28
      },
      {
        "id": "1-gits-core-data-structure-the-commit-graph",
        "title": "1. Git's Core Data Structure: The Commit Graph",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "2-what-is-a-branch",
        "title": "2. What Is a Branch?",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "3-the-head-pointer",
        "title": "3. The HEAD Pointer",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "4-understanding-the-reflog",
        "title": "4. Understanding the Reflog",
        "level": 2,
        "wordCount": 119
      },
      {
        "id": "5-branch-specific-reflogs",
        "title": "5. Branch-Specific Reflogs",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "6-recovery-using-reflog",
        "title": "6. Recovery Using Reflog",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "7-time-based-recovery",
        "title": "7. Time-Based Recovery",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "8-practical-example-the-complete-recovery-workflow",
        "title": "8. Practical Example: The Complete Recovery Workflow",
        "level": 2,
        "wordCount": 18
      },
      {
        "id": "9-reflog-expiration",
        "title": "9. Reflog Expiration",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "10-important-git-commands-for-reflog-and-recovery",
        "title": "10. Important Git Commands for Reflog and Recovery",
        "level": 2,
        "wordCount": 18
      },
      {
        "id": "11-understanding-the-mechanics-of-commit-deletion",
        "title": "11. Understanding the Mechanics of Commit \"Deletion\"",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "12-advanced-recovery-gits-object-database",
        "title": "12. Advanced Recovery: Git's Object Database",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "final-thoughts",
        "title": "Final Thoughts",
        "level": 2,
        "wordCount": 99
      }
    ],
    "totalWordCount": 868,
    "estimatedReadingTime": 240000,
    "title": "reflog_and_recovery",
    "frontmatter": {}
  },
  "public\\content\\git\\branch\\orphan_branches.md": {
    "path": "public\\content\\git\\branch\\orphan_branches.md",
    "sections": [
      {
        "id": "orphan-branches-in-git-a-first-principles-explanation",
        "title": "Orphan Branches in Git: A First Principles Explanation",
        "level": 1,
        "wordCount": 31
      },
      {
        "id": "1-the-git-object-model-the-foundation",
        "title": "1. The Git Object Model: The Foundation",
        "level": 2,
        "wordCount": 126
      },
      {
        "id": "2-branches-references-to-commits",
        "title": "2. Branches: References to Commits",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "3-regular-branch-creation-memory-preservation",
        "title": "3. Regular Branch Creation: Memory Preservation",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "4-orphan-branches-the-disconnect",
        "title": "4. Orphan Branches: The Disconnect",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "5-practical-examples-of-orphan-branches",
        "title": "5. Practical Examples of Orphan Branches",
        "level": 2,
        "wordCount": 119
      },
      {
        "id": "6-visualizing-the-difference",
        "title": "6. Visualizing The Difference",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "7-identifying-orphan-branches",
        "title": "7. Identifying Orphan Branches",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "8-working-with-orphan-branches",
        "title": "8. Working with Orphan Branches",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "9-the-technical-implementation",
        "title": "9. The Technical Implementation",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 99
      }
    ],
    "totalWordCount": 884,
    "estimatedReadingTime": 240000,
    "title": "orphan_branches",
    "frontmatter": {}
  },
  "public\\content\\git\\branch\\local_vs_remote_branches.md": {
    "path": "public\\content\\git\\branch\\local_vs_remote_branches.md",
    "sections": [
      {
        "id": "local-vs-remote-branches-in-git-a-comprehensive-explanation",
        "title": "Local vs. Remote Branches in Git: A Comprehensive Explanation",
        "level": 1,
        "wordCount": 49
      },
      {
        "id": "fundamental-concepts",
        "title": "Fundamental Concepts",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "the-relationship-between-local-and-remote-branches",
        "title": "The Relationship Between Local and Remote Branches",
        "level": 2,
        "wordCount": 145
      },
      {
        "id": "how-information-flows-between-local-and-remote",
        "title": "How Information Flows Between Local and Remote",
        "level": 2,
        "wordCount": 213
      },
      {
        "id": "practical-example-collaborative-workflow",
        "title": "Practical Example: Collaborative Workflow",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "common-scenarios-and-solutions",
        "title": "Common Scenarios and Solutions",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "advanced-concepts",
        "title": "Advanced Concepts",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "conceptual-framework-mental-model",
        "title": "Conceptual Framework: Mental Model",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 104
      }
    ],
    "totalWordCount": 1131,
    "estimatedReadingTime": 300000,
    "title": "local_vs_remote_branches",
    "frontmatter": {}
  },
  "public\\content\\git\\branch\\hotfix_branch.md": {
    "path": "public\\content\\git\\branch\\hotfix_branch.md",
    "sections": [
      {
        "id": "git-hotfix-branches-a-first-principles-explanation",
        "title": "Git Hotfix Branches: A First Principles Explanation",
        "level": 1,
        "wordCount": 7
      },
      {
        "id": "understanding-the-foundation-what-is-git",
        "title": "Understanding the Foundation: What is Git?",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "the-branch-concept",
        "title": "The Branch Concept",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "branching-strategies-and-workflows",
        "title": "Branching Strategies and Workflows",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "what-is-a-hotfix-branch",
        "title": "What is a Hotfix Branch?",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "when-do-you-need-a-hotfix-branch",
        "title": "When Do You Need a Hotfix Branch?",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "how-to-create-and-use-a-hotfix-branch",
        "title": "How to Create and Use a Hotfix Branch",
        "level": 2,
        "wordCount": 184
      },
      {
        "id": "visualizing-the-process",
        "title": "Visualizing the Process",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "common-challenges-with-hotfix-branches",
        "title": "Common Challenges with Hotfix Branches",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "best-practices-for-hotfix-branches",
        "title": "Best Practices for Hotfix Branches",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "practical-example-fixing-a-security-vulnerability",
        "title": "Practical Example: Fixing a Security Vulnerability",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "hotfix-branches-in-different-git-workflows",
        "title": "Hotfix Branches in Different Git Workflows",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 90
      }
    ],
    "totalWordCount": 1060,
    "estimatedReadingTime": 300000,
    "title": "hotfix_branch",
    "frontmatter": {}
  },
  "public\\content\\git\\branch\\head_reference.md": {
    "path": "public\\content\\git\\branch\\head_reference.md",
    "sections": [
      {
        "id": "understanding-the-head-reference-in-git-from-first-principles",
        "title": "Understanding the HEAD Reference in Git from First Principles",
        "level": 1,
        "wordCount": 42
      },
      {
        "id": "the-core-problem-tracking-where-we-are",
        "title": "The Core Problem: Tracking Where We Are",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "what-actually-is-head",
        "title": "What Actually Is HEAD?",
        "level": 2,
        "wordCount": 168
      },
      {
        "id": "head-and-branches-a-deeper-relationship",
        "title": "HEAD and Branches: A Deeper Relationship",
        "level": 2,
        "wordCount": 183
      },
      {
        "id": "the-detached-head-state",
        "title": "The Detached HEAD State",
        "level": 2,
        "wordCount": 134
      },
      {
        "id": "practical-examples-of-heads-behavior",
        "title": "Practical Examples of HEAD's Behavior",
        "level": 2,
        "wordCount": 119
      },
      {
        "id": "special-head-references",
        "title": "Special HEAD References",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "understanding-head-in-complex-operations",
        "title": "Understanding HEAD in Complex Operations",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "head-in-git-internals",
        "title": "HEAD in Git Internals",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "common-problems-and-solutions-related-to-head",
        "title": "Common Problems and Solutions Related to HEAD",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "advanced-head-mechanics-reference-logs",
        "title": "Advanced HEAD Mechanics: Reference Logs",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 144
      }
    ],
    "totalWordCount": 1227,
    "estimatedReadingTime": 300000,
    "title": "head_reference",
    "frontmatter": {}
  },
  "public\\content\\git\\branch\\divergent_history_visualization.md": {
    "path": "public\\content\\git\\branch\\divergent_history_visualization.md",
    "sections": [
      {
        "id": "git-branch-divergent-history-visualization-understanding-from-first-principles",
        "title": "Git Branch Divergent History Visualization: Understanding from First Principles",
        "level": 1,
        "wordCount": 33
      },
      {
        "id": "1-the-foundation-gits-data-model",
        "title": "1. The Foundation: Git's Data Model",
        "level": 2,
        "wordCount": 150
      },
      {
        "id": "2-branches-as-pointers",
        "title": "2. Branches as Pointers",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "3-understanding-divergent-history",
        "title": "3. Understanding Divergent History",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "4-gits-visualization-of-divergent-history",
        "title": "4. Git's Visualization of Divergent History",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "5-visualizing-divergence-with-external-tools",
        "title": "5. Visualizing Divergence with External Tools",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "6-understanding-gits-divergence-detection",
        "title": "6. Understanding Git's Divergence Detection",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "7-practical-example-visualizing-a-realistic-scenario",
        "title": "7. Practical Example: Visualizing a Realistic Scenario",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "8-code-example-visualizing-branch-structure-programmatically",
        "title": "8. Code Example: Visualizing Branch Structure Programmatically",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "9-advanced-concepts-rebase-vs-merge-visualization",
        "title": "9. Advanced Concepts: Rebase vs. Merge Visualization",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "10-best-practices-for-managing-divergent-histories",
        "title": "10. Best Practices for Managing Divergent Histories",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 82
      }
    ],
    "totalWordCount": 1023,
    "estimatedReadingTime": 300000,
    "title": "divergent_history_visualization",
    "frontmatter": {}
  },
  "public\\content\\git\\branch\\detached_head.md": {
    "path": "public\\content\\git\\branch\\detached_head.md",
    "sections": [
      {
        "id": "the-detached-head-state-in-git",
        "title": "The Detached HEAD State in Git",
        "level": 1,
        "wordCount": 45
      },
      {
        "id": "git-fundamentals-the-three-trees",
        "title": "Git Fundamentals: The Three Trees",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "commits-and-references",
        "title": "Commits and References",
        "level": 2,
        "wordCount": 144
      },
      {
        "id": "what-is-head",
        "title": "What is HEAD?",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "the-detached-head-state",
        "title": "The Detached HEAD State",
        "level": 2,
        "wordCount": 214
      },
      {
        "id": "working-with-a-detached-head",
        "title": "Working with a Detached HEAD",
        "level": 2,
        "wordCount": 149
      },
      {
        "id": "why-detached-head-is-useful",
        "title": "Why Detached HEAD is Useful",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "common-pitfalls-and-solutions",
        "title": "Common Pitfalls and Solutions",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 110
      }
    ],
    "totalWordCount": 1014,
    "estimatedReadingTime": 300000,
    "title": "detached_head",
    "frontmatter": {}
  },
  "public\\content\\git\\branch\\cherry_pick.md": {
    "path": "public\\content\\git\\branch\\cherry_pick.md",
    "sections": [
      {
        "id": "cherry-picking-commits-between-git-branches-a-first-principles-explanation",
        "title": "Cherry-Picking Commits Between Git Branches: A First Principles Explanation",
        "level": 1,
        "wordCount": 48
      },
      {
        "id": "the-git-data-model-understanding-commits-at-their-core",
        "title": "The Git Data Model: Understanding Commits at Their Core",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "what-cherry-picking-actually-does",
        "title": "What Cherry-Picking Actually Does",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "cherry-picking-in-practice-step-by-step",
        "title": "Cherry-Picking in Practice: Step by Step",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "understanding-the-commit-selection-process",
        "title": "Understanding the Commit Selection Process",
        "level": 2,
        "wordCount": 24
      },
      {
        "id": "what-happens-during-a-cherry-pick-the-mechanics",
        "title": "What Happens During a Cherry-Pick: The Mechanics",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "handling-cherry-pick-conflicts",
        "title": "Handling Cherry-Pick Conflicts",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "practical-example-fixing-a-bug-with-cherry-pick",
        "title": "Practical Example: Fixing a Bug with Cherry-Pick",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "advanced-cherry-picking-techniques",
        "title": "Advanced Cherry-Picking Techniques",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "common-cherry-picking-challenges-and-solutions",
        "title": "Common Cherry-Picking Challenges and Solutions",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "when-to-cherry-pick-and-when-not-to",
        "title": "When to Cherry-Pick (And When Not To)",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "practical-tips-for-cherry-picking-success",
        "title": "Practical Tips for Cherry-Picking Success",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 63
      }
    ],
    "totalWordCount": 920,
    "estimatedReadingTime": 240000,
    "title": "cherry_pick",
    "frontmatter": {}
  },
  "public\\content\\git\\branch\\branch_tracking.md": {
    "path": "public\\content\\git\\branch\\branch_tracking.md",
    "sections": [
      {
        "id": "understanding-git-branch-tracking-and-upstream-relationships",
        "title": "Understanding Git Branch Tracking and Upstream Relationships",
        "level": 1,
        "wordCount": 36
      },
      {
        "id": "the-foundation-what-is-a-git-branch",
        "title": "The Foundation: What is a Git Branch?",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "local-vs-remote-repositories",
        "title": "Local vs. Remote Repositories",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "what-are-remotes",
        "title": "What Are Remotes?",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "what-does-tracking-actually-mean",
        "title": "What Does \"Tracking\" Actually Mean?",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "setting-up-tracking-relationships",
        "title": "Setting Up Tracking Relationships",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "the-internals-how-git-stores-tracking-information",
        "title": "The Internals: How Git Stores Tracking Information",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "working-with-tracking-branches-in-practice",
        "title": "Working with Tracking Branches in Practice",
        "level": 2,
        "wordCount": 137
      },
      {
        "id": "remote-tracking-branches-vs-tracking-branches",
        "title": "Remote-Tracking Branches vs. Tracking Branches",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "handling-divergent-branches",
        "title": "Handling Divergent Branches",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "creating-upstream-relationships-from-scratch",
        "title": "Creating Upstream Relationships from Scratch",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "practical-examples-with-deeper-context",
        "title": "Practical Examples with Deeper Context",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "troubleshooting-tracking-relationships",
        "title": "Troubleshooting Tracking Relationships",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "advanced-concepts-refspecs",
        "title": "Advanced Concepts: Refspecs",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 117
      }
    ],
    "totalWordCount": 1204,
    "estimatedReadingTime": 300000,
    "title": "branch_tracking",
    "frontmatter": {}
  },
  "public\\content\\git\\branch\\branch_protection_rules.md": {
    "path": "public\\content\\git\\branch\\branch_protection_rules.md",
    "sections": [
      {
        "id": "branch-protection-rules-in-git-a-first-principles-explanation",
        "title": "Branch Protection Rules in Git: A First Principles Explanation",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "understanding-git-repositories-the-foundation",
        "title": "Understanding Git Repositories: The Foundation",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "the-problem-unbridled-collaboration-risks",
        "title": "The Problem: Unbridled Collaboration Risks",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "the-solution-branch-protection-rules",
        "title": "The Solution: Branch Protection Rules",
        "level": 2,
        "wordCount": 185
      },
      {
        "id": "understanding-branch-protection-from-first-principles-the-access-control-model",
        "title": "Understanding Branch Protection From First Principles: The Access Control Model",
        "level": 2,
        "wordCount": 199
      },
      {
        "id": "branch-protection-strategies-real-world-applications",
        "title": "Branch Protection Strategies: Real-World Applications",
        "level": 2,
        "wordCount": 140
      },
      {
        "id": "implementation-details-how-branch-protection-works-behind-the-scenes",
        "title": "Implementation Details: How Branch Protection Works Behind the Scenes",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "common-challenges-and-solutions",
        "title": "Common Challenges and Solutions",
        "level": 2,
        "wordCount": 119
      },
      {
        "id": "branch-protection-in-different-git-platforms",
        "title": "Branch Protection in Different Git Platforms",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "conclusion-the-philosophy-of-branch-protection",
        "title": "Conclusion: The Philosophy of Branch Protection",
        "level": 2,
        "wordCount": 119
      }
    ],
    "totalWordCount": 1165,
    "estimatedReadingTime": 300000,
    "title": "branch_protection_rules",
    "frontmatter": {}
  },
  "public\\content\\git\\branch\\branch_pointer.md": {
    "path": "public\\content\\git\\branch\\branch_pointer.md",
    "sections": [
      {
        "id": "git-branch-pointers-an-in-depth-exploration",
        "title": "Git Branch Pointers: An In-Depth Exploration",
        "level": 1,
        "wordCount": 37
      },
      {
        "id": "the-fundamental-nature-of-branch-pointers",
        "title": "The Fundamental Nature of Branch Pointers",
        "level": 2,
        "wordCount": 227
      },
      {
        "id": "how-git-updates-branch-pointers",
        "title": "How Git Updates Branch Pointers",
        "level": 2,
        "wordCount": 176
      },
      {
        "id": "the-head-reference",
        "title": "The HEAD Reference",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "branch-pointer-operations-in-detail",
        "title": "Branch Pointer Operations in Detail",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "advanced-branch-pointer-concepts",
        "title": "Advanced Branch Pointer Concepts",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "branch-pointer-visualization-exercise",
        "title": "Branch Pointer Visualization Exercise",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "practical-applications",
        "title": "Practical Applications",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "common-issues-with-branch-pointers",
        "title": "Common Issues with Branch Pointers",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 119
      }
    ],
    "totalWordCount": 1104,
    "estimatedReadingTime": 300000,
    "title": "branch_pointer",
    "frontmatter": {}
  },
  "public\\content\\git\\branch\\branch_naming_conventions.md": {
    "path": "public\\content\\git\\branch\\branch_naming_conventions.md",
    "sections": [
      {
        "id": "git-branch-naming-conventions-and-best-practices-from-first-principles",
        "title": "Git Branch Naming Conventions and Best Practices: From First Principles",
        "level": 1,
        "wordCount": 30
      },
      {
        "id": "what-is-a-branch-in-git",
        "title": "What is a branch in Git?",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "why-branch-naming-matters-the-first-principles",
        "title": "Why branch naming matters: The first principles",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "branch-naming-conventions-building-a-system",
        "title": "Branch naming conventions: Building a system",
        "level": 2,
        "wordCount": 214
      },
      {
        "id": "best-practices-for-branch-naming",
        "title": "Best practices for branch naming",
        "level": 2,
        "wordCount": 174
      },
      {
        "id": "real-world-examples-with-explanations",
        "title": "Real-world examples with explanations",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "branch-naming-in-different-workflows",
        "title": "Branch naming in different workflows",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "common-pitfalls-to-avoid",
        "title": "Common pitfalls to avoid",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "setting-up-branch-naming-conventions-with-your-team",
        "title": "Setting up branch naming conventions with your team",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "git-branch-naming-conventions-and-best-practices-from-first-principles",
        "title": "Git Branch Naming Conventions and Best Practices: From First Principles",
        "level": 1,
        "wordCount": 30
      },
      {
        "id": "what-is-a-branch-in-git",
        "title": "What is a branch in Git?",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "why-branch-naming-matters-the-first-principles",
        "title": "Why branch naming matters: The first principles",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "branch-naming-conventions-building-a-system",
        "title": "Branch naming conventions: Building a system",
        "level": 2,
        "wordCount": 214
      },
      {
        "id": "best-practices-for-branch-naming",
        "title": "Best practices for branch naming",
        "level": 2,
        "wordCount": 174
      },
      {
        "id": "real-world-examples-with-explanations",
        "title": "Real-world examples with explanations",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "branch-naming-in-different-workflows",
        "title": "Branch naming in different workflows",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "common-pitfalls-to-avoid",
        "title": "Common pitfalls to avoid",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "setting-up-branch-naming-conventions-with-your-team",
        "title": "Setting up branch naming conventions with your team",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 96
      }
    ],
    "totalWordCount": 2120,
    "estimatedReadingTime": 540000,
    "title": "branch_naming_conventions",
    "frontmatter": {}
  },
  "public\\content\\git\\branch\\branch_lifecycle.md": {
    "path": "public\\content\\git\\branch\\branch_lifecycle.md",
    "sections": [
      {
        "id": "git-branch-lifecycle-from-creation-to-deletion",
        "title": "Git Branch Lifecycle: From Creation to Deletion",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "first-principles-what-is-a-git-branch",
        "title": "First Principles: What is a Git Branch?",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "1-branch-creation",
        "title": "1. Branch Creation",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "2-branch-development",
        "title": "2. Branch Development",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "3-branch-merging",
        "title": "3. Branch Merging",
        "level": 2,
        "wordCount": 134
      },
      {
        "id": "4-branch-deletion",
        "title": "4. Branch Deletion",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "branch-management-strategies",
        "title": "Branch Management Strategies",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "practical-branch-lifecycle-example",
        "title": "Practical Branch Lifecycle Example",
        "level": 2,
        "wordCount": 18
      },
      {
        "id": "advanced-branch-techniques",
        "title": "Advanced Branch Techniques",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "summary",
        "title": "Summary",
        "level": 2,
        "wordCount": 81
      }
    ],
    "totalWordCount": 767,
    "estimatedReadingTime": 240000,
    "title": "branch_lifecycle",
    "frontmatter": {}
  },
  "public\\content\\git\\branch\\branch_comparison.md": {
    "path": "public\\content\\git\\branch\\branch_comparison.md",
    "sections": [
      {
        "id": "understanding-git-branch-comparison-git-diff-branch1branch2-from-first-principles",
        "title": "Understanding Git Branch Comparison (git diff branch1..branch2) from First Principles",
        "level": 1,
        "wordCount": 36
      },
      {
        "id": "1-first-principles-gits-data-model",
        "title": "1. First Principles: Git's Data Model",
        "level": 2,
        "wordCount": 202
      },
      {
        "id": "2-understanding-branches",
        "title": "2. Understanding Branches",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "3-understanding-the-double-dot-notation-branch1branch2",
        "title": "3. Understanding the Double Dot Notation (branch1..branch2)",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "4-practical-example-with-code",
        "title": "4. Practical Example with Code",
        "level": 2,
        "wordCount": 202
      },
      {
        "id": "5-common-use-cases-for-branch-comparison",
        "title": "5. Common Use Cases for Branch Comparison",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "6-the-triple-dot-notation-branch1branch2",
        "title": "6. The Triple Dot Notation (branch1...branch2)",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "7-understanding-the-difference-between-git-diff-and-git-log-with-double-dots",
        "title": "7. Understanding the Difference Between git diff and git log with Double Dots",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "8-advanced-example-multi-way-branching",
        "title": "8. Advanced Example: Multi-Way Branching",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 82
      }
    ],
    "totalWordCount": 976,
    "estimatedReadingTime": 240000,
    "title": "branch_comparison",
    "frontmatter": {}
  },
  "public\\content\\git\\basics\\introduction_to_git.md": {
    "path": "public\\content\\git\\basics\\introduction_to_git.md",
    "sections": [
      {
        "id": "introduction-to-git-from-first-principles",
        "title": "Introduction to Git: From First Principles",
        "level": 1,
        "wordCount": 35
      },
      {
        "id": "why-version-control-matters",
        "title": "Why Version Control Matters",
        "level": 2,
        "wordCount": 150
      },
      {
        "id": "centralized-vs-distributed-version-control",
        "title": "Centralized vs. Distributed Version Control",
        "level": 2,
        "wordCount": 294
      },
      {
        "id": "gits-history-and-philosophy",
        "title": "Git's History and Philosophy",
        "level": 2,
        "wordCount": 252
      },
      {
        "id": "the-three-states-of-git",
        "title": "The Three States of Git",
        "level": 2,
        "wordCount": 180
      },
      {
        "id": "basic-git-workflow",
        "title": "Basic Git Workflow",
        "level": 2,
        "wordCount": 155
      },
      {
        "id": "understanding-git-internally",
        "title": "Understanding Git Internally",
        "level": 2,
        "wordCount": 221
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 86
      }
    ],
    "totalWordCount": 1373,
    "estimatedReadingTime": 360000,
    "title": "introduction_to_git",
    "frontmatter": {}
  },
  "public\\content\\git\\basics\\git_three_states.md": {
    "path": "public\\content\\git\\basics\\git_three_states.md",
    "sections": [
      {
        "id": "understanding-gits-three-states-a-journey-of-a-file",
        "title": "Understanding Git's Three States: A Journey of a File",
        "level": 1,
        "wordCount": 57
      },
      {
        "id": "the-three-states",
        "title": "The Three States",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "the-complete-journey-of-a-file-through-gits-states",
        "title": "The Complete Journey of a File Through Git's States",
        "level": 2,
        "wordCount": 1081
      },
      {
        "id": "a-practical-example-partial-staging",
        "title": "A Practical Example: Partial Staging",
        "level": 2,
        "wordCount": 132
      },
      {
        "id": "the-internals-whats-really-happening-in-each-state",
        "title": "The Internals: What's Really Happening in Each State",
        "level": 2,
        "wordCount": 267
      },
      {
        "id": "real-world-scenarios-and-common-workflows",
        "title": "Real-World Scenarios and Common Workflows",
        "level": 2,
        "wordCount": 178
      },
      {
        "id": "common-confusions-and-their-explanations",
        "title": "Common Confusions and Their Explanations",
        "level": 2,
        "wordCount": 170
      },
      {
        "id": "visualizing-the-three-states",
        "title": "Visualizing the Three States",
        "level": 2,
        "wordCount": 14
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 120
      }
    ],
    "totalWordCount": 2087,
    "estimatedReadingTime": 540000,
    "title": "git_three_states",
    "frontmatter": {}
  },
  "public\\content\\git\\basics\\git_history.md": {
    "path": "public\\content\\git\\basics\\git_history.md",
    "sections": [
      {
        "id": "git-history-exploration-a-comprehensive-guide",
        "title": "Git History Exploration: A Comprehensive Guide",
        "level": 1,
        "wordCount": 55
      },
      {
        "id": "understanding-gits-history-model",
        "title": "Understanding Git's History Model",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "basic-history-exploration-commands",
        "title": "Basic History Exploration Commands",
        "level": 2,
        "wordCount": 298
      },
      {
        "id": "advanced-history-exploration-techniques",
        "title": "Advanced History Exploration Techniques",
        "level": 2,
        "wordCount": 200
      },
      {
        "id": "specialized-history-exploration-tools",
        "title": "Specialized History Exploration Tools",
        "level": 2,
        "wordCount": 169
      },
      {
        "id": "practical-history-exploration-scenarios",
        "title": "Practical History Exploration Scenarios",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "combining-and-filtering-history-commands",
        "title": "Combining and Filtering History Commands",
        "level": 2,
        "wordCount": 17
      },
      {
        "id": "visualizing-history-with-external-tools",
        "title": "Visualizing History with External Tools",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "searching-git-history-efficiently",
        "title": "Searching Git History Efficiently",
        "level": 2,
        "wordCount": 13
      },
      {
        "id": "understanding-merge-history",
        "title": "Understanding Merge History",
        "level": 2,
        "wordCount": 15
      },
      {
        "id": "internal-mechanisms-how-git-stores-history",
        "title": "Internal Mechanisms: How Git Stores History",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 111
      }
    ],
    "totalWordCount": 1195,
    "estimatedReadingTime": 300000,
    "title": "git_history",
    "frontmatter": {}
  },
  "public\\content\\git\\basics\\git_configuration.md": {
    "path": "public\\content\\git\\basics\\git_configuration.md",
    "sections": [
      {
        "id": "git-configuration-a-first-principles-approach",
        "title": "Git Configuration: A First Principles Approach",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "the-three-levels-of-git-configuration",
        "title": "The Three Levels of Git Configuration",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "configuration-storage",
        "title": "Configuration Storage",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "essential-configuration-settings",
        "title": "Essential Configuration Settings",
        "level": 2,
        "wordCount": 318
      },
      {
        "id": "working-with-aliases",
        "title": "Working with Aliases",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "advanced-configuration",
        "title": "Advanced Configuration",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "inspecting-and-managing-configuration",
        "title": "Inspecting and Managing Configuration",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "configuration-in-cicd-environments",
        "title": "Configuration in CI/CD Environments",
        "level": 2,
        "wordCount": 16
      },
      {
        "id": "common-patterns-and-best-practices",
        "title": "Common Patterns and Best Practices",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "troubleshooting-configuration-issues",
        "title": "Troubleshooting Configuration Issues",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 100
      }
    ],
    "totalWordCount": 1009,
    "estimatedReadingTime": 300000,
    "title": "git_configuration",
    "frontmatter": {}
  },
  "public\\content\\docker\\images\\volumes\\volumes_in_docker_compose.md": {
    "path": "public\\content\\docker\\images\\volumes\\volumes_in_docker_compose.md",
    "sections": [
      {
        "id": "docker-volumes-in-docker-compose-an-in-depth-exploration",
        "title": "Docker Volumes in Docker Compose: An In-Depth Exploration",
        "level": 1,
        "wordCount": 44
      },
      {
        "id": "understanding-docker-compose-volume-syntax",
        "title": "Understanding Docker Compose Volume Syntax",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "named-volumes-in-docker-compose",
        "title": "Named Volumes in Docker Compose",
        "level": 2,
        "wordCount": 161
      },
      {
        "id": "volume-configuration-options",
        "title": "Volume Configuration Options",
        "level": 2,
        "wordCount": 266
      },
      {
        "id": "bind-mounts-in-docker-compose",
        "title": "Bind Mounts in Docker Compose",
        "level": 2,
        "wordCount": 154
      },
      {
        "id": "volume-short-and-long-syntax",
        "title": "Volume Short and Long Syntax",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "anonymous-volumes-vs-named-volumes",
        "title": "Anonymous Volumes vs. Named Volumes",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "volume-sharing-between-services",
        "title": "Volume Sharing Between Services",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "tmpfs-mounts-in-docker-compose",
        "title": "tmpfs Mounts in Docker Compose",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "volume-lifecycle-management-in-compose",
        "title": "Volume Lifecycle Management in Compose",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "using-volumes_from-legacy",
        "title": "Using volumes_from (Legacy)",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "common-patterns-and-best-practices",
        "title": "Common Patterns and Best Practices",
        "level": 2,
        "wordCount": 172
      },
      {
        "id": "volume-drivers-and-external-storage",
        "title": "Volume Drivers and External Storage",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "docker-compose-env-files-and-volumes",
        "title": "Docker Compose .env Files and Volumes",
        "level": 2,
        "wordCount": 27
      },
      {
        "id": "host-paths-and-platform-differences",
        "title": "Host Paths and Platform Differences",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "volume-permissions-and-ownership",
        "title": "Volume Permissions and Ownership",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "compose-versioning-and-volume-features",
        "title": "Compose Versioning and Volume Features",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "backing-up-volumes-in-a-compose-environment",
        "title": "Backing Up Volumes in a Compose Environment",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "multi-container-volume-coordination",
        "title": "Multi-Container Volume Coordination",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "compose-volume-security-considerations",
        "title": "Compose Volume Security Considerations",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "troubleshooting-volume-issues-in-compose",
        "title": "Troubleshooting Volume Issues in Compose",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "compose-specific-volume-features",
        "title": "Compose-Specific Volume Features",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "advanced-techniques-for-docker-compose-volumes",
        "title": "Advanced Techniques for Docker Compose Volumes",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "final-thoughts-and-recommendations",
        "title": "Final Thoughts and Recommendations",
        "level": 2,
        "wordCount": 177
      }
    ],
    "totalWordCount": 2186,
    "estimatedReadingTime": 540000,
    "title": "volumes_in_docker_compose",
    "frontmatter": {}
  },
  "public\\content\\docker\\images\\volumes\\persistence_across_container_lifecycles.md": {
    "path": "public\\content\\docker\\images\\volumes\\persistence_across_container_lifecycles.md",
    "sections": [
      {
        "id": "volume-data-persistence-across-container-lifecycles-the-deep-dive",
        "title": "Volume Data Persistence Across Container Lifecycles: The Deep Dive",
        "level": 1,
        "wordCount": 40
      },
      {
        "id": "the-container-storage-architecture-understanding-ephemeral-nature",
        "title": "The Container Storage Architecture: Understanding Ephemeral Nature",
        "level": 2,
        "wordCount": 170
      },
      {
        "id": "the-union-mount-system-how-layers-work-together",
        "title": "The Union Mount System: How Layers Work Together",
        "level": 2,
        "wordCount": 144
      },
      {
        "id": "volume-persistence-the-mount-point-mechanism",
        "title": "Volume Persistence: The Mount Point Mechanism",
        "level": 2,
        "wordCount": 280
      },
      {
        "id": "internal-volume-management-the-storage-driver",
        "title": "Internal Volume Management: The Storage Driver",
        "level": 2,
        "wordCount": 138
      },
      {
        "id": "file-system-operations-the-path-of-a-write",
        "title": "File System Operations: The Path of a Write",
        "level": 2,
        "wordCount": 140
      },
      {
        "id": "container-lifecycle-events-and-volume-persistence",
        "title": "Container Lifecycle Events and Volume Persistence",
        "level": 2,
        "wordCount": 235
      },
      {
        "id": "a-detailed-example-database-container-lifecycle",
        "title": "A Detailed Example: Database Container Lifecycle",
        "level": 2,
        "wordCount": 253
      },
      {
        "id": "the-internal-mount-operations-a-technical-deep-dive",
        "title": "The Internal Mount Operations: A Technical Deep Dive",
        "level": 2,
        "wordCount": 253
      },
      {
        "id": "atomicity-and-consistency-in-volume-operations",
        "title": "Atomicity and Consistency in Volume Operations",
        "level": 2,
        "wordCount": 137
      },
      {
        "id": "performance-implications-of-volume-mounts",
        "title": "Performance Implications of Volume Mounts",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "volume-cleanup-and-orphan-volumes",
        "title": "Volume Cleanup and Orphan Volumes",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "practical-demonstration-the-full-lifecycle",
        "title": "Practical Demonstration: The Full Lifecycle",
        "level": 2,
        "wordCount": 217
      },
      {
        "id": "understanding-volume-ownership-and-data-lifecycle",
        "title": "Understanding Volume \"Ownership\" and Data Lifecycle",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "advanced-internal-operations-volume-snapshotting",
        "title": "Advanced Internal Operations: Volume Snapshotting",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "multi-host-persistence-with-external-volume-drivers",
        "title": "Multi-Host Persistence with External Volume Drivers",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "conclusion-the-fundamental-principles-of-volume-persistence",
        "title": "Conclusion: The Fundamental Principles of Volume Persistence",
        "level": 2,
        "wordCount": 157
      }
    ],
    "totalWordCount": 2708,
    "estimatedReadingTime": 660000,
    "title": "persistence_across_container_lifecycles",
    "frontmatter": {}
  },
  "public\\content\\docker\\images\\volumes\\introduction_to_volumes.md": {
    "path": "public\\content\\docker\\images\\volumes\\introduction_to_volumes.md",
    "sections": [
      {
        "id": "docker-volumes-from-first-principles",
        "title": "Docker Volumes: From First Principles",
        "level": 1,
        "wordCount": 24
      },
      {
        "id": "the-container-problem-ephemeral-storage",
        "title": "The Container Problem: Ephemeral Storage",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "the-solution-volumes-as-persistent-storage",
        "title": "The Solution: Volumes as Persistent Storage",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "how-volumes-work-the-mount-mechanism",
        "title": "How Volumes Work: The Mount Mechanism",
        "level": 2,
        "wordCount": 176
      },
      {
        "id": "types-of-docker-volumes",
        "title": "Types of Docker Volumes",
        "level": 2,
        "wordCount": 134
      },
      {
        "id": "volume-data-sharing-the-multi-container-perspective",
        "title": "Volume Data Sharing: The Multi-Container Perspective",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "volume-lifecycle-creation-usage-and-removal",
        "title": "Volume Lifecycle: Creation, Usage, and Removal",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "volume-drivers-extending-storage-capabilities",
        "title": "Volume Drivers: Extending Storage Capabilities",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "practical-example-a-database-with-persistent-storage",
        "title": "Practical Example: A Database with Persistent Storage",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "backup-and-restore-with-volumes",
        "title": "Backup and Restore with Volumes",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "common-gotchas-and-their-solutions",
        "title": "Common Gotchas and their Solutions",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 95
      }
    ],
    "totalWordCount": 1281,
    "estimatedReadingTime": 360000,
    "title": "introduction_to_volumes",
    "frontmatter": {}
  },
  "public\\content\\docker\\images\\volumes\\docker_volume_types.md": {
    "path": "public\\content\\docker\\images\\volumes\\docker_volume_types.md",
    "sections": [
      {
        "id": "dockers-three-volume-types-a-deep-comparison-from-first-principles",
        "title": "Docker's Three Volume Types: A Deep Comparison From First Principles",
        "level": 1,
        "wordCount": 40
      },
      {
        "id": "foundational-concepts-the-container-storage-problem",
        "title": "Foundational Concepts: The Container Storage Problem",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "named-volumes-docker-managed-persistence",
        "title": "Named Volumes: Docker-Managed Persistence",
        "level": 2,
        "wordCount": 332
      },
      {
        "id": "bind-mounts-direct-host-mapping",
        "title": "Bind Mounts: Direct Host Mapping",
        "level": 2,
        "wordCount": 285
      },
      {
        "id": "tmpfs-mounts-memory-only-storage",
        "title": "tmpfs Mounts: Memory-Only Storage",
        "level": 2,
        "wordCount": 261
      },
      {
        "id": "deep-comparison-technical-characteristics",
        "title": "Deep Comparison: Technical Characteristics",
        "level": 2,
        "wordCount": 551
      },
      {
        "id": "practical-examples-when-to-use-each-type",
        "title": "Practical Examples: When to Use Each Type",
        "level": 2,
        "wordCount": 270
      },
      {
        "id": "decision-framework-choosing-the-right-volume-type",
        "title": "Decision Framework: Choosing the Right Volume Type",
        "level": 2,
        "wordCount": 226
      },
      {
        "id": "advanced-internal-details",
        "title": "Advanced Internal Details",
        "level": 2,
        "wordCount": 201
      },
      {
        "id": "common-pitfalls-and-solutions",
        "title": "Common Pitfalls and Solutions",
        "level": 2,
        "wordCount": 188
      },
      {
        "id": "conclusion-the-conceptual-model",
        "title": "Conclusion: The Conceptual Model",
        "level": 2,
        "wordCount": 126
      }
    ],
    "totalWordCount": 2574,
    "estimatedReadingTime": 660000,
    "title": "docker_volume_types",
    "frontmatter": {}
  },
  "public\\content\\docker\\images\\layers\\layer_optimization.md": {
    "path": "public\\content\\docker\\images\\layers\\layer_optimization.md",
    "sections": [
      {
        "id": "docker-image-layer-optimization-essential-concepts",
        "title": "Docker Image Layer Optimization: Essential Concepts",
        "level": 1,
        "wordCount": 45
      },
      {
        "id": "the-layer-creation-process",
        "title": "The Layer Creation Process",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "run-the-most-layer-intensive-instruction",
        "title": "RUN: The Most Layer-Intensive Instruction",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "the-package-installation-pattern",
        "title": "The Package Installation Pattern",
        "level": 2,
        "wordCount": 26
      },
      {
        "id": "copy-and-add-be-strategic-with-file-transfers",
        "title": "COPY and ADD: Be Strategic With File Transfers",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "the-multi-stage-build-the-ultimate-layer-optimization",
        "title": "The Multi-stage Build: The Ultimate Layer Optimization",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "leveraging-dockerignore",
        "title": "Leveraging .dockerignore",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "the-layer-caching-mechanism",
        "title": "The Layer Caching Mechanism",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "non-layer-creating-instructions-and-their-impact",
        "title": "Non-layer-creating Instructions and Their Impact",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "the-squash-option-a-double-edged-sword",
        "title": "The Squash Option: A Double-edged Sword",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "layer-limits",
        "title": "Layer Limits",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "practical-optimization-examples",
        "title": "Practical Optimization Examples",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "the-layer-inspection-process",
        "title": "The Layer Inspection Process",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "real-world-optimization-strategy",
        "title": "Real-world Optimization Strategy",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 115
      }
    ],
    "totalWordCount": 1027,
    "estimatedReadingTime": 300000,
    "title": "layer_optimization",
    "frontmatter": {}
  },
  "public\\content\\docker\\images\\layers\\essential_concepts.md": {
    "path": "public\\content\\docker\\images\\layers\\essential_concepts.md",
    "sections": [
      {
        "id": "essential-docker-image-layering-concepts-for-developers",
        "title": "Essential Docker Image Layering Concepts for Developers",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "the-conceptual-foundation",
        "title": "The Conceptual Foundation",
        "level": 2,
        "wordCount": 226
      },
      {
        "id": "critical-layering-concepts-for-practical-development",
        "title": "Critical Layering Concepts for Practical Development",
        "level": 2,
        "wordCount": 449
      },
      {
        "id": "advanced-concepts-beyond-the-basics",
        "title": "Advanced Concepts: Beyond the Basics",
        "level": 2,
        "wordCount": 211
      },
      {
        "id": "practical-strategies-for-everyday-development",
        "title": "Practical Strategies for Everyday Development",
        "level": 2,
        "wordCount": 228
      },
      {
        "id": "real-world-examples-and-patterns",
        "title": "Real-World Examples and Patterns",
        "level": 2,
        "wordCount": 27
      },
      {
        "id": "conclusion-the-docker-layer-mindset",
        "title": "Conclusion: The Docker Layer Mindset",
        "level": 2,
        "wordCount": 137
      }
    ],
    "totalWordCount": 1319,
    "estimatedReadingTime": 360000,
    "title": "essential_concepts",
    "frontmatter": {}
  },
  "public\\content\\docker\\images\\layers\\docker_image_layers.md": {
    "path": "public\\content\\docker\\images\\layers\\docker_image_layers.md",
    "sections": [
      {
        "id": "docker-image-layers-a-first-principles-explanation",
        "title": "Docker Image Layers: A First Principles Explanation",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "foundation-what-is-a-file-system",
        "title": "Foundation: What is a File System?",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "the-problem-docker-solves",
        "title": "The Problem Docker Solves",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "what-is-a-docker-image",
        "title": "What is a Docker Image?",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "docker-layers-the-core-concept",
        "title": "Docker Layers: The Core Concept",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "how-layers-work-the-union-file-system",
        "title": "How Layers Work: The Union File System",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "layer-storage-and-the-copy-on-write-strategy",
        "title": "Layer Storage and the Copy-on-Write Strategy",
        "level": 2,
        "wordCount": 159
      },
      {
        "id": "practical-example-building-an-image",
        "title": "Practical Example: Building an Image",
        "level": 2,
        "wordCount": 157
      },
      {
        "id": "layer-sharing-and-reuse-the-efficiency-gain",
        "title": "Layer Sharing and Reuse: The Efficiency Gain",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "the-layer-cache-speeding-up-builds",
        "title": "The Layer Cache: Speeding Up Builds",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "layer-limitations-and-best-practices",
        "title": "Layer Limitations and Best Practices",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "the-image-manifest-keeping-track-of-layers",
        "title": "The Image Manifest: Keeping Track of Layers",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "the-container-layer-where-changes-live",
        "title": "The Container Layer: Where Changes Live",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "practical-example-layer-inspection",
        "title": "Practical Example: Layer Inspection",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "the-future-oci-and-buildkit",
        "title": "The Future: OCI and BuildKit",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "bringing-it-all-together",
        "title": "Bringing It All Together",
        "level": 2,
        "wordCount": 116
      }
    ],
    "totalWordCount": 1493,
    "estimatedReadingTime": 360000,
    "title": "docker_image_layers",
    "frontmatter": {}
  },
  "public\\content\\docker\\images\\layers\\copy_vs_run.md": {
    "path": "public\\content\\docker\\images\\layers\\copy_vs_run.md",
    "sections": [
      {
        "id": "multiple-run-vs-multiple-copy-layers-in-docker-a-comparative-analysis",
        "title": "Multiple RUN vs Multiple COPY Layers in Docker: A Comparative Analysis",
        "level": 1,
        "wordCount": 48
      },
      {
        "id": "the-fundamental-difference",
        "title": "The Fundamental Difference",
        "level": 2,
        "wordCount": 153
      },
      {
        "id": "the-impact-on-layer-size",
        "title": "The Impact on Layer Size",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "the-cache-invalidation-perspective",
        "title": "The Cache Invalidation Perspective",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "strategic-implications",
        "title": "Strategic Implications",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "real-world-comparison-an-example-application",
        "title": "Real-world Comparison: An Example Application",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "situations-where-multiple-copy-layers-can-cause-problems",
        "title": "Situations Where Multiple COPY Layers Can Cause Problems",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "conclusion-and-best-practices",
        "title": "Conclusion and Best Practices",
        "level": 2,
        "wordCount": 187
      }
    ],
    "totalWordCount": 810,
    "estimatedReadingTime": 240000,
    "title": "copy_vs_run",
    "frontmatter": {}
  },
  "public\\content\\docker\\images\\basics\\introduction_to_docker_images.md": {
    "path": "public\\content\\docker\\images\\basics\\introduction_to_docker_images.md",
    "sections": [
      {
        "id": "docker-images-a-first-principles-explanation",
        "title": "Docker Images: A First Principles Explanation",
        "level": 1,
        "wordCount": 30
      },
      {
        "id": "1-the-problem-docker-solves",
        "title": "1. The Problem Docker Solves",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "2-the-concept-of-isolation",
        "title": "2. The Concept of Isolation",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "3-containers-vs-images",
        "title": "3. Containers vs. Images",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "4-what-is-a-docker-image",
        "title": "4. What Is a Docker Image?",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "5-image-layers-the-foundation-of-efficiency",
        "title": "5. Image Layers: The Foundation of Efficiency",
        "level": 2,
        "wordCount": 140
      },
      {
        "id": "6-image-creation-the-dockerfile",
        "title": "6. Image Creation: The Dockerfile",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "7-image-storage-and-distribution",
        "title": "7. Image Storage and Distribution",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "8-image-anatomy-a-deeper-look",
        "title": "8. Image Anatomy: A Deeper Look",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "9-image-tags-and-versioning",
        "title": "9. Image Tags and Versioning",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "10-image-optimization-best-practices",
        "title": "10. Image Optimization: Best Practices",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "11-practical-example-a-multi-stage-nodejs-application",
        "title": "11. Practical Example: A Multi-Stage Node.js Application",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "12-immutability-and-reproducibility",
        "title": "12. Immutability and Reproducibility",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "13-security-considerations",
        "title": "13. Security Considerations",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "14-from-theory-to-practice-container-orchestration",
        "title": "14. From Theory to Practice: Container Orchestration",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "15-conclusion-the-power-of-abstraction",
        "title": "15. Conclusion: The Power of Abstraction",
        "level": 2,
        "wordCount": 83
      }
    ],
    "totalWordCount": 1428,
    "estimatedReadingTime": 360000,
    "title": "introduction_to_docker_images",
    "frontmatter": {}
  },
  "public\\content\\docker\\images\\basics\\internals_of_docker_images.md": {
    "path": "public\\content\\docker\\images\\basics\\internals_of_docker_images.md",
    "sections": [
      {
        "id": "docker-image-internals-a-first-principles-exploration",
        "title": "Docker Image Internals: A First Principles Exploration",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "1-the-essence-of-a-docker-image",
        "title": "1. The Essence of a Docker Image",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "2-the-binary-format-image-representation-on-disk",
        "title": "2. The Binary Format: Image Representation on Disk",
        "level": 2,
        "wordCount": 216
      },
      {
        "id": "3-layer-structure-content-storage",
        "title": "3. Layer Structure: Content Storage",
        "level": 2,
        "wordCount": 213
      },
      {
        "id": "4-the-union-filesystem-making-layers-work-together",
        "title": "4. The Union Filesystem: Making Layers Work Together",
        "level": 2,
        "wordCount": 231
      },
      {
        "id": "5-image-identifiers-addressing-the-layers",
        "title": "5. Image Identifiers: Addressing the Layers",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "6-image-manifests-distribution-format",
        "title": "6. Image Manifests: Distribution Format",
        "level": 2,
        "wordCount": 125
      },
      {
        "id": "7-image-building-from-dockerfile-to-layers",
        "title": "7. Image Building: From Dockerfile to Layers",
        "level": 2,
        "wordCount": 214
      },
      {
        "id": "8-from-images-to-containers-the-runtime-view",
        "title": "8. From Images to Containers: The Runtime View",
        "level": 2,
        "wordCount": 177
      },
      {
        "id": "9-advanced-techniques-multi-stage-builds",
        "title": "9. Advanced Techniques: Multi-Stage Builds",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "10-image-registries-storage-and-distribution",
        "title": "10. Image Registries: Storage and Distribution",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "11-security-considerations-in-image-structure",
        "title": "11. Security Considerations in Image Structure",
        "level": 2,
        "wordCount": 119
      },
      {
        "id": "12-image-optimization-techniques",
        "title": "12. Image Optimization Techniques",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "13-oci-compatibility-the-open-standard",
        "title": "13. OCI Compatibility: The Open Standard",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "14-advanced-features-of-modern-images",
        "title": "14. Advanced Features of Modern Images",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "15-conclusion-the-elegance-of-dockers-design",
        "title": "15. Conclusion: The Elegance of Docker's Design",
        "level": 2,
        "wordCount": 121
      }
    ],
    "totalWordCount": 2246,
    "estimatedReadingTime": 540000,
    "title": "internals_of_docker_images",
    "frontmatter": {}
  },
  "public\\content\\docker\\containers\\monitor\\inspection_of_container.md": {
    "path": "public\\content\\docker\\containers\\monitor\\inspection_of_container.md",
    "sections": [
      {
        "id": "docker-container-inspection-a-first-principles-approach",
        "title": "Docker Container Inspection: A First Principles Approach",
        "level": 1,
        "wordCount": 41
      },
      {
        "id": "what-is-a-docker-container",
        "title": "What Is a Docker Container?",
        "level": 2,
        "wordCount": 132
      },
      {
        "id": "what-is-container-inspection",
        "title": "What Is Container Inspection?",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "the-inspection-command",
        "title": "The Inspection Command",
        "level": 2,
        "wordCount": 24
      },
      {
        "id": "understanding-the-inspection-output",
        "title": "Understanding the Inspection Output",
        "level": 2,
        "wordCount": 731
      },
      {
        "id": "practical-inspection-examples",
        "title": "Practical Inspection Examples",
        "level": 2,
        "wordCount": 233
      },
      {
        "id": "common-inspection-use-cases",
        "title": "Common Inspection Use Cases",
        "level": 2,
        "wordCount": 301
      },
      {
        "id": "advanced-inspection-techniques",
        "title": "Advanced Inspection Techniques",
        "level": 2,
        "wordCount": 179
      },
      {
        "id": "understanding-container-inspection-in-the-context-of-container-lifecycle",
        "title": "Understanding Container Inspection in the Context of Container Lifecycle",
        "level": 2,
        "wordCount": 142
      },
      {
        "id": "container-inspection-vs-other-docker-commands",
        "title": "Container Inspection vs. Other Docker Commands",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 110
      }
    ],
    "totalWordCount": 2039,
    "estimatedReadingTime": 540000,
    "title": "inspection_of_container",
    "frontmatter": {}
  },
  "public\\content\\docker\\containers\\monitor\\container_monitoring.md": {
    "path": "public\\content\\docker\\containers\\monitor\\container_monitoring.md",
    "sections": [
      {
        "id": "docker-container-health-monitoring-and-health-checks-a-first-principles-approach",
        "title": "Docker Container Health Monitoring and Health Checks: A First Principles Approach",
        "level": 1,
        "wordCount": 44
      },
      {
        "id": "the-problem-of-system-reliability",
        "title": "The Problem of System Reliability",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "first-principles-of-status-verification",
        "title": "First Principles of Status Verification",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "the-docker-health-check-mechanism",
        "title": "The Docker Health Check Mechanism",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "the-container-lifecycle-and-health-states",
        "title": "The Container Lifecycle and Health States",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "designing-effective-health-checks",
        "title": "Designing Effective Health Checks",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "the-philosophy-of-health-checking-depth-considerations",
        "title": "The Philosophy of Health Checking: Depth Considerations",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "integration-with-orchestration-systems",
        "title": "Integration with Orchestration Systems",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "practical-implementation-strategies",
        "title": "Practical Implementation Strategies",
        "level": 2,
        "wordCount": 136
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 159
      },
      {
        "id": "advanced-health-monitoring-concepts",
        "title": "Advanced Health Monitoring Concepts",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "implementing-a-complete-solution-walkthrough",
        "title": "Implementing a Complete Solution: Walkthrough",
        "level": 2,
        "wordCount": 69
      },
      {
        "id": "conclusion-the-philosophy-of-system-awareness",
        "title": "Conclusion: The Philosophy of System Awareness",
        "level": 2,
        "wordCount": 114
      }
    ],
    "totalWordCount": 1371,
    "estimatedReadingTime": 360000,
    "title": "container_monitoring",
    "frontmatter": {}
  },
  "public\\content\\docker\\containers\\logging\\container_logging.md": {
    "path": "public\\content\\docker\\containers\\logging\\container_logging.md",
    "sections": [
      {
        "id": "container-logging-a-first-principles-analysis",
        "title": "Container Logging: A First Principles Analysis",
        "level": 1,
        "wordCount": 6
      },
      {
        "id": "1-the-fundamental-problem-of-observability",
        "title": "1. The Fundamental Problem of Observability",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "2-the-nature-of-application-logs",
        "title": "2. The Nature of Application Logs",
        "level": 2,
        "wordCount": 138
      },
      {
        "id": "3-the-ephemeral-nature-of-containers",
        "title": "3. The Ephemeral Nature of Containers",
        "level": 2,
        "wordCount": 177
      },
      {
        "id": "4-the-io-streams-model",
        "title": "4. The I/O Streams Model",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "5-the-logging-driver-architecture",
        "title": "5. The Logging Driver Architecture",
        "level": 2,
        "wordCount": 155
      },
      {
        "id": "6-the-multi-service-challenge",
        "title": "6. The Multi-Service Challenge",
        "level": 2,
        "wordCount": 143
      },
      {
        "id": "7-the-log-structure-problem",
        "title": "7. The Log Structure Problem",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "8-the-context-preservation-challenge",
        "title": "8. The Context Preservation Challenge",
        "level": 2,
        "wordCount": 137
      },
      {
        "id": "9-the-centralized-logging-architecture",
        "title": "9. The Centralized Logging Architecture",
        "level": 2,
        "wordCount": 187
      },
      {
        "id": "10-the-log-lifecycle-management-challenge",
        "title": "10. The Log Lifecycle Management Challenge",
        "level": 2,
        "wordCount": 177
      },
      {
        "id": "11-security-and-compliance-considerations",
        "title": "11. Security and Compliance Considerations",
        "level": 2,
        "wordCount": 153
      },
      {
        "id": "12-performance-and-resource-considerations",
        "title": "12. Performance and Resource Considerations",
        "level": 2,
        "wordCount": 163
      },
      {
        "id": "13-practical-implementation-patterns",
        "title": "13. Practical Implementation Patterns",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "14-the-future-of-container-logging",
        "title": "14. The Future of Container Logging",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "15-practical-exercise-building-a-complete-logging-solution",
        "title": "15. Practical Exercise: Building a Complete Logging Solution",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "16-core-principles-revisited",
        "title": "16. Core Principles Revisited",
        "level": 2,
        "wordCount": 180
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 104
      }
    ],
    "totalWordCount": 2304,
    "estimatedReadingTime": 600000,
    "title": "container_logging",
    "frontmatter": {}
  },
  "public\\content\\docker\\containers\\internals\\docker_runtime_and_containerd.md": {
    "path": "public\\content\\docker\\containers\\internals\\docker_runtime_and_containerd.md",
    "sections": [
      {
        "id": "docker-runtime-and-containerd-an-in-depth-analysis-from-first-principles",
        "title": "Docker Runtime and containerd: An In-Depth Analysis from First Principles",
        "level": 1,
        "wordCount": 10
      },
      {
        "id": "introduction-the-problem-of-software-deployment",
        "title": "Introduction: The Problem of Software Deployment",
        "level": 2,
        "wordCount": 119
      },
      {
        "id": "part-i-foundational-concepts-the-building-blocks-of-containerization",
        "title": "Part I: Foundational Concepts - The Building Blocks of Containerization",
        "level": 2,
        "wordCount": 575
      },
      {
        "id": "part-ii-enter-docker-the-pioneering-container-platform",
        "title": "Part II: Enter Docker - The Pioneering Container Platform",
        "level": 2,
        "wordCount": 253
      },
      {
        "id": "part-iii-containerd-the-core-container-runtime",
        "title": "Part III: containerd - The Core Container Runtime",
        "level": 2,
        "wordCount": 859
      },
      {
        "id": "part-iv-container-execution-the-lower-level-runtime",
        "title": "Part IV: Container Execution - The Lower-Level Runtime",
        "level": 2,
        "wordCount": 287
      },
      {
        "id": "part-v-the-modern-docker-architecture-with-containerd",
        "title": "Part V: The Modern Docker Architecture with containerd",
        "level": 2,
        "wordCount": 455
      },
      {
        "id": "part-vi-under-the-hood-detailed-implementation-analysis",
        "title": "Part VI: Under the Hood - Detailed Implementation Analysis",
        "level": 2,
        "wordCount": 447
      },
      {
        "id": "part-vii-the-containerd-plugin-architecture",
        "title": "Part VII: The containerd Plugin Architecture",
        "level": 2,
        "wordCount": 179
      },
      {
        "id": "part-viii-advanced-concepts-and-future-directions",
        "title": "Part VIII: Advanced Concepts and Future Directions",
        "level": 2,
        "wordCount": 363
      },
      {
        "id": "part-ix-putting-it-all-together-analysis-of-a-complete-container-lifecycle",
        "title": "Part IX: Putting It All Together - Analysis of a Complete Container Lifecycle",
        "level": 2,
        "wordCount": 624
      },
      {
        "id": "part-x-the-future-of-container-runtimes",
        "title": "Part X: The Future of Container Runtimes",
        "level": 2,
        "wordCount": 274
      },
      {
        "id": "conclusion-the-philosophy-of-container-runtimes",
        "title": "Conclusion: The Philosophy of Container Runtimes",
        "level": 2,
        "wordCount": 192
      }
    ],
    "totalWordCount": 4637,
    "estimatedReadingTime": 1140000,
    "title": "docker_runtime_and_containerd",
    "frontmatter": {}
  },
  "public\\content\\docker\\containers\\basics\\lifecycle_of_container.md": {
    "path": "public\\content\\docker\\containers\\basics\\lifecycle_of_container.md",
    "sections": [
      {
        "id": "container-lifecycle-a-first-principles-investigation",
        "title": "Container Lifecycle: A First Principles Investigation",
        "level": 1,
        "wordCount": 6
      },
      {
        "id": "i-what-is-the-container-lifecycle",
        "title": "I. What Is the Container Lifecycle?",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "ii-pre-creation-images-as-the-blueprint",
        "title": "II. Pre-Creation: Images as the Blueprint",
        "level": 2,
        "wordCount": 194
      },
      {
        "id": "iii-creation-phase-docker-create",
        "title": "III. Creation Phase: `docker create`",
        "level": 2,
        "wordCount": 244
      },
      {
        "id": "iv-starting-phase-docker-start",
        "title": "IV. Starting Phase: `docker start`",
        "level": 2,
        "wordCount": 280
      },
      {
        "id": "v-running-phase",
        "title": "V. Running Phase",
        "level": 2,
        "wordCount": 322
      },
      {
        "id": "vi-pausing-and-unpausing-docker-pause-and-docker-unpause",
        "title": "VI. Pausing and Unpausing: `docker pause` and `docker unpause`",
        "level": 2,
        "wordCount": 156
      },
      {
        "id": "vii-stopping-phase-docker-stop",
        "title": "VII. Stopping Phase: `docker stop`",
        "level": 2,
        "wordCount": 247
      },
      {
        "id": "viii-restarting-docker-restart",
        "title": "VIII. Restarting: `docker restart`",
        "level": 2,
        "wordCount": 146
      },
      {
        "id": "ix-removal-phase-docker-rm",
        "title": "IX. Removal Phase: `docker rm`",
        "level": 2,
        "wordCount": 205
      },
      {
        "id": "x-advanced-lifecycle-concepts",
        "title": "X. Advanced Lifecycle Concepts",
        "level": 2,
        "wordCount": 245
      },
      {
        "id": "xi-container-orchestration-extending-the-lifecycle",
        "title": "XI. Container Orchestration: Extending the Lifecycle",
        "level": 2,
        "wordCount": 187
      },
      {
        "id": "xii-real-world-example-complete-lifecycle-of-a-web-application-container",
        "title": "XII. Real-World Example: Complete Lifecycle of a Web Application Container",
        "level": 2,
        "wordCount": 329
      },
      {
        "id": "xiii-conclusion-the-philosophical-implications-of-container-lifecycle",
        "title": "XIII. Conclusion: The Philosophical Implications of Container Lifecycle",
        "level": 2,
        "wordCount": 227
      }
    ],
    "totalWordCount": 2889,
    "estimatedReadingTime": 720000,
    "title": "lifecycle_of_container",
    "frontmatter": {}
  },
  "public\\content\\docker\\containers\\basics\\intoduction_to_containers.md": {
    "path": "public\\content\\docker\\containers\\basics\\intoduction_to_containers.md",
    "sections": [
      {
        "id": "docker-containers-a-first-principles-explanation",
        "title": "Docker Containers: A First Principles Explanation",
        "level": 1,
        "wordCount": 45
      },
      {
        "id": "i-the-fundamental-problem-process-isolation",
        "title": "I. The Fundamental Problem: Process Isolation",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "ii-the-unix-foundation-processes-files-and-namespaces",
        "title": "II. The Unix Foundation: Processes, Files, and Namespaces",
        "level": 2,
        "wordCount": 362
      },
      {
        "id": "iii-the-container-file-system-layers-and-union-mounts",
        "title": "III. The Container File System: Layers and Union Mounts",
        "level": 2,
        "wordCount": 231
      },
      {
        "id": "iv-dockers-architecture",
        "title": "IV. Docker's Architecture",
        "level": 2,
        "wordCount": 239
      },
      {
        "id": "v-container-networking",
        "title": "V. Container Networking",
        "level": 2,
        "wordCount": 191
      },
      {
        "id": "vi-container-security",
        "title": "VI. Container Security",
        "level": 2,
        "wordCount": 172
      },
      {
        "id": "vii-the-container-runtime",
        "title": "VII. The Container Runtime",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "viii-real-world-example-putting-it-all-together",
        "title": "VIII. Real-World Example: Putting It All Together",
        "level": 2,
        "wordCount": 205
      },
      {
        "id": "ix-advanced-container-concepts",
        "title": "IX. Advanced Container Concepts",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "x-common-challenges-and-solutions",
        "title": "X. Common Challenges and Solutions",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 110
      }
    ],
    "totalWordCount": 1985,
    "estimatedReadingTime": 480000,
    "title": "intoduction_to_containers",
    "frontmatter": {}
  },
  "public\\content\\design_principles\\intro\\comparison.md": {
    "path": "public\\content\\design_principles\\intro\\comparison.md",
    "sections": [
      {
        "id": "design-patterns-in-python-a-first-principles-guide",
        "title": "Design Patterns in Python: A First Principles Guide",
        "level": 1,
        "wordCount": 52
      },
      {
        "id": "what-are-design-patterns",
        "title": "What Are Design Patterns?",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "creational-patterns",
        "title": "Creational Patterns",
        "level": 2,
        "wordCount": 740
      },
      {
        "id": "structural-patterns",
        "title": "Structural Patterns",
        "level": 2,
        "wordCount": 1127
      },
      {
        "id": "behavioral-patterns",
        "title": "Behavioral Patterns",
        "level": 2,
        "wordCount": 1688
      },
      {
        "id": "comparative-analysis",
        "title": "Comparative Analysis",
        "level": 2,
        "wordCount": 719
      },
      {
        "id": "decision-guide-which-pattern-to-use",
        "title": "Decision Guide: Which Pattern to Use?",
        "level": 2,
        "wordCount": 219
      },
      {
        "id": "python-specific-considerations",
        "title": "Python-Specific Considerations",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 82
      }
    ],
    "totalWordCount": 4799,
    "estimatedReadingTime": 1200000,
    "title": "comparison",
    "frontmatter": {}
  },
  "public\\content\\design_principles\\intermediate\\template_method.md": {
    "path": "public\\content\\design_principles\\intermediate\\template_method.md",
    "sections": [
      {
        "id": "the-template-method-design-pattern-first-principles-explanation",
        "title": "The Template Method Design Pattern: First Principles Explanation",
        "level": 1,
        "wordCount": 54
      },
      {
        "id": "the-problem-template-method-pattern-solves",
        "title": "The Problem Template Method Pattern Solves",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "the-template-method-pattern-solution",
        "title": "The Template Method Pattern Solution",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "components-of-the-template-method-pattern",
        "title": "Components of the Template Method Pattern",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "python-implementation",
        "title": "Python Implementation",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "abstract-methods-vs-hook-methods",
        "title": "Abstract Methods vs. Hook Methods",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "the-hollywood-principle",
        "title": "The \"Hollywood Principle\"",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "real-world-example-data-processing-framework",
        "title": "Real-World Example: Data Processing Framework",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "template-method-with-type-hints-and-python-310-features",
        "title": "Template Method with Type Hints and Python 3.10+ Features",
        "level": 2,
        "wordCount": 21
      },
      {
        "id": "benefits-of-the-template-method-pattern",
        "title": "Benefits of the Template Method Pattern",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "variations-and-extensions-of-the-template-method-pattern",
        "title": "Variations and Extensions of the Template Method Pattern",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "when-to-use-the-template-method-pattern",
        "title": "When to Use the Template Method Pattern",
        "level": 2,
        "wordCount": 144
      },
      {
        "id": "when-not-to-use-the-template-method-pattern",
        "title": "When Not to Use the Template Method Pattern",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "real-world-example-web-framework-request-handlers",
        "title": "Real-World Example: Web Framework Request Handlers",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "template-method-vs-strategy-pattern",
        "title": "Template Method vs. Strategy Pattern",
        "level": 2,
        "wordCount": 129
      },
      {
        "id": "template-method-and-the-openclosed-principle",
        "title": "Template Method and the Open/Closed Principle",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "template-method-in-python-standard-library",
        "title": "Template Method in Python Standard Library",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "handling-default-implementations",
        "title": "Handling Default Implementations",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "advanced-template-method-with-multiple-extension-points",
        "title": "Advanced Template Method with Multiple Extension Points",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 171
      }
    ],
    "totalWordCount": 1638,
    "estimatedReadingTime": 420000,
    "title": "template_method",
    "frontmatter": {}
  },
  "public\\content\\design_principles\\intermediate\\prototype.md": {
    "path": "public\\content\\design_principles\\intermediate\\prototype.md",
    "sections": [
      {
        "id": "the-prototype-design-pattern-first-principles-explanation",
        "title": "The Prototype Design Pattern: First Principles Explanation",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "the-problem-prototype-pattern-solves",
        "title": "The Problem Prototype Pattern Solves",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "the-prototype-pattern-solution",
        "title": "The Prototype Pattern Solution",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "components-of-the-prototype-pattern",
        "title": "Components of the Prototype Pattern",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "python-implementation",
        "title": "Python Implementation",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "deep-vs-shallow-cloning",
        "title": "Deep vs. Shallow Cloning",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "prototype-registry",
        "title": "Prototype Registry",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "real-world-example-document-templating-system",
        "title": "Real-World Example: Document Templating System",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "pythons-copy-module-and-__copy____deepcopy__-methods",
        "title": "Python's `copy` Module and `__copy__`/`__deepcopy__` Methods",
        "level": 2,
        "wordCount": 24
      },
      {
        "id": "benefits-of-the-prototype-pattern",
        "title": "Benefits of the Prototype Pattern",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "when-to-use-the-prototype-pattern",
        "title": "When to Use the Prototype Pattern",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "when-not-to-use-the-prototype-pattern",
        "title": "When Not to Use the Prototype Pattern",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "comparison-with-other-patterns",
        "title": "Comparison with Other Patterns",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "prototype-in-pythons-standard-library",
        "title": "Prototype in Python's Standard Library",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 136
      }
    ],
    "totalWordCount": 945,
    "estimatedReadingTime": 240000,
    "title": "prototype",
    "frontmatter": {}
  },
  "public\\content\\design_principles\\intermediate\\composite.md": {
    "path": "public\\content\\design_principles\\intermediate\\composite.md",
    "sections": [
      {
        "id": "the-composite-design-pattern-first-principles-explanation",
        "title": "The Composite Design Pattern: First Principles Explanation",
        "level": 1,
        "wordCount": 53
      },
      {
        "id": "the-problem-composite-pattern-solves",
        "title": "The Problem Composite Pattern Solves",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "the-composite-pattern-solution",
        "title": "The Composite Pattern Solution",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "components-of-the-composite-pattern",
        "title": "Components of the Composite Pattern",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "python-implementation",
        "title": "Python Implementation",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "implementing-safety-checks",
        "title": "Implementing Safety Checks",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "the-python-way-duck-typing",
        "title": "The Python Way: Duck Typing",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "real-world-example-gui-component-hierarchy",
        "title": "Real-World Example: GUI Component Hierarchy",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "implementing-composite-iterator",
        "title": "Implementing Composite Iterator",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "implementing-visitor-pattern-with-composite",
        "title": "Implementing Visitor Pattern with Composite",
        "level": 2,
        "wordCount": 24
      },
      {
        "id": "managing-parent-child-relationships",
        "title": "Managing Parent-Child Relationships",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "implementing-access-control-with-composite",
        "title": "Implementing Access Control with Composite",
        "level": 2,
        "wordCount": 25
      },
      {
        "id": "composite-pattern-variations",
        "title": "Composite Pattern Variations",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "implementing-a-file-system-explorer-with-composite",
        "title": "Implementing a File System Explorer with Composite",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "composite-pattern-in-djangos-template-system",
        "title": "Composite Pattern in Django's Template System",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "when-to-use-the-composite-pattern",
        "title": "When to Use the Composite Pattern",
        "level": 2,
        "wordCount": 139
      },
      {
        "id": "when-not-to-use-the-composite-pattern",
        "title": "When Not to Use the Composite Pattern",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "composite-pattern-in-pythons-standard-library",
        "title": "Composite Pattern in Python's Standard Library",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "comparison-with-other-patterns",
        "title": "Comparison with Other Patterns",
        "level": 2,
        "wordCount": 140
      },
      {
        "id": "implementing-composite-with-python-collections",
        "title": "Implementing Composite with Python Collections",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 190
      }
    ],
    "totalWordCount": 1547,
    "estimatedReadingTime": 420000,
    "title": "composite",
    "frontmatter": {}
  },
  "public\\content\\design_principles\\intermediate\\builder.md": {
    "path": "public\\content\\design_principles\\intermediate\\builder.md",
    "sections": [
      {
        "id": "the-builder-design-pattern-first-principles-explanation",
        "title": "The Builder Design Pattern: First Principles Explanation",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "the-problem-builder-pattern-solves",
        "title": "The Problem Builder Pattern Solves",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "the-builder-pattern-solution",
        "title": "The Builder Pattern Solution",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "components-of-the-builder-pattern",
        "title": "Components of the Builder Pattern",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "python-implementation",
        "title": "Python Implementation",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "adding-a-director",
        "title": "Adding a Director",
        "level": 2,
        "wordCount": 24
      },
      {
        "id": "builder-pattern-variations",
        "title": "Builder Pattern Variations",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "real-world-example-building-complex-api-requests",
        "title": "Real-World Example: Building Complex API Requests",
        "level": 2,
        "wordCount": 19
      },
      {
        "id": "benefits-of-the-builder-pattern",
        "title": "Benefits of the Builder Pattern",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "when-to-use-the-builder-pattern",
        "title": "When to Use the Builder Pattern",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "when-not-to-use-the-builder-pattern",
        "title": "When Not to Use the Builder Pattern",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "comparison-with-other-patterns",
        "title": "Comparison with Other Patterns",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 64
      }
    ],
    "totalWordCount": 648,
    "estimatedReadingTime": 180000,
    "title": "builder",
    "frontmatter": {}
  },
  "public\\content\\design_principles\\intermediate\\abstract_factory.md": {
    "path": "public\\content\\design_principles\\intermediate\\abstract_factory.md",
    "sections": [
      {
        "id": "the-abstract-factory-design-pattern-first-principles-explanation",
        "title": "The Abstract Factory Design Pattern: First Principles Explanation",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "the-problem-abstract-factory-pattern-solves",
        "title": "The Problem Abstract Factory Pattern Solves",
        "level": 2,
        "wordCount": 152
      },
      {
        "id": "the-abstract-factory-pattern-solution",
        "title": "The Abstract Factory Pattern Solution",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "components-of-the-abstract-factory-pattern",
        "title": "Components of the Abstract Factory Pattern",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "python-implementation",
        "title": "Python Implementation",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "factory-selection-and-configuration",
        "title": "Factory Selection and Configuration",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "adding-a-new-product-family",
        "title": "Adding a New Product Family",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "adding-a-new-product-to-the-family",
        "title": "Adding a New Product to the Family",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "real-world-example-database-connectivity",
        "title": "Real-World Example: Database Connectivity",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "pythonic-abstract-factory-implementation",
        "title": "Pythonic Abstract Factory Implementation",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "abstract-factory-with-class-registration",
        "title": "Abstract Factory with Class Registration",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "using-abstract-factory-with-factory-method",
        "title": "Using Abstract Factory with Factory Method",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "benefits-of-the-abstract-factory-pattern",
        "title": "Benefits of the Abstract Factory Pattern",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "drawbacks-of-the-abstract-factory-pattern",
        "title": "Drawbacks of the Abstract Factory Pattern",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "when-to-use-the-abstract-factory-pattern",
        "title": "When to Use the Abstract Factory Pattern",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "when-not-to-use-the-abstract-factory-pattern",
        "title": "When Not to Use the Abstract Factory Pattern",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "real-world-scenarios-for-abstract-factory",
        "title": "Real-world Scenarios for Abstract Factory",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "abstract-factory-in-pythons-standard-library",
        "title": "Abstract Factory in Python's Standard Library",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "comparison-with-other-patterns",
        "title": "Comparison with Other Patterns",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "advanced-example-game-character-creation-system",
        "title": "Advanced Example: Game Character Creation System",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "extending-the-game-character-system-with-new-families",
        "title": "Extending the Game Character System with New Families",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "adding-a-new-product-to-all-factories",
        "title": "Adding a New Product to All Factories",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "abstract-factory-with-function-based-products",
        "title": "Abstract Factory with Function-Based Products",
        "level": 2,
        "wordCount": 22
      },
      {
        "id": "abstract-factory-with-configuration-driven-approach",
        "title": "Abstract Factory with Configuration-Driven Approach",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "implementing-abstract-factory-with-pythons-dynamic-features",
        "title": "Implementing Abstract Factory with Python's Dynamic Features",
        "level": 2,
        "wordCount": 19
      },
      {
        "id": "using-dependency-injection-with-abstract-factory",
        "title": "Using Dependency Injection with Abstract Factory",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "abstract-factory-implementation-with-modern-python-features",
        "title": "Abstract Factory Implementation with Modern Python Features",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 251
      }
    ],
    "totalWordCount": 1854,
    "estimatedReadingTime": 480000,
    "title": "abstract_factory",
    "frontmatter": {}
  },
  "public\\content\\design_principles\\beginner\\strategy.md": {
    "path": "public\\content\\design_principles\\beginner\\strategy.md",
    "sections": [
      {
        "id": "the-strategy-pattern-in-python-a-first-principles-exploration",
        "title": "The Strategy Pattern in Python: A First Principles Exploration",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "the-core-problem-algorithm-flexibility",
        "title": "The Core Problem: Algorithm Flexibility",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "the-strategy-pattern-first-principles",
        "title": "The Strategy Pattern: First Principles",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "basic-implementation-in-python",
        "title": "Basic Implementation in Python",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "understanding-the-implementation",
        "title": "Understanding the Implementation",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "practical-example-payment-processing",
        "title": "Practical Example: Payment Processing",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "strategy-pattern-with-function-based-strategies",
        "title": "Strategy Pattern with Function-Based Strategies",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "using-pythons-built-in-functions-as-strategies",
        "title": "Using Python's Built-in Functions as Strategies",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "strategy-with-configuration-parameters",
        "title": "Strategy with Configuration Parameters",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "advanced-example-text-processing-strategies",
        "title": "Advanced Example: Text Processing Strategies",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "using-decorators-to-apply-strategies",
        "title": "Using Decorators to Apply Strategies",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "strategy-pattern-with-context-managers",
        "title": "Strategy Pattern with Context Managers",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "strategies-with-state",
        "title": "Strategies with State",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "when-to-use-the-strategy-pattern",
        "title": "When to Use the Strategy Pattern",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "comparison-with-other-behavioral-patterns",
        "title": "Comparison with Other Behavioral Patterns",
        "level": 2,
        "wordCount": 132
      },
      {
        "id": "python-specific-considerations",
        "title": "Python-Specific Considerations",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "strategy-pattern-with-dictionary-mapping",
        "title": "Strategy Pattern with Dictionary Mapping",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "combining-strategy-with-factory-pattern",
        "title": "Combining Strategy with Factory Pattern",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "strategies-with-composite-pattern",
        "title": "Strategies with Composite Pattern",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "real-world-example-machine-learning-model-selection",
        "title": "Real-World Example: Machine Learning Model Selection",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "configuring-strategies-with-yaml",
        "title": "Configuring Strategies with YAML",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "applying-strategy-pattern-to-gui-event-handling",
        "title": "Applying Strategy Pattern to GUI Event Handling",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 247
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 145
      }
    ],
    "totalWordCount": 1884,
    "estimatedReadingTime": 480000,
    "title": "strategy",
    "frontmatter": {}
  },
  "public\\content\\design_principles\\beginner\\singleton.md": {
    "path": "public\\content\\design_principles\\beginner\\singleton.md",
    "sections": [
      {
        "id": "the-singleton-design-pattern-in-python-a-first-principles-exploration",
        "title": "The Singleton Design Pattern in Python: A First Principles Exploration",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "what-is-a-design-pattern",
        "title": "What is a Design Pattern?",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "the-core-problem-single-instance-control",
        "title": "The Core Problem: Single Instance Control",
        "level": 2,
        "wordCount": 119
      },
      {
        "id": "the-singleton-pattern-first-principles",
        "title": "The Singleton Pattern: First Principles",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "basic-singleton-implementation-in-python",
        "title": "Basic Singleton Implementation in Python",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "understanding-the-implementation",
        "title": "Understanding the Implementation",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "thread-safety-concerns",
        "title": "Thread Safety Concerns",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "lazy-initialization",
        "title": "Lazy Initialization",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "a-practical-example-configuration-manager",
        "title": "A Practical Example: Configuration Manager",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "metaclass-implementation",
        "title": "Metaclass Implementation",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "module-level-singleton",
        "title": "Module-Level Singleton",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "borg-pattern-an-alternative-approach",
        "title": "Borg Pattern: An Alternative Approach",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "when-to-use-singleton",
        "title": "When to Use Singleton",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "alternatives-to-consider",
        "title": "Alternatives to Consider",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "common-pitfalls",
        "title": "Common Pitfalls",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 109
      }
    ],
    "totalWordCount": 1006,
    "estimatedReadingTime": 300000,
    "title": "singleton",
    "frontmatter": {}
  },
  "public\\content\\design_principles\\beginner\\observer.md": {
    "path": "public\\content\\design_principles\\beginner\\observer.md",
    "sections": [
      {
        "id": "the-observer-pattern-in-python-a-first-principles-exploration",
        "title": "The Observer Pattern in Python: A First Principles Exploration",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "the-core-problem-managing-object-dependencies",
        "title": "The Core Problem: Managing Object Dependencies",
        "level": 2,
        "wordCount": 154
      },
      {
        "id": "the-observer-pattern-first-principles",
        "title": "The Observer Pattern: First Principles",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "basic-implementation-in-python",
        "title": "Basic Implementation in Python",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "understanding-the-implementation",
        "title": "Understanding the Implementation",
        "level": 2,
        "wordCount": 154
      },
      {
        "id": "push-vs-pull-communication-models",
        "title": "Push vs. Pull Communication Models",
        "level": 2,
        "wordCount": 139
      },
      {
        "id": "event-based-implementation",
        "title": "Event-Based Implementation",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "using-pythons-built-in-observer-pattern",
        "title": "Using Python's Built-in Observer Pattern",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "practical-example-a-stock-market-monitoring-system",
        "title": "Practical Example: A Stock Market Monitoring System",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "using-the-observer-pattern-with-context-managers",
        "title": "Using the Observer Pattern with Context Managers",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "combining-with-other-design-patterns",
        "title": "Combining with Other Design Patterns",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "when-to-use-the-observer-pattern",
        "title": "When to Use the Observer Pattern",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 146
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 156
      }
    ],
    "totalWordCount": 1363,
    "estimatedReadingTime": 360000,
    "title": "observer",
    "frontmatter": {}
  },
  "public\\content\\design_principles\\beginner\\factory_method.md": {
    "path": "public\\content\\design_principles\\beginner\\factory_method.md",
    "sections": [
      {
        "id": "the-factory-method-pattern-in-python-a-first-principles-exploration",
        "title": "The Factory Method Pattern in Python: A First Principles Exploration",
        "level": 1,
        "wordCount": 45
      },
      {
        "id": "understanding-the-core-problem",
        "title": "Understanding the Core Problem",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "the-factory-method-first-principles",
        "title": "The Factory Method: First Principles",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "basic-structure-of-the-factory-method",
        "title": "Basic Structure of the Factory Method",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "understanding-the-implementation",
        "title": "Understanding the Implementation",
        "level": 2,
        "wordCount": 156
      },
      {
        "id": "factory-method-with-parameters",
        "title": "Factory Method with Parameters",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "conditional-factory-method",
        "title": "Conditional Factory Method",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "registration-based-factory",
        "title": "Registration-Based Factory",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "decorator-based-factory-registration",
        "title": "Decorator-Based Factory Registration",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "a-practical-example-ui-component-factory",
        "title": "A Practical Example: UI Component Factory",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "when-to-use-the-factory-method-pattern",
        "title": "When to Use the Factory Method Pattern",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "comparison-with-other-creational-patterns",
        "title": "Comparison with Other Creational Patterns",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "common-pitfalls-and-best-practices",
        "title": "Common Pitfalls and Best Practices",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 111
      }
    ],
    "totalWordCount": 1090,
    "estimatedReadingTime": 300000,
    "title": "factory_method",
    "frontmatter": {}
  },
  "public\\content\\design_principles\\beginner\\decorator.md": {
    "path": "public\\content\\design_principles\\beginner\\decorator.md",
    "sections": [
      {
        "id": "the-decorator-pattern-in-python-a-first-principles-exploration",
        "title": "The Decorator Pattern in Python: A First Principles Exploration",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "the-core-problem-extending-functionality-dynamically",
        "title": "The Core Problem: Extending Functionality Dynamically",
        "level": 2,
        "wordCount": 152
      },
      {
        "id": "the-decorator-pattern-first-principles",
        "title": "The Decorator Pattern: First Principles",
        "level": 2,
        "wordCount": 140
      },
      {
        "id": "basic-implementation-in-python",
        "title": "Basic Implementation in Python",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "understanding-the-implementation",
        "title": "Understanding the Implementation",
        "level": 2,
        "wordCount": 146
      },
      {
        "id": "practical-example-coffee-shop-order-system",
        "title": "Practical Example: Coffee Shop Order System",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "decorators-with-state",
        "title": "Decorators with State",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "functional-decorators-in-python",
        "title": "Functional Decorators in Python",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "class-decorators-in-python",
        "title": "Class Decorators in Python",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "practical-example-file-io-with-decorators",
        "title": "Practical Example: File I/O with Decorators",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "dynamic-decorators-at-runtime",
        "title": "Dynamic Decorators at Runtime",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "complex-example-web-service-middleware",
        "title": "Complex Example: Web Service Middleware",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "using-pythons-standard-library-decorators",
        "title": "Using Python's Standard Library Decorators",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "decorator-pattern-in-context-extending-a-web-framework",
        "title": "Decorator Pattern in Context: Extending a Web Framework",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "combining-decorators-with-other-patterns",
        "title": "Combining Decorators with Other Patterns",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "practical-considerations-and-best-practices",
        "title": "Practical Considerations and Best Practices",
        "level": 2,
        "wordCount": 281
      },
      {
        "id": "when-to-use-the-decorator-pattern",
        "title": "When to Use the Decorator Pattern",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "when-not-to-use-the-decorator-pattern",
        "title": "When Not to Use the Decorator Pattern",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "real-world-applications-of-the-decorator-pattern",
        "title": "Real-World Applications of the Decorator Pattern",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 148
      }
    ],
    "totalWordCount": 1920,
    "estimatedReadingTime": 480000,
    "title": "decorator",
    "frontmatter": {}
  },
  "public\\content\\design_principles\\beginner\\command.md": {
    "path": "public\\content\\design_principles\\beginner\\command.md",
    "sections": [
      {
        "id": "the-command-pattern-in-python-a-first-principles-exploration",
        "title": "The Command Pattern in Python: A First Principles Exploration",
        "level": 1,
        "wordCount": 44
      },
      {
        "id": "the-core-problem-action-encapsulation-and-decoupling",
        "title": "The Core Problem: Action Encapsulation and Decoupling",
        "level": 2,
        "wordCount": 140
      },
      {
        "id": "the-command-pattern-first-principles",
        "title": "The Command Pattern: First Principles",
        "level": 2,
        "wordCount": 154
      },
      {
        "id": "basic-implementation-in-python",
        "title": "Basic Implementation in Python",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "understanding-the-implementation",
        "title": "Understanding the Implementation",
        "level": 2,
        "wordCount": 173
      },
      {
        "id": "adding-undo-functionality",
        "title": "Adding Undo Functionality",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "command-with-state-management",
        "title": "Command with State Management",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "composite-commands",
        "title": "Composite Commands",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "command-queue-and-log",
        "title": "Command Queue and Log",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "commands-with-return-values",
        "title": "Commands with Return Values",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "practical-example-text-editor",
        "title": "Practical Example: Text Editor",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "command-pattern-with-lambda-functions",
        "title": "Command Pattern with Lambda Functions",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "command-pattern-with-decorators",
        "title": "Command Pattern with Decorators",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "transaction-management-with-commands",
        "title": "Transaction Management with Commands",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "command-pattern-for-asynchronous-execution",
        "title": "Command Pattern for Asynchronous Execution",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "real-world-example-api-request-commands",
        "title": "Real-World Example: API Request Commands",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "command-pattern-for-task-scheduling",
        "title": "Command Pattern for Task Scheduling",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "command-pattern-for-dependency-injection",
        "title": "Command Pattern for Dependency Injection",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "when-to-use-the-command-pattern",
        "title": "When to Use the Command Pattern",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "command-vs-strategy-pattern",
        "title": "Command vs. Strategy Pattern",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "command-vs-observer-pattern",
        "title": "Command vs. Observer Pattern",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "best-practices-for-implementing-commands",
        "title": "Best Practices for Implementing Commands",
        "level": 2,
        "wordCount": 184
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 210
      }
    ],
    "totalWordCount": 1809,
    "estimatedReadingTime": 480000,
    "title": "command",
    "frontmatter": {}
  },
  "public\\content\\design_principles\\beginner\\adapter.md": {
    "path": "public\\content\\design_principles\\beginner\\adapter.md",
    "sections": [
      {
        "id": "the-adapter-pattern-in-python-a-first-principles-exploration",
        "title": "The Adapter Pattern in Python: A First Principles Exploration",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "the-core-problem-incompatible-interfaces",
        "title": "The Core Problem: Incompatible Interfaces",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "the-adapter-pattern-first-principles",
        "title": "The Adapter Pattern: First Principles",
        "level": 2,
        "wordCount": 128
      },
      {
        "id": "basic-implementation-in-python",
        "title": "Basic Implementation in Python",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "understanding-the-implementation",
        "title": "Understanding the Implementation",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "two-variants-of-the-adapter-pattern",
        "title": "Two Variants of the Adapter Pattern",
        "level": 2,
        "wordCount": 165
      },
      {
        "id": "practical-example-database-connection-adapter",
        "title": "Practical Example: Database Connection Adapter",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "using-the-adapter-pattern-with-existing-libraries",
        "title": "Using the Adapter Pattern with Existing Libraries",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "two-way-adapters",
        "title": "Two-Way Adapters",
        "level": 2,
        "wordCount": 39
      },
      {
        "id": "adapter-vs-similar-patterns",
        "title": "Adapter vs. Similar Patterns",
        "level": 2,
        "wordCount": 163
      },
      {
        "id": "implementing-adapters-using-pythons-dynamic-features",
        "title": "Implementing Adapters Using Python's Dynamic Features",
        "level": 2,
        "wordCount": 116
      },
      {
        "id": "practical-example-adapting-different-payment-gateways",
        "title": "Practical Example: Adapting Different Payment Gateways",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "object-adapters-with-composition-vs-inheritance",
        "title": "Object Adapters with Composition vs Inheritance",
        "level": 2,
        "wordCount": 151
      },
      {
        "id": "dynamic-adapter-selection",
        "title": "Dynamic Adapter Selection",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "bidirectional-adapters",
        "title": "Bidirectional Adapters",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "adapter-with-caching",
        "title": "Adapter with Caching",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "adapter-for-asynchronous-apis",
        "title": "Adapter for Asynchronous APIs",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "real-world-example-database-driver-adapter",
        "title": "Real-World Example: Database Driver Adapter",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "when-to-use-the-adapter-pattern",
        "title": "When to Use the Adapter Pattern",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "best-practices-for-implementing-adapters",
        "title": "Best Practices for Implementing Adapters",
        "level": 2,
        "wordCount": 154
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 209
      }
    ],
    "totalWordCount": 1953,
    "estimatedReadingTime": 480000,
    "title": "adapter",
    "frontmatter": {}
  },
  "public\\content\\design_principles\\advanced\\visitor.md": {
    "path": "public\\content\\design_principles\\advanced\\visitor.md",
    "sections": [
      {
        "id": "the-visitor-design-pattern-in-python",
        "title": "The Visitor Design Pattern in Python",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "first-principles-understanding-separation-of-concerns",
        "title": "First Principles: Understanding Separation of Concerns",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "the-problem-the-visitor-pattern-solves",
        "title": "The Problem the Visitor Pattern Solves",
        "level": 2,
        "wordCount": 145
      },
      {
        "id": "core-components-of-the-visitor-pattern",
        "title": "Core Components of the Visitor Pattern",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "a-simple-example-document-processing",
        "title": "A Simple Example: Document Processing",
        "level": 2,
        "wordCount": 165
      },
      {
        "id": "a-more-complex-example-abstract-syntax-tree-evaluation",
        "title": "A More Complex Example: Abstract Syntax Tree Evaluation",
        "level": 2,
        "wordCount": 145
      },
      {
        "id": "adding-new-elements-vs-adding-new-operations",
        "title": "Adding New Elements vs. Adding New Operations",
        "level": 2,
        "wordCount": 157
      },
      {
        "id": "advanced-use-cases-and-variations",
        "title": "Advanced Use Cases and Variations",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "real-world-example-file-system-traversal",
        "title": "Real-World Example: File System Traversal",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "benefits-of-the-visitor-pattern",
        "title": "Benefits of the Visitor Pattern",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "limitations-and-considerations",
        "title": "Limitations and Considerations",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "when-to-use-the-visitor-pattern",
        "title": "When to Use the Visitor Pattern",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "alternative-approaches",
        "title": "Alternative Approaches",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 116
      }
    ],
    "totalWordCount": 1505,
    "estimatedReadingTime": 420000,
    "title": "visitor",
    "frontmatter": {}
  },
  "public\\content\\design_principles\\advanced\\memento.md": {
    "path": "public\\content\\design_principles\\advanced\\memento.md",
    "sections": [
      {
        "id": "the-memento-design-pattern-in-python",
        "title": "The Memento Design Pattern in Python",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "first-principles-understanding-state-and-history",
        "title": "First Principles: Understanding State and History",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "the-problem-the-memento-pattern-solves",
        "title": "The Problem the Memento Pattern Solves",
        "level": 2,
        "wordCount": 119
      },
      {
        "id": "core-components-of-the-memento-pattern",
        "title": "Core Components of the Memento Pattern",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "a-simple-example-text-editor",
        "title": "A Simple Example: Text Editor",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "deep-dive-understanding-encapsulation-in-the-memento-pattern",
        "title": "Deep Dive: Understanding Encapsulation in the Memento Pattern",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "a-more-complex-example-document-with-multiple-properties",
        "title": "A More Complex Example: Document with Multiple Properties",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "implementation-variations-and-considerations",
        "title": "Implementation Variations and Considerations",
        "level": 2,
        "wordCount": 145
      },
      {
        "id": "real-world-example-drawing-application",
        "title": "Real-World Example: Drawing Application",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "combining-with-other-patterns",
        "title": "Combining with Other Patterns",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "advanced-implementation-snapshot-points",
        "title": "Advanced Implementation: Snapshot Points",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "when-to-use-the-memento-pattern",
        "title": "When to Use the Memento Pattern",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "alternative-approaches",
        "title": "Alternative Approaches",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 139
      }
    ],
    "totalWordCount": 1425,
    "estimatedReadingTime": 360000,
    "title": "memento",
    "frontmatter": {}
  },
  "public\\content\\design_principles\\advanced\\iterator.md": {
    "path": "public\\content\\design_principles\\advanced\\iterator.md",
    "sections": [
      {
        "id": "the-iterator-design-pattern-in-python",
        "title": "The Iterator Design Pattern in Python",
        "level": 1,
        "wordCount": 50
      },
      {
        "id": "first-principles-sequential-access-to-collections",
        "title": "First Principles: Sequential Access to Collections",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "the-problem-the-iterator-pattern-solves",
        "title": "The Problem the Iterator Pattern Solves",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "core-components-of-the-iterator-pattern",
        "title": "Core Components of the Iterator Pattern",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "pythons-built-in-iterator-protocol",
        "title": "Python's Built-in Iterator Protocol",
        "level": 2,
        "wordCount": 133
      },
      {
        "id": "a-simplified-approach-iterator-in-the-same-class",
        "title": "A Simplified Approach: Iterator in the Same Class",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "a-more-complete-example-custom-collection-with-multiple-iterators",
        "title": "A More Complete Example: Custom Collection with Multiple Iterators",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "pythons-generator-functions-a-simplified-iterator",
        "title": "Python's Generator Functions: A Simplified Iterator",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "advanced-iterator-pattern-features",
        "title": "Advanced Iterator Pattern Features",
        "level": 2,
        "wordCount": 150
      },
      {
        "id": "real-world-example-file-processing",
        "title": "Real-World Example: File Processing",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "implementing-a-tree-iterator",
        "title": "Implementing a Tree Iterator",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "iterator-pattern-in-python-collections",
        "title": "Iterator Pattern in Python Collections",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "python-iterator-tools",
        "title": "Python Iterator Tools",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "benefits-of-the-iterator-pattern",
        "title": "Benefits of the Iterator Pattern",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "limitations-and-considerations",
        "title": "Limitations and Considerations",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "when-to-use-the-iterator-pattern",
        "title": "When to Use the Iterator Pattern",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 187
      }
    ],
    "totalWordCount": 1504,
    "estimatedReadingTime": 420000,
    "title": "iterator",
    "frontmatter": {}
  },
  "public\\content\\design_principles\\advanced\\interpreter.md": {
    "path": "public\\content\\design_principles\\advanced\\interpreter.md",
    "sections": [
      {
        "id": "the-interpreter-design-pattern-in-python",
        "title": "The Interpreter Design Pattern in Python",
        "level": 1,
        "wordCount": 40
      },
      {
        "id": "first-principles-what-is-an-interpreter",
        "title": "First Principles: What Is an Interpreter?",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "the-problem-the-interpreter-pattern-solves",
        "title": "The Problem the Interpreter Pattern Solves",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "core-components-of-the-interpreter-pattern",
        "title": "Core Components of the Interpreter Pattern",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "a-simple-example-mathematical-expression-evaluator",
        "title": "A Simple Example: Mathematical Expression Evaluator",
        "level": 2,
        "wordCount": 216
      },
      {
        "id": "a-more-complete-example-variables-and-operations",
        "title": "A More Complete Example: Variables and Operations",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "adding-a-parser",
        "title": "Adding a Parser",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "real-world-example-a-simple-query-language",
        "title": "Real-World Example: A Simple Query Language",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "benefits-of-the-interpreter-pattern",
        "title": "Benefits of the Interpreter Pattern",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "limitations-and-considerations",
        "title": "Limitations and Considerations",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "when-to-use-the-interpreter-pattern",
        "title": "When to Use the Interpreter Pattern",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "alternative-approaches",
        "title": "Alternative Approaches",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 101
      }
    ],
    "totalWordCount": 1163,
    "estimatedReadingTime": 300000,
    "title": "interpreter",
    "frontmatter": {}
  },
  "public\\content\\css\\visual_styles\\transitions.md": {
    "path": "public\\content\\css\\visual_styles\\transitions.md",
    "sections": [
      {
        "id": "css-transitions-and-animation-from-first-principles",
        "title": "CSS Transitions and Animation: From First Principles",
        "level": 1,
        "wordCount": 28
      },
      {
        "id": "part-1-css-transitions",
        "title": "Part 1: CSS Transitions",
        "level": 2,
        "wordCount": 473
      },
      {
        "id": "part-2-css-animations",
        "title": "Part 2: CSS Animations",
        "level": 2,
        "wordCount": 345
      },
      {
        "id": "part-3-practical-applications-and-best-practices",
        "title": "Part 3: Practical Applications and Best Practices",
        "level": 2,
        "wordCount": 342
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 118
      }
    ],
    "totalWordCount": 1306,
    "estimatedReadingTime": 360000,
    "title": "transitions",
    "frontmatter": {}
  },
  "public\\content\\css\\visual_styles\\transformations.md": {
    "path": "public\\content\\css\\visual_styles\\transformations.md",
    "sections": [
      {
        "id": "css-transformations-understanding-2d-and-3d-from-first-principles",
        "title": "CSS Transformations: Understanding 2D and 3D from First Principles",
        "level": 1,
        "wordCount": 33
      },
      {
        "id": "the-coordinate-system-the-foundation-of-transformations",
        "title": "The Coordinate System: The Foundation of Transformations",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "what-are-css-transformations",
        "title": "What Are CSS Transformations?",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "2d-transformations-manipulating-elements-in-a-flat-plane",
        "title": "2D Transformations: Manipulating Elements in a Flat Plane",
        "level": 2,
        "wordCount": 284
      },
      {
        "id": "transform-origin-the-pivot-point",
        "title": "Transform Origin: The Pivot Point",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "multiple-transformations-combining-effects",
        "title": "Multiple Transformations: Combining Effects",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "3d-transformations-adding-depth",
        "title": "3D Transformations: Adding Depth",
        "level": 2,
        "wordCount": 273
      },
      {
        "id": "important-supporting-properties",
        "title": "Important Supporting Properties",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "real-world-applications",
        "title": "Real-World Applications",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "understanding-css-transform-functions-mathematically",
        "title": "Understanding CSS Transform Functions Mathematically",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 91
      }
    ],
    "totalWordCount": 1146,
    "estimatedReadingTime": 300000,
    "title": "transformations",
    "frontmatter": {}
  },
  "public\\content\\css\\visual_styles\\masking_and_clipping.md": {
    "path": "public\\content\\css\\visual_styles\\masking_and_clipping.md",
    "sections": [
      {
        "id": "css-masking-and-clipping-from-first-principles",
        "title": "CSS Masking and Clipping: From First Principles",
        "level": 1,
        "wordCount": 35
      },
      {
        "id": "part-1-understanding-the-fundamental-concepts",
        "title": "Part 1: Understanding the Fundamental Concepts",
        "level": 2,
        "wordCount": 186
      },
      {
        "id": "part-2-css-clipping",
        "title": "Part 2: CSS Clipping",
        "level": 2,
        "wordCount": 483
      },
      {
        "id": "part-3-css-masking",
        "title": "Part 3: CSS Masking",
        "level": 2,
        "wordCount": 333
      },
      {
        "id": "part-4-combining-clipping-and-masking",
        "title": "Part 4: Combining Clipping and Masking",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "part-5-browser-support-and-fallbacks",
        "title": "Part 5: Browser Support and Fallbacks",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "part-6-practical-applications-and-creative-techniques",
        "title": "Part 6: Practical Applications and Creative Techniques",
        "level": 2,
        "wordCount": 184
      },
      {
        "id": "part-7-advanced-techniques-and-effects",
        "title": "Part 7: Advanced Techniques and Effects",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "part-8-future-possibilities-and-emerging-techniques",
        "title": "Part 8: Future Possibilities and Emerging Techniques",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "conclusion-the-art-of-revealing-and-concealing",
        "title": "Conclusion: The Art of Revealing and Concealing",
        "level": 2,
        "wordCount": 198
      }
    ],
    "totalWordCount": 1795,
    "estimatedReadingTime": 480000,
    "title": "masking_and_clipping",
    "frontmatter": {}
  },
  "public\\content\\css\\visual_styles\\logical_properties.md": {
    "path": "public\\content\\css\\visual_styles\\logical_properties.md",
    "sections": [
      {
        "id": "css-custom-properties-variables-from-first-principles",
        "title": "CSS Custom Properties (Variables): From First Principles",
        "level": 1,
        "wordCount": 47
      },
      {
        "id": "part-1-the-fundamental-concept",
        "title": "Part 1: The Fundamental Concept",
        "level": 2,
        "wordCount": 403
      },
      {
        "id": "part-2-practical-applications",
        "title": "Part 2: Practical Applications",
        "level": 2,
        "wordCount": 155
      },
      {
        "id": "part-3-complex-use-cases",
        "title": "Part 3: Complex Use Cases",
        "level": 2,
        "wordCount": 167
      },
      {
        "id": "part-4-javascript-integration",
        "title": "Part 4: JavaScript Integration",
        "level": 2,
        "wordCount": 126
      },
      {
        "id": "part-5-advanced-techniques",
        "title": "Part 5: Advanced Techniques",
        "level": 2,
        "wordCount": 210
      },
      {
        "id": "part-6-performance-and-best-practices",
        "title": "Part 6: Performance and Best Practices",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "part-7-real-world-examples",
        "title": "Part 7: Real-World Examples",
        "level": 2,
        "wordCount": 185
      },
      {
        "id": "part-8-advanced-use-cases-and-future-possibilities",
        "title": "Part 8: Advanced Use Cases and Future Possibilities",
        "level": 2,
        "wordCount": 222
      },
      {
        "id": "part-9-the-future-of-css-custom-properties",
        "title": "Part 9: The Future of CSS Custom Properties",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "conclusion-the-impact-of-css-custom-properties",
        "title": "Conclusion: The Impact of CSS Custom Properties",
        "level": 2,
        "wordCount": 237
      }
    ],
    "totalWordCount": 2015,
    "estimatedReadingTime": 540000,
    "title": "logical_properties",
    "frontmatter": {}
  },
  "public\\content\\css\\visual_styles\\gradients.md": {
    "path": "public\\content\\css\\visual_styles\\gradients.md",
    "sections": [
      {
        "id": "css-gradients-a-first-principles-approach",
        "title": "CSS Gradients: A First Principles Approach",
        "level": 1,
        "wordCount": 38
      },
      {
        "id": "part-1-understanding-gradients-from-first-principles",
        "title": "Part 1: Understanding Gradients from First Principles",
        "level": 2,
        "wordCount": 329
      },
      {
        "id": "part-2-linear-gradients-in-depth",
        "title": "Part 2: Linear Gradients in Depth",
        "level": 2,
        "wordCount": 240
      },
      {
        "id": "part-3-radial-gradients-in-depth",
        "title": "Part 3: Radial Gradients in Depth",
        "level": 2,
        "wordCount": 238
      },
      {
        "id": "part-4-conic-gradients-in-depth",
        "title": "Part 4: Conic Gradients in Depth",
        "level": 2,
        "wordCount": 247
      },
      {
        "id": "part-5-advanced-gradient-techniques",
        "title": "Part 5: Advanced Gradient Techniques",
        "level": 2,
        "wordCount": 232
      },
      {
        "id": "part-6-real-world-examples",
        "title": "Part 6: Real-World Examples",
        "level": 2,
        "wordCount": 132
      },
      {
        "id": "part-7-performance-and-best-practices",
        "title": "Part 7: Performance and Best Practices",
        "level": 2,
        "wordCount": 219
      },
      {
        "id": "part-8-gradient-generator-tool",
        "title": "Part 8: Gradient Generator Tool",
        "level": 2,
        "wordCount": 51
      },
      {
        "id": "part-9-creating-complex-gradient-effects",
        "title": "Part 9: Creating Complex Gradient Effects",
        "level": 2,
        "wordCount": 243
      },
      {
        "id": "part-10-gradient-techniques-for-ui-components",
        "title": "Part 10: Gradient Techniques for UI Components",
        "level": 2,
        "wordCount": 168
      },
      {
        "id": "part-11-combining-gradients-with-other-css-features",
        "title": "Part 11: Combining Gradients with Other CSS Features",
        "level": 2,
        "wordCount": 173
      },
      {
        "id": "part-12-gradients-in-design-systems",
        "title": "Part 12: Gradients in Design Systems",
        "level": 2,
        "wordCount": 121
      },
      {
        "id": "conclusion-mastering-the-art-of-css-gradients",
        "title": "Conclusion: Mastering the Art of CSS Gradients",
        "level": 2,
        "wordCount": 301
      }
    ],
    "totalWordCount": 2732,
    "estimatedReadingTime": 660000,
    "title": "gradients",
    "frontmatter": {}
  },
  "public\\content\\css\\visual_styles\\filters_and_blend_modes.md": {
    "path": "public\\content\\css\\visual_styles\\filters_and_blend_modes.md",
    "sections": [
      {
        "id": "css-filters-and-blend-modes-from-first-principles",
        "title": "CSS Filters and Blend Modes: From First Principles",
        "level": 1,
        "wordCount": 36
      },
      {
        "id": "part-1-css-filters",
        "title": "Part 1: CSS Filters",
        "level": 2,
        "wordCount": 1069
      },
      {
        "id": "part-2-css-blend-modes",
        "title": "Part 2: CSS Blend Modes",
        "level": 2,
        "wordCount": 959
      },
      {
        "id": "part-3-creative-applications-and-advanced-techniques",
        "title": "Part 3: Creative Applications and Advanced Techniques",
        "level": 2,
        "wordCount": 246
      },
      {
        "id": "part-4-practical-considerations-and-best-practices",
        "title": "Part 4: Practical Considerations and Best Practices",
        "level": 2,
        "wordCount": 275
      },
      {
        "id": "part-5-creative-recipes-and-patterns",
        "title": "Part 5: Creative Recipes and Patterns",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "part-6-the-future-of-filters-and-blend-modes",
        "title": "Part 6: The Future of Filters and Blend Modes",
        "level": 2,
        "wordCount": 100
      },
      {
        "id": "conclusion-mastering-the-visual-language",
        "title": "Conclusion: Mastering the Visual Language",
        "level": 2,
        "wordCount": 209
      }
    ],
    "totalWordCount": 2979,
    "estimatedReadingTime": 720000,
    "title": "filters_and_blend_modes",
    "frontmatter": {}
  },
  "public\\content\\css\\visual_styles\\border_and_outline.md": {
    "path": "public\\content\\css\\visual_styles\\border_and_outline.md",
    "sections": [
      {
        "id": "css-border-and-outline-properties-a-first-principles-approach",
        "title": "CSS Border and Outline Properties: A First Principles Approach",
        "level": 1,
        "wordCount": 39
      },
      {
        "id": "part-1-understanding-borders-from-first-principles",
        "title": "Part 1: Understanding Borders from First Principles",
        "level": 2,
        "wordCount": 515
      },
      {
        "id": "part-2-understanding-outlines-from-first-principles",
        "title": "Part 2: Understanding Outlines from First Principles",
        "level": 2,
        "wordCount": 239
      },
      {
        "id": "part-3-practical-border-and-outline-techniques",
        "title": "Part 3: Practical Border and Outline Techniques",
        "level": 2,
        "wordCount": 315
      },
      {
        "id": "part-4-real-world-examples",
        "title": "Part 4: Real-World Examples",
        "level": 2,
        "wordCount": 139
      },
      {
        "id": "part-5-border-and-outline-best-practices",
        "title": "Part 5: Border and Outline Best Practices",
        "level": 2,
        "wordCount": 155
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 126
      }
    ],
    "totalWordCount": 1528,
    "estimatedReadingTime": 420000,
    "title": "border_and_outline",
    "frontmatter": {}
  },
  "public\\content\\css\\visual_styles\\background_properties.md": {
    "path": "public\\content\\css\\visual_styles\\background_properties.md",
    "sections": [
      {
        "id": "css-background-properties-and-techniques-a-first-principles-approach",
        "title": "CSS Background Properties and Techniques: A First Principles Approach",
        "level": 1,
        "wordCount": 37
      },
      {
        "id": "the-fundamentals-what-is-a-background",
        "title": "The Fundamentals: What is a Background?",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "the-essential-background-properties",
        "title": "The Essential Background Properties",
        "level": 2,
        "wordCount": 558
      },
      {
        "id": "the-shorthand-background-property",
        "title": "The Shorthand: `background` Property",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "practical-background-techniques",
        "title": "Practical Background Techniques",
        "level": 2,
        "wordCount": 268
      },
      {
        "id": "real-world-examples",
        "title": "Real-World Examples",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "considerations-and-best-practices",
        "title": "Considerations and Best Practices",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 93
      }
    ],
    "totalWordCount": 1278,
    "estimatedReadingTime": 360000,
    "title": "background_properties",
    "frontmatter": {}
  },
  "public\\content\\css\\performance_optimization\\render_blocking_css.md": {
    "path": "public\\content\\css\\performance_optimization\\render_blocking_css.md",
    "sections": [
      {
        "id": "understanding-render-blocking-css-from-first-principles",
        "title": "Understanding Render-Blocking CSS: From First Principles",
        "level": 1,
        "wordCount": 69
      },
      {
        "id": "what-makes-css-render-blocking",
        "title": "What Makes CSS Render-Blocking?",
        "level": 2,
        "wordCount": 174
      },
      {
        "id": "the-step-by-step-process-of-css-blocking",
        "title": "The Step-by-Step Process of CSS Blocking",
        "level": 2,
        "wordCount": 154
      },
      {
        "id": "the-cost-of-render-blocking-css",
        "title": "The Cost of Render-Blocking CSS",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "why-all-css-is-not-equal",
        "title": "Why All CSS Is Not Equal",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "detecting-render-blocking-css",
        "title": "Detecting Render-Blocking CSS",
        "level": 2,
        "wordCount": 79
      },
      {
        "id": "practical-solutions-how-to-minimize-css-blocking",
        "title": "Practical Solutions: How to Minimize CSS Blocking",
        "level": 2,
        "wordCount": 208
      },
      {
        "id": "tools-to-automatically-extract-critical-css",
        "title": "Tools to Automatically Extract Critical CSS",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "advanced-concepts-the-physics-of-css-delivery",
        "title": "Advanced Concepts: The Physics of CSS Delivery",
        "level": 2,
        "wordCount": 203
      },
      {
        "id": "real-world-case-studies",
        "title": "Real-World Case Studies",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "analyzing-performance-impact",
        "title": "Analyzing Performance Impact",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "common-challenges-and-solutions",
        "title": "Common Challenges and Solutions",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "modern-approaches-and-future-trends",
        "title": "Modern Approaches and Future Trends",
        "level": 2,
        "wordCount": 125
      },
      {
        "id": "comprehensive-optimization-strategy",
        "title": "Comprehensive Optimization Strategy",
        "level": 2,
        "wordCount": 149
      },
      {
        "id": "conclusion-the-art-of-balancing-css-performance",
        "title": "Conclusion: The Art of Balancing CSS Performance",
        "level": 2,
        "wordCount": 202
      }
    ],
    "totalWordCount": 1910,
    "estimatedReadingTime": 480000,
    "title": "render_blocking_css",
    "frontmatter": {}
  },
  "public\\content\\css\\performance_optimization\\critical_rendering_path.md": {
    "path": "public\\content\\css\\performance_optimization\\critical_rendering_path.md",
    "sections": [
      {
        "id": "the-critical-rendering-path-from-bytes-to-pixels",
        "title": "The Critical Rendering Path: From Bytes to Pixels",
        "level": 1,
        "wordCount": 53
      },
      {
        "id": "what-is-the-critical-rendering-path",
        "title": "What Is the Critical Rendering Path?",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "starting-from-first-principles-bytes-to-dom",
        "title": "Starting from First Principles: Bytes to DOM",
        "level": 2,
        "wordCount": 213
      },
      {
        "id": "from-styles-to-cssom",
        "title": "From Styles to CSSOM",
        "level": 2,
        "wordCount": 182
      },
      {
        "id": "the-render-tree-combining-dom-and-cssom",
        "title": "The Render Tree: Combining DOM and CSSOM",
        "level": 2,
        "wordCount": 112
      },
      {
        "id": "layout-determining-element-geometry",
        "title": "Layout: Determining Element Geometry",
        "level": 2,
        "wordCount": 273
      },
      {
        "id": "painting-from-layout-to-pixels",
        "title": "Painting: From Layout to Pixels",
        "level": 2,
        "wordCount": 173
      },
      {
        "id": "javascripts-role-in-the-critical-rendering-path",
        "title": "JavaScript's Role in the Critical Rendering Path",
        "level": 2,
        "wordCount": 165
      },
      {
        "id": "measuring-and-optimizing-the-critical-rendering-path",
        "title": "Measuring and Optimizing the Critical Rendering Path",
        "level": 2,
        "wordCount": 189
      },
      {
        "id": "a-real-world-example-optimizing-a-page-load",
        "title": "A Real-World Example: Optimizing a Page Load",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "deeper-technical-insights",
        "title": "Deeper Technical Insights",
        "level": 2,
        "wordCount": 399
      },
      {
        "id": "advanced-optimization-techniques",
        "title": "Advanced Optimization Techniques",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "impact-of-modern-web-platform-features",
        "title": "Impact of Modern Web Platform Features",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "debugging-the-critical-rendering-path",
        "title": "Debugging the Critical Rendering Path",
        "level": 2,
        "wordCount": 153
      },
      {
        "id": "conclusion-putting-it-all-together",
        "title": "Conclusion: Putting It All Together",
        "level": 2,
        "wordCount": 188
      }
    ],
    "totalWordCount": 2475,
    "estimatedReadingTime": 600000,
    "title": "critical_rendering_path",
    "frontmatter": {}
  },
  "public\\content\\css\\layout\\z_index.md": {
    "path": "public\\content\\css\\layout\\z_index.md",
    "sections": [
      {
        "id": "z-index-and-stacking-contexts-from-first-principles",
        "title": "Z-Index and Stacking Contexts: From First Principles",
        "level": 1,
        "wordCount": 7
      },
      {
        "id": "the-fundamental-problem-managing-depth-in-a-2d-medium",
        "title": "The Fundamental Problem: Managing Depth in a 2D Medium",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "the-illusion-of-3d-in-a-2d-world",
        "title": "The Illusion of 3D in a 2D World",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "the-css-stacking-order-the-default-behavior",
        "title": "The CSS Stacking Order: The Default Behavior",
        "level": 2,
        "wordCount": 157
      },
      {
        "id": "the-z-index-property-controlling-the-stacking-order",
        "title": "The Z-Index Property: Controlling the Stacking Order",
        "level": 2,
        "wordCount": 158
      },
      {
        "id": "stacking-contexts-the-hierarchical-dimension",
        "title": "Stacking Contexts: The Hierarchical Dimension",
        "level": 2,
        "wordCount": 293
      },
      {
        "id": "the-stacking-order-within-a-context",
        "title": "The Stacking Order Within a Context",
        "level": 2,
        "wordCount": 138
      },
      {
        "id": "common-gotchas-and-solutions",
        "title": "Common Gotchas and Solutions",
        "level": 2,
        "wordCount": 226
      },
      {
        "id": "practical-examples-common-ui-patterns",
        "title": "Practical Examples: Common UI Patterns",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "a-systematic-approach-to-z-index-management",
        "title": "A Systematic Approach to Z-Index Management",
        "level": 2,
        "wordCount": 162
      },
      {
        "id": "understanding-z-index-in-modern-css-features",
        "title": "Understanding Z-Index in Modern CSS Features",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "key-principles-to-remember",
        "title": "Key Principles to Remember",
        "level": 2,
        "wordCount": 136
      },
      {
        "id": "building-a-mental-model-for-z-index",
        "title": "Building a Mental Model for Z-Index",
        "level": 2,
        "wordCount": 180
      }
    ],
    "totalWordCount": 1823,
    "estimatedReadingTime": 480000,
    "title": "z_index",
    "frontmatter": {}
  },
  "public\\content\\css\\layout\\positioning_schemes.md": {
    "path": "public\\content\\css\\layout\\positioning_schemes.md",
    "sections": [
      {
        "id": "css-positioning-schemes-from-first-principles",
        "title": "CSS Positioning Schemes: From First Principles",
        "level": 1,
        "wordCount": 6
      },
      {
        "id": "the-fundamental-problem-breaking-free-from-normal-flow",
        "title": "The Fundamental Problem: Breaking Free from Normal Flow",
        "level": 2,
        "wordCount": 126
      },
      {
        "id": "the-position-property-a-new-layer-of-control",
        "title": "The Position Property: A New Layer of Control",
        "level": 2,
        "wordCount": 126
      },
      {
        "id": "position-static-the-default-state",
        "title": "Position: Static — The Default State",
        "level": 2,
        "wordCount": 97
      },
      {
        "id": "position-relative-the-self-reference-point",
        "title": "Position: Relative — The Self-Reference Point",
        "level": 2,
        "wordCount": 224
      },
      {
        "id": "position-absolute-breaking-free-from-flow",
        "title": "Position: Absolute — Breaking Free from Flow",
        "level": 2,
        "wordCount": 378
      },
      {
        "id": "position-fixed-viewport-anchoring",
        "title": "Position: Fixed — Viewport Anchoring",
        "level": 2,
        "wordCount": 216
      },
      {
        "id": "position-sticky-the-hybrid-solution",
        "title": "Position: Sticky — The Hybrid Solution",
        "level": 2,
        "wordCount": 276
      },
      {
        "id": "the-z-index-property-managing-stacking",
        "title": "The Z-Index Property: Managing Stacking",
        "level": 2,
        "wordCount": 104
      },
      {
        "id": "creating-complex-layouts-combining-positioning-strategies",
        "title": "Creating Complex Layouts: Combining Positioning Strategies",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "positioning-gotchas-and-solutions",
        "title": "Positioning Gotchas and Solutions",
        "level": 2,
        "wordCount": 206
      },
      {
        "id": "a-complete-mental-model-of-positioning",
        "title": "A Complete Mental Model of Positioning",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "key-principles-to-remember",
        "title": "Key Principles to Remember",
        "level": 2,
        "wordCount": 187
      }
    ],
    "totalWordCount": 2174,
    "estimatedReadingTime": 540000,
    "title": "positioning_schemes",
    "frontmatter": {}
  },
  "public\\content\\css\\layout\\normal_flow.md": {
    "path": "public\\content\\css\\layout\\normal_flow.md",
    "sections": [
      {
        "id": "normal-flow-and-document-positioning-from-first-principles",
        "title": "Normal Flow and Document Positioning: From First Principles",
        "level": 1,
        "wordCount": 8
      },
      {
        "id": "the-fundamental-challenge-of-web-layout",
        "title": "The Fundamental Challenge of Web Layout",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "what-is-normal-flow",
        "title": "What is Normal Flow?",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "block-and-inline-the-two-fundamental-display-types",
        "title": "Block and Inline: The Two Fundamental Display Types",
        "level": 2,
        "wordCount": 295
      },
      {
        "id": "the-box-model-and-its-impact-on-flow",
        "title": "The Box Model and Its Impact on Flow",
        "level": 2,
        "wordCount": 137
      },
      {
        "id": "inline-block-a-hybrid-format",
        "title": "Inline-Block: A Hybrid Format",
        "level": 2,
        "wordCount": 50
      },
      {
        "id": "breaking-out-of-normal-flow-css-positioning",
        "title": "Breaking Out of Normal Flow: CSS Positioning",
        "level": 2,
        "wordCount": 529
      },
      {
        "id": "managing-depth-with-z-index",
        "title": "Managing Depth with Z-Index",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "practical-examples-common-layout-patterns",
        "title": "Practical Examples: Common Layout Patterns",
        "level": 2,
        "wordCount": 136
      },
      {
        "id": "key-principles-to-remember",
        "title": "Key Principles to Remember",
        "level": 2,
        "wordCount": 139
      },
      {
        "id": "bringing-it-all-together-a-mental-model",
        "title": "Bringing It All Together: A Mental Model",
        "level": 2,
        "wordCount": 145
      }
    ],
    "totalWordCount": 1699,
    "estimatedReadingTime": 420000,
    "title": "normal_flow",
    "frontmatter": {}
  },
  "public\\content\\css\\layout\\multi_column_layout.md": {
    "path": "public\\content\\css\\layout\\multi_column_layout.md",
    "sections": [
      {
        "id": "multi-column-layouts-from-first-principles",
        "title": "Multi-Column Layouts: From First Principles",
        "level": 1,
        "wordCount": 5
      },
      {
        "id": "the-fundamental-problem-text-flow-across-multiple-columns",
        "title": "The Fundamental Problem: Text Flow Across Multiple Columns",
        "level": 2,
        "wordCount": 158
      },
      {
        "id": "the-css-multi-column-model-core-concepts",
        "title": "The CSS Multi-Column Model: Core Concepts",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "creating-columns-the-fundamental-properties",
        "title": "Creating Columns: The Fundamental Properties",
        "level": 2,
        "wordCount": 209
      },
      {
        "id": "column-gaps-controlling-space-between-columns",
        "title": "Column Gaps: Controlling Space Between Columns",
        "level": 2,
        "wordCount": 36
      },
      {
        "id": "column-rules-adding-visual-dividers",
        "title": "Column Rules: Adding Visual Dividers",
        "level": 2,
        "wordCount": 95
      },
      {
        "id": "controlling-content-across-columns",
        "title": "Controlling Content Across Columns",
        "level": 2,
        "wordCount": 183
      },
      {
        "id": "balancing-columns-ensuring-equal-height",
        "title": "Balancing Columns: Ensuring Equal Height",
        "level": 2,
        "wordCount": 89
      },
      {
        "id": "practical-examples-real-world-multi-column-layouts",
        "title": "Practical Examples: Real-World Multi-Column Layouts",
        "level": 2,
        "wordCount": 175
      },
      {
        "id": "complex-layouts-combining-multi-column-with-other-techniques",
        "title": "Complex Layouts: Combining Multi-Column with Other Techniques",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "browser-support-and-fallbacks",
        "title": "Browser Support and Fallbacks",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "common-challenges-and-solutions",
        "title": "Common Challenges and Solutions",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "responsive-multi-column-layouts",
        "title": "Responsive Multi-Column Layouts",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "comparing-multi-column-to-other-layout-approaches",
        "title": "Comparing Multi-Column to Other Layout Approaches",
        "level": 2,
        "wordCount": 254
      },
      {
        "id": "best-practices-for-multi-column-layouts",
        "title": "Best Practices for Multi-Column Layouts",
        "level": 2,
        "wordCount": 153
      },
      {
        "id": "key-principles-to-remember",
        "title": "Key Principles to Remember",
        "level": 2,
        "wordCount": 154
      },
      {
        "id": "a-complete-mental-model-for-multi-column-layout",
        "title": "A Complete Mental Model for Multi-Column Layout",
        "level": 2,
        "wordCount": 196
      }
    ],
    "totalWordCount": 2162,
    "estimatedReadingTime": 540000,
    "title": "multi_column_layout",
    "frontmatter": {}
  },
  "public\\content\\css\\layout\\media_queries_fundamentals.md": {
    "path": "public\\content\\css\\layout\\media_queries_fundamentals.md",
    "sections": [
      {
        "id": "media-queries-fundamentals-from-first-principles",
        "title": "Media Queries Fundamentals: From First Principles",
        "level": 1,
        "wordCount": 6
      },
      {
        "id": "the-fundamental-problem-adapting-to-diverse-viewing-environments",
        "title": "The Fundamental Problem: Adapting to Diverse Viewing Environments",
        "level": 2,
        "wordCount": 155
      },
      {
        "id": "what-are-media-queries-the-basic-concept",
        "title": "What Are Media Queries? The Basic Concept",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "the-syntax-building-media-query-statements",
        "title": "The Syntax: Building Media Query Statements",
        "level": 2,
        "wordCount": 326
      },
      {
        "id": "breakpoints-strategic-points-for-design-changes",
        "title": "Breakpoints: Strategic Points for Design Changes",
        "level": 2,
        "wordCount": 178
      },
      {
        "id": "mobile-first-vs-desktop-first-approaches",
        "title": "Mobile-First vs. Desktop-First Approaches",
        "level": 2,
        "wordCount": 165
      },
      {
        "id": "practical-examples-responsive-patterns",
        "title": "Practical Examples: Responsive Patterns",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "advanced-media-query-techniques",
        "title": "Advanced Media Query Techniques",
        "level": 2,
        "wordCount": 151
      },
      {
        "id": "media-query-best-practices",
        "title": "Media Query Best Practices",
        "level": 2,
        "wordCount": 184
      },
      {
        "id": "testing-and-debugging-media-queries",
        "title": "Testing and Debugging Media Queries",
        "level": 2,
        "wordCount": 169
      },
      {
        "id": "the-evolution-of-responsive-design",
        "title": "The Evolution of Responsive Design",
        "level": 2,
        "wordCount": 211
      },
      {
        "id": "key-principles-to-remember",
        "title": "Key Principles to Remember",
        "level": 2,
        "wordCount": 147
      },
      {
        "id": "a-complete-mental-model-for-media-queries",
        "title": "A Complete Mental Model for Media Queries",
        "level": 2,
        "wordCount": 151
      }
    ],
    "totalWordCount": 2012,
    "estimatedReadingTime": 540000,
    "title": "media_queries_fundamentals",
    "frontmatter": {}
  },
  "public\\content\\css\\layout\\margin_collapsing.md": {
    "path": "public\\content\\css\\layout\\margin_collapsing.md",
    "sections": [
      {
        "id": "margin-collapsing-behavior-from-first-principles",
        "title": "Margin Collapsing Behavior: From First Principles",
        "level": 1,
        "wordCount": 6
      },
      {
        "id": "the-fundamental-problem-spacing-between-elements",
        "title": "The Fundamental Problem: Spacing Between Elements",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "what-is-margin-collapsing",
        "title": "What is Margin Collapsing?",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "the-three-types-of-margin-collapsing",
        "title": "The Three Types of Margin Collapsing",
        "level": 2,
        "wordCount": 240
      },
      {
        "id": "margin-collapsing-with-negative-margins",
        "title": "Margin Collapsing with Negative Margins",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "multiple-margins-collapsing-together",
        "title": "Multiple Margins Collapsing Together",
        "level": 2,
        "wordCount": 103
      },
      {
        "id": "preventing-margin-collapse-the-block-formatting-context",
        "title": "Preventing Margin Collapse: The Block Formatting Context",
        "level": 2,
        "wordCount": 163
      },
      {
        "id": "other-ways-to-prevent-margin-collapsing",
        "title": "Other Ways to Prevent Margin Collapsing",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "practical-examples-margin-collapsing-in-real-layouts",
        "title": "Practical Examples: Margin Collapsing in Real Layouts",
        "level": 2,
        "wordCount": 183
      },
      {
        "id": "common-margin-collapsing-gotchas",
        "title": "Common Margin Collapsing Gotchas",
        "level": 2,
        "wordCount": 191
      },
      {
        "id": "modern-alternatives-to-margin-collapsing",
        "title": "Modern Alternatives to Margin Collapsing",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "a-strategic-approach-to-margins",
        "title": "A Strategic Approach to Margins",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "when-to-use-margin-collapsing",
        "title": "When to Use Margin Collapsing",
        "level": 2,
        "wordCount": 93
      },
      {
        "id": "key-principles-to-remember",
        "title": "Key Principles to Remember",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "a-complete-mental-model",
        "title": "A Complete Mental Model",
        "level": 2,
        "wordCount": 160
      }
    ],
    "totalWordCount": 1876,
    "estimatedReadingTime": 480000,
    "title": "margin_collapsing",
    "frontmatter": {}
  },
  "public\\content\\css\\layout\\floats_and_clearfix.md": {
    "path": "public\\content\\css\\layout\\floats_and_clearfix.md",
    "sections": [
      {
        "id": "floats-and-clearfix-from-first-principles",
        "title": "Floats and Clearfix: From First Principles",
        "level": 1,
        "wordCount": 6
      },
      {
        "id": "the-fundamental-problem-text-wrapping-around-objects",
        "title": "The Fundamental Problem: Text Wrapping Around Objects",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "origins-of-float-the-print-design-connection",
        "title": "Origins of Float: The Print Design Connection",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "how-floats-work-the-core-mechanics",
        "title": "How Floats Work: The Core Mechanics",
        "level": 2,
        "wordCount": 176
      },
      {
        "id": "the-float-behavior-a-deeper-look",
        "title": "The Float Behavior: A Deeper Look",
        "level": 2,
        "wordCount": 169
      },
      {
        "id": "the-float-problem-containing-floats",
        "title": "The Float Problem: Containing Floats",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "understanding-the-clear-property",
        "title": "Understanding the Clear Property",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "the-clearfix-hack-solving-the-container-collapse-problem",
        "title": "The Clearfix Hack: Solving the Container Collapse Problem",
        "level": 2,
        "wordCount": 184
      },
      {
        "id": "block-formatting-context-the-underlying-principle",
        "title": "Block Formatting Context: The Underlying Principle",
        "level": 2,
        "wordCount": 140
      },
      {
        "id": "practical-examples-how-floats-were-used-for-layouts",
        "title": "Practical Examples: How Floats Were Used for Layouts",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "the-evolution-beyond-floats",
        "title": "The Evolution Beyond Floats",
        "level": 2,
        "wordCount": 41
      },
      {
        "id": "when-to-still-use-floats-today",
        "title": "When to Still Use Floats Today",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "key-principles-to-remember",
        "title": "Key Principles to Remember",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "building-a-complete-mental-model",
        "title": "Building a Complete Mental Model",
        "level": 2,
        "wordCount": 177
      }
    ],
    "totalWordCount": 1449,
    "estimatedReadingTime": 360000,
    "title": "floats_and_clearfix",
    "frontmatter": {}
  },
  "public\\content\\css\\layout\\box_sizing_models.md": {
    "path": "public\\content\\css\\layout\\box_sizing_models.md",
    "sections": [
      {
        "id": "box-sizing-models-from-first-principles",
        "title": "Box Sizing Models: From First Principles",
        "level": 1,
        "wordCount": 6
      },
      {
        "id": "the-fundamental-problem-calculating-element-dimensions",
        "title": "The Fundamental Problem: Calculating Element Dimensions",
        "level": 2,
        "wordCount": 123
      },
      {
        "id": "the-css-box-model-the-foundation",
        "title": "The CSS Box Model: The Foundation",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "the-two-box-sizing-models",
        "title": "The Two Box Sizing Models",
        "level": 2,
        "wordCount": 270
      },
      {
        "id": "practical-examples-seeing-the-difference",
        "title": "Practical Examples: Seeing the Difference",
        "level": 2,
        "wordCount": 241
      },
      {
        "id": "the-historical-context-why-two-models",
        "title": "The Historical Context: Why Two Models?",
        "level": 2,
        "wordCount": 166
      },
      {
        "id": "the-universal-border-box-reset",
        "title": "The Universal Border-Box Reset",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "box-sizing-and-modern-layout-techniques",
        "title": "Box Sizing and Modern Layout Techniques",
        "level": 2,
        "wordCount": 120
      },
      {
        "id": "margins-and-the-box-model",
        "title": "Margins and the Box Model",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "mixing-box-sizing-models",
        "title": "Mixing Box Sizing Models",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "box-sizing-and-responsive-design",
        "title": "Box Sizing and Responsive Design",
        "level": 2,
        "wordCount": 64
      },
      {
        "id": "debugging-box-sizing-issues",
        "title": "Debugging Box Sizing Issues",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "practical-strategies-for-working-with-box-sizing",
        "title": "Practical Strategies for Working with Box Sizing",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "key-principles-to-remember",
        "title": "Key Principles to Remember",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "a-complete-mental-model",
        "title": "A Complete Mental Model",
        "level": 2,
        "wordCount": 150
      }
    ],
    "totalWordCount": 1882,
    "estimatedReadingTime": 480000,
    "title": "box_sizing_models",
    "frontmatter": {}
  },
  "public\\content\\css\\fundamental\\typography.md": {
    "path": "public\\content\\css\\fundamental\\typography.md",
    "sections": [
      {
        "id": "typography-and-text-styling-in-css-a-first-principles-guide",
        "title": "Typography and Text Styling in CSS: A First Principles Guide",
        "level": 1,
        "wordCount": 49
      },
      {
        "id": "the-foundations-of-digital-typography",
        "title": "The Foundations of Digital Typography",
        "level": 2,
        "wordCount": 161
      },
      {
        "id": "font-properties-in-css",
        "title": "Font Properties in CSS",
        "level": 2,
        "wordCount": 559
      },
      {
        "id": "text-properties-in-css",
        "title": "Text Properties in CSS",
        "level": 2,
        "wordCount": 403
      },
      {
        "id": "advanced-typography-concepts",
        "title": "Advanced Typography Concepts",
        "level": 2,
        "wordCount": 248
      },
      {
        "id": "typography-systems-and-practical-applications",
        "title": "Typography Systems and Practical Applications",
        "level": 2,
        "wordCount": 163
      },
      {
        "id": "practical-examples-real-world-typography",
        "title": "Practical Examples: Real-World Typography",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "performance-and-accessibility-considerations",
        "title": "Performance and Accessibility Considerations",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "summary-typography-best-practices",
        "title": "Summary: Typography Best Practices",
        "level": 2,
        "wordCount": 159
      },
      {
        "id": "font-implementation-strategies",
        "title": "Font Implementation Strategies",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "handling-multilingual-typography",
        "title": "Handling Multilingual Typography",
        "level": 2,
        "wordCount": 23
      },
      {
        "id": "css-grid-for-typography-layout",
        "title": "CSS Grid for Typography Layout",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "experimental-typography-with-variable-fonts",
        "title": "Experimental Typography with Variable Fonts",
        "level": 2,
        "wordCount": 22
      },
      {
        "id": "fine-tuning-typography-for-different-contexts",
        "title": "Fine-Tuning Typography for Different Contexts",
        "level": 2,
        "wordCount": 20
      },
      {
        "id": "typography-and-css-custom-properties-for-theming",
        "title": "Typography and CSS Custom Properties for Theming",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "progressive-enhancement-approach-to-typography",
        "title": "Progressive Enhancement Approach to Typography",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "typography-and-user-preferences",
        "title": "Typography and User Preferences",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "text-overflow-handling",
        "title": "Text Overflow Handling",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "putting-it-all-together-a-complete-typography-system",
        "title": "Putting It All Together: A Complete Typography System",
        "level": 2,
        "wordCount": 40
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 126
      }
    ],
    "totalWordCount": 2342,
    "estimatedReadingTime": 600000,
    "title": "typography",
    "frontmatter": {}
  },
  "public\\content\\css\\fundamental\\selectors.md": {
    "path": "public\\content\\css\\fundamental\\selectors.md",
    "sections": [
      {
        "id": "css-selectors-and-specificity-from-first-principles",
        "title": "CSS Selectors and Specificity: From First Principles",
        "level": 1,
        "wordCount": 33
      },
      {
        "id": "css-selectors-the-targeting-mechanism",
        "title": "CSS Selectors: The Targeting Mechanism",
        "level": 2,
        "wordCount": 439
      },
      {
        "id": "css-specificity-the-resolution-mechanism",
        "title": "CSS Specificity: The Resolution Mechanism",
        "level": 2,
        "wordCount": 259
      },
      {
        "id": "common-mistakes-and-practical-tips",
        "title": "Common Mistakes and Practical Tips",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "real-world-example-building-a-navigation-menu",
        "title": "Real-World Example: Building a Navigation Menu",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "conclusion-mastering-selectors-and-specificity",
        "title": "Conclusion: Mastering Selectors and Specificity",
        "level": 2,
        "wordCount": 115
      }
    ],
    "totalWordCount": 1049,
    "estimatedReadingTime": 300000,
    "title": "selectors",
    "frontmatter": {}
  },
  "public\\content\\css\\fundamental\\document_flow.md": {
    "path": "public\\content\\css\\fundamental\\document_flow.md",
    "sections": [
      {
        "id": "basic-document-flow-and-positioning-in-css-from-first-principles",
        "title": "Basic Document Flow and Positioning in CSS: From First Principles",
        "level": 1,
        "wordCount": 10
      },
      {
        "id": "the-fundamental-problem-arranging-content-in-two-dimensions",
        "title": "The Fundamental Problem: Arranging Content in Two Dimensions",
        "level": 2,
        "wordCount": 81
      },
      {
        "id": "normal-document-flow-the-browsers-default-arrangement",
        "title": "Normal Document Flow: The Browser's Default Arrangement",
        "level": 2,
        "wordCount": 325
      },
      {
        "id": "breaking-out-of-normal-flow-css-positioning",
        "title": "Breaking Out of Normal Flow: CSS Positioning",
        "level": 2,
        "wordCount": 509
      },
      {
        "id": "understanding-the-z-index-stacking-context",
        "title": "Understanding the Z-Index: Stacking Context",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "combining-positioning-with-other-layout-techniques",
        "title": "Combining Positioning with Other Layout Techniques",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "practical-examples-common-ui-patterns",
        "title": "Practical Examples: Common UI Patterns",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "key-principles-to-remember",
        "title": "Key Principles to Remember",
        "level": 2,
        "wordCount": 132
      }
    ],
    "totalWordCount": 1273,
    "estimatedReadingTime": 360000,
    "title": "document_flow",
    "frontmatter": {}
  },
  "public\\content\\css\\fundamental\\display.md": {
    "path": "public\\content\\css\\fundamental\\display.md",
    "sections": [
      {
        "id": "css-display-properties-block-inline-and-inline-block",
        "title": "CSS Display Properties: Block, Inline, and Inline-Block",
        "level": 1,
        "wordCount": 25
      },
      {
        "id": "the-fundamentals-how-browsers-render-elements",
        "title": "The Fundamentals: How Browsers Render Elements",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "block-elements",
        "title": "Block Elements",
        "level": 2,
        "wordCount": 167
      },
      {
        "id": "inline-elements",
        "title": "Inline Elements",
        "level": 2,
        "wordCount": 169
      },
      {
        "id": "the-hybrid-inline-block",
        "title": "The Hybrid: Inline-Block",
        "level": 2,
        "wordCount": 138
      },
      {
        "id": "practical-use-cases-and-examples",
        "title": "Practical Use Cases and Examples",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "understanding-the-whitespace-issue-with-inline-block",
        "title": "Understanding the Whitespace Issue with Inline-Block",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "deep-dive-box-model-interactions-with-display-properties",
        "title": "Deep Dive: Box Model Interactions with Display Properties",
        "level": 2,
        "wordCount": 148
      },
      {
        "id": "changing-display-types-a-transformative-tool",
        "title": "Changing Display Types: A Transformative Tool",
        "level": 2,
        "wordCount": 21
      },
      {
        "id": "summary-choosing-the-right-display-property",
        "title": "Summary: Choosing the Right Display Property",
        "level": 2,
        "wordCount": 161
      }
    ],
    "totalWordCount": 1103,
    "estimatedReadingTime": 300000,
    "title": "display",
    "frontmatter": {}
  },
  "public\\content\\css\\fundamental\\css_units.md": {
    "path": "public\\content\\css\\fundamental\\css_units.md",
    "sections": [
      {
        "id": "css-units-of-measurement-a-first-principles-approach",
        "title": "CSS Units of Measurement: A First Principles Approach",
        "level": 1,
        "wordCount": 45
      },
      {
        "id": "the-fundamental-problem-sizing-in-a-dynamic-environment",
        "title": "The Fundamental Problem: Sizing in a Dynamic Environment",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "absolute-units",
        "title": "Absolute Units",
        "level": 2,
        "wordCount": 142
      },
      {
        "id": "relative-units",
        "title": "Relative Units",
        "level": 2,
        "wordCount": 209
      },
      {
        "id": "comparing-units-with-a-practical-example",
        "title": "Comparing Units with a Practical Example",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "viewport-units",
        "title": "Viewport Units",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "choosing-the-right-unit",
        "title": "Choosing the Right Unit",
        "level": 2,
        "wordCount": 98
      },
      {
        "id": "combining-units-for-responsive-design",
        "title": "Combining Units for Responsive Design",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "key-principles-to-remember",
        "title": "Key Principles to Remember",
        "level": 2,
        "wordCount": 89
      }
    ],
    "totalWordCount": 858,
    "estimatedReadingTime": 240000,
    "title": "css_units",
    "frontmatter": {}
  },
  "public\\content\\css\\fundamental\\css_syntax.md": {
    "path": "public\\content\\css\\fundamental\\css_syntax.md",
    "sections": [
      {
        "id": "understanding-css-syntax-and-basic-structure-from-first-principles",
        "title": "Understanding CSS Syntax and Basic Structure from First Principles",
        "level": 1,
        "wordCount": 40
      },
      {
        "id": "what-is-css-at-its-core",
        "title": "What is CSS at its Core?",
        "level": 2,
        "wordCount": 48
      },
      {
        "id": "the-basic-structure-of-css",
        "title": "The Basic Structure of CSS",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "detailed-breakdown-with-examples",
        "title": "Detailed Breakdown with Examples",
        "level": 2,
        "wordCount": 249
      },
      {
        "id": "understanding-the-cascade",
        "title": "Understanding the Cascade",
        "level": 2,
        "wordCount": 77
      },
      {
        "id": "comments-in-css",
        "title": "Comments in CSS",
        "level": 2,
        "wordCount": 24
      },
      {
        "id": "units-in-css",
        "title": "Units in CSS",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "shorthand-properties",
        "title": "Shorthand Properties",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "a-complete-example",
        "title": "A Complete Example",
        "level": 2,
        "wordCount": 82
      },
      {
        "id": "linking-css-to-html",
        "title": "Linking CSS to HTML",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "css-inheritance",
        "title": "CSS Inheritance",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "why-css-matters",
        "title": "Why CSS Matters",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "practical-application",
        "title": "Practical Application",
        "level": 2,
        "wordCount": 31
      },
      {
        "id": "common-beginner-mistakes",
        "title": "Common Beginner Mistakes",
        "level": 2,
        "wordCount": 18
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 101
      }
    ],
    "totalWordCount": 1020,
    "estimatedReadingTime": 300000,
    "title": "css_syntax",
    "frontmatter": {}
  },
  "public\\content\\css\\fundamental\\color_systems.md": {
    "path": "public\\content\\css\\fundamental\\color_systems.md",
    "sections": [
      {
        "id": "color-systems-in-css-hex-rgb-and-hsl",
        "title": "Color Systems in CSS: Hex, RGB, and HSL",
        "level": 1,
        "wordCount": 46
      },
      {
        "id": "the-foundation-how-digital-color-works",
        "title": "The Foundation: How Digital Color Works",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "the-hex-color-system",
        "title": "The Hex Color System",
        "level": 2,
        "wordCount": 317
      },
      {
        "id": "the-rgb-color-system",
        "title": "The RGB Color System",
        "level": 2,
        "wordCount": 144
      },
      {
        "id": "the-hsl-color-system",
        "title": "The HSL Color System",
        "level": 2,
        "wordCount": 175
      },
      {
        "id": "comparing-color-systems-strengths-and-use-cases",
        "title": "Comparing Color Systems: Strengths and Use Cases",
        "level": 2,
        "wordCount": 181
      },
      {
        "id": "converting-between-color-systems",
        "title": "Converting Between Color Systems",
        "level": 2,
        "wordCount": 263
      },
      {
        "id": "practical-applications-and-examples",
        "title": "Practical Applications and Examples",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "advanced-color-concepts",
        "title": "Advanced Color Concepts",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "summary-choosing-the-right-color-system",
        "title": "Summary: Choosing the Right Color System",
        "level": 2,
        "wordCount": 153
      }
    ],
    "totalWordCount": 1520,
    "estimatedReadingTime": 420000,
    "title": "color_systems",
    "frontmatter": {}
  },
  "public\\content\\css\\fundamental\\cascade.md": {
    "path": "public\\content\\css\\fundamental\\cascade.md",
    "sections": [
      {
        "id": "introduction-to-the-css-cascade-from-first-principles",
        "title": "Introduction to the CSS Cascade: From First Principles",
        "level": 1,
        "wordCount": 8
      },
      {
        "id": "the-fundamental-problem-resolving-style-conflicts",
        "title": "The Fundamental Problem: Resolving Style Conflicts",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "the-origin-of-cascading-in-css",
        "title": "The Origin of \"Cascading\" in CSS",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "style-sources-where-css-rules-come-from",
        "title": "Style Sources: Where CSS Rules Come From",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "the-four-step-cascade-algorithm",
        "title": "The Four-Step Cascade Algorithm",
        "level": 2,
        "wordCount": 543
      },
      {
        "id": "understanding-the-cascade-through-examples",
        "title": "Understanding the Cascade Through Examples",
        "level": 2,
        "wordCount": 174
      },
      {
        "id": "the-modern-cascade-custom-properties-and-calculated-values",
        "title": "The Modern Cascade: Custom Properties and Calculated Values",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "real-world-cascade-management",
        "title": "Real-World Cascade Management",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "debugging-the-cascade",
        "title": "Debugging the Cascade",
        "level": 2,
        "wordCount": 115
      },
      {
        "id": "building-a-mental-model-for-the-cascade",
        "title": "Building a Mental Model for the Cascade",
        "level": 2,
        "wordCount": 106
      },
      {
        "id": "key-principles-to-remember",
        "title": "Key Principles to Remember",
        "level": 2,
        "wordCount": 192
      }
    ],
    "totalWordCount": 1500,
    "estimatedReadingTime": 360000,
    "title": "cascade",
    "frontmatter": {}
  },
  "public\\content\\css\\fundamental\\box_model.md": {
    "path": "public\\content\\css\\fundamental\\box_model.md",
    "sections": [
      {
        "id": "the-css-box-model-understanding-the-foundation-of-web-layout",
        "title": "The CSS Box Model: Understanding the Foundation of Web Layout",
        "level": 1,
        "wordCount": 43
      },
      {
        "id": "what-is-the-css-box-model",
        "title": "What Is the CSS Box Model?",
        "level": 2,
        "wordCount": 155
      },
      {
        "id": "the-four-components-in-detail",
        "title": "The Four Components in Detail",
        "level": 2,
        "wordCount": 194
      },
      {
        "id": "how-the-box-model-affects-element-size",
        "title": "How the Box Model Affects Element Size",
        "level": 2,
        "wordCount": 162
      },
      {
        "id": "the-box-sizing-property-a-game-changer",
        "title": "The Box-Sizing Property: A Game-Changer",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "a-visual-example-of-the-box-model",
        "title": "A Visual Example of the Box Model",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "browser-developer-tools-visualizing-the-box-model",
        "title": "Browser Developer Tools: Visualizing the Box Model",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "box-model-behavior-for-different-elements",
        "title": "Box Model Behavior for Different Elements",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "special-box-model-behaviors",
        "title": "Special Box Model Behaviors",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "practical-examples-and-common-patterns",
        "title": "Practical Examples and Common Patterns",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "advanced-box-model-considerations",
        "title": "Advanced Box Model Considerations",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "the-box-model-in-modern-css-layout-systems",
        "title": "The Box Model in Modern CSS Layout Systems",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "conclusion-the-box-model-as-the-foundation-of-css-layout",
        "title": "Conclusion: The Box Model as the Foundation of CSS Layout",
        "level": 2,
        "wordCount": 139
      }
    ],
    "totalWordCount": 1402,
    "estimatedReadingTime": 360000,
    "title": "box_model",
    "frontmatter": {}
  },
  "public\\content\\css\\css_architecture\\utility_first_css.md": {
    "path": "public\\content\\css\\css_architecture\\utility_first_css.md",
    "sections": [
      {
        "id": "utility-first-css-the-tailwind-approach",
        "title": "Utility-First CSS: The Tailwind Approach",
        "level": 1,
        "wordCount": 54
      },
      {
        "id": "the-evolution-of-css-approaches",
        "title": "The Evolution of CSS Approaches",
        "level": 2,
        "wordCount": 85
      },
      {
        "id": "the-core-philosophy-of-utility-first-css",
        "title": "The Core Philosophy of Utility-First CSS",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "why-tailwind-css",
        "title": "Why Tailwind CSS?",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "the-basic-structure-of-tailwind-classes",
        "title": "The Basic Structure of Tailwind Classes",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "the-benefits-of-utility-first-css",
        "title": "The Benefits of Utility-First CSS",
        "level": 2,
        "wordCount": 225
      },
      {
        "id": "working-with-tailwind-in-practice",
        "title": "Working with Tailwind in Practice",
        "level": 2,
        "wordCount": 96
      },
      {
        "id": "addressing-common-concerns",
        "title": "Addressing Common Concerns",
        "level": 2,
        "wordCount": 222
      },
      {
        "id": "building-complex-ui-with-tailwind",
        "title": "Building Complex UI with Tailwind",
        "level": 2,
        "wordCount": 57
      },
      {
        "id": "customizing-tailwind",
        "title": "Customizing Tailwind",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "optimizing-for-production",
        "title": "Optimizing for Production",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "practical-strategies-for-tailwind-projects",
        "title": "Practical Strategies for Tailwind Projects",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "comparing-utility-first-to-other-approaches",
        "title": "Comparing Utility-First to Other Approaches",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "when-to-use-utility-first-css",
        "title": "When to Use Utility-First CSS",
        "level": 2,
        "wordCount": 122
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 201
      }
    ],
    "totalWordCount": 1520,
    "estimatedReadingTime": 420000,
    "title": "utility_first_css",
    "frontmatter": {}
  },
  "public\\content\\css\\css_architecture\\specificity_management.md": {
    "path": "public\\content\\css\\css_architecture\\specificity_management.md",
    "sections": [
      {
        "id": "css-specificity-management-a-first-principles-exploration",
        "title": "CSS Specificity Management: A First Principles Exploration",
        "level": 1,
        "wordCount": 52
      },
      {
        "id": "what-is-specificity-and-why-does-it-matter",
        "title": "What Is Specificity and Why Does It Matter?",
        "level": 2,
        "wordCount": 114
      },
      {
        "id": "the-specificity-hierarchy-understanding-the-scoring-system",
        "title": "The Specificity Hierarchy: Understanding the Scoring System",
        "level": 2,
        "wordCount": 136
      },
      {
        "id": "calculating-specificity-in-practice",
        "title": "Calculating Specificity in Practice",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "common-specificity-pitfalls-and-challenges",
        "title": "Common Specificity Pitfalls and Challenges",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "the-important-declaration-a-double-edged-sword",
        "title": "The !important Declaration: A Double-Edged Sword",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "strategies-for-managing-specificity",
        "title": "Strategies for Managing Specificity",
        "level": 2,
        "wordCount": 175
      },
      {
        "id": "dealing-with-legacy-code-and-specificity-issues",
        "title": "Dealing with Legacy Code and Specificity Issues",
        "level": 2,
        "wordCount": 107
      },
      {
        "id": "practical-examples-of-specificity-management",
        "title": "Practical Examples of Specificity Management",
        "level": 2,
        "wordCount": 151
      },
      {
        "id": "tools-and-techniques-for-specificity-debugging",
        "title": "Tools and Techniques for Specificity Debugging",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "modern-css-features-that-help-with-specificity-management",
        "title": "Modern CSS Features That Help with Specificity Management",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "specificity-management-for-different-css-methodologies",
        "title": "Specificity Management for Different CSS Methodologies",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "case-study-refactoring-for-better-specificity-management",
        "title": "Case Study: Refactoring for Better Specificity Management",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "best-practices-for-specificity-management",
        "title": "Best Practices for Specificity Management",
        "level": 2,
        "wordCount": 137
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 177
      }
    ],
    "totalWordCount": 1687,
    "estimatedReadingTime": 420000,
    "title": "specificity_management",
    "frontmatter": {}
  },
  "public\\content\\css\\css_architecture\\naming_conventions.md": {
    "path": "public\\content\\css\\css_architecture\\naming_conventions.md",
    "sections": [
      {
        "id": "css-naming-conventions-and-methodologies-first-principles-approach",
        "title": "CSS Naming Conventions and Methodologies: First Principles Approach",
        "level": 1,
        "wordCount": 51
      },
      {
        "id": "the-fundamental-problem-css-specificity-and-global-scope",
        "title": "The Fundamental Problem: CSS Specificity and Global Scope",
        "level": 2,
        "wordCount": 117
      },
      {
        "id": "first-principles-of-css-organization",
        "title": "First Principles of CSS Organization",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "bem-block-element-modifier",
        "title": "BEM: Block, Element, Modifier",
        "level": 2,
        "wordCount": 229
      },
      {
        "id": "smacss-scalable-and-modular-architecture-for-css",
        "title": "SMACSS: Scalable and Modular Architecture for CSS",
        "level": 2,
        "wordCount": 185
      },
      {
        "id": "comparing-bem-and-smacss",
        "title": "Comparing BEM and SMACSS",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "practical-implementation-considerations",
        "title": "Practical Implementation Considerations",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "choosing-between-bem-and-smacss",
        "title": "Choosing Between BEM and SMACSS",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "hybrid-approaches",
        "title": "Hybrid Approaches",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "beyond-bem-and-smacss-modern-alternatives",
        "title": "Beyond BEM and SMACSS: Modern Alternatives",
        "level": 2,
        "wordCount": 58
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 108
      }
    ],
    "totalWordCount": 1164,
    "estimatedReadingTime": 300000,
    "title": "naming_conventions",
    "frontmatter": {}
  },
  "public\\content\\css\\css_architecture\\global_vs_component.md": {
    "path": "public\\content\\css\\css_architecture\\global_vs_component.md",
    "sections": [
      {
        "id": "global-vs-component-scoped-styles-a-first-principles-approach",
        "title": "Global vs Component-Scoped Styles: A First Principles Approach",
        "level": 1,
        "wordCount": 52
      },
      {
        "id": "understanding-css-fundamentals",
        "title": "Understanding CSS Fundamentals",
        "level": 2,
        "wordCount": 134
      },
      {
        "id": "the-problem-with-global-styles",
        "title": "The Problem with Global Styles",
        "level": 2,
        "wordCount": 173
      },
      {
        "id": "the-rise-of-component-scoped-styles",
        "title": "The Rise of Component-Scoped Styles",
        "level": 2,
        "wordCount": 135
      },
      {
        "id": "how-component-scoped-styles-work-behind-the-scenes",
        "title": "How Component-Scoped Styles Work Behind the Scenes",
        "level": 2,
        "wordCount": 154
      },
      {
        "id": "comparing-global-and-component-scoped-styles",
        "title": "Comparing Global and Component-Scoped Styles",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "the-benefits-of-component-scoped-styles",
        "title": "The Benefits of Component-Scoped Styles",
        "level": 2,
        "wordCount": 217
      },
      {
        "id": "the-benefits-of-global-styles",
        "title": "The Benefits of Global Styles",
        "level": 2,
        "wordCount": 129
      },
      {
        "id": "combining-global-and-component-scoped-styles",
        "title": "Combining Global and Component-Scoped Styles",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "real-world-implementations",
        "title": "Real-World Implementations",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "common-challenges-and-solutions",
        "title": "Common Challenges and Solutions",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "making-informed-decisions",
        "title": "Making Informed Decisions",
        "level": 2,
        "wordCount": 130
      },
      {
        "id": "example-building-a-design-system-with-both-approaches",
        "title": "Example: Building a Design System with Both Approaches",
        "level": 2,
        "wordCount": 21
      },
      {
        "id": "conclusion-finding-the-right-balance",
        "title": "Conclusion: Finding the Right Balance",
        "level": 2,
        "wordCount": 173
      }
    ],
    "totalWordCount": 1623,
    "estimatedReadingTime": 420000,
    "title": "global_vs_component",
    "frontmatter": {}
  },
  "public\\content\\css\\css_architecture\\css_preprocessors.md": {
    "path": "public\\content\\css\\css_architecture\\css_preprocessors.md",
    "sections": [
      {
        "id": "css-preprocessors-sass-and-less-a-first-principles-approach",
        "title": "CSS Preprocessors: Sass and Less - A First Principles Approach",
        "level": 1,
        "wordCount": 64
      },
      {
        "id": "the-fundamental-problem-limitations-of-native-css",
        "title": "The Fundamental Problem: Limitations of Native CSS",
        "level": 2,
        "wordCount": 139
      },
      {
        "id": "what-are-css-preprocessors",
        "title": "What Are CSS Preprocessors?",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "the-core-features-of-css-preprocessors",
        "title": "The Core Features of CSS Preprocessors",
        "level": 2,
        "wordCount": 418
      },
      {
        "id": "a-deeper-look-at-sass-vs-less",
        "title": "A Deeper Look at Sass vs Less",
        "level": 2,
        "wordCount": 188
      },
      {
        "id": "practical-implementation-building-a-design-system",
        "title": "Practical Implementation: Building a Design System",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "benefits-and-considerations",
        "title": "Benefits and Considerations",
        "level": 2,
        "wordCount": 139
      },
      {
        "id": "best-practices",
        "title": "Best Practices",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "real-world-implementation",
        "title": "Real-World Implementation",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "the-future-of-preprocessors",
        "title": "The Future of Preprocessors",
        "level": 2,
        "wordCount": 160
      },
      {
        "id": "advanced-techniques-and-examples",
        "title": "Advanced Techniques and Examples",
        "level": 2,
        "wordCount": 86
      },
      {
        "id": "case-studies-preprocessors-in-the-wild",
        "title": "Case Studies: Preprocessors in the Wild",
        "level": 2,
        "wordCount": 83
      },
      {
        "id": "conclusion-the-continued-value-of-preprocessors",
        "title": "Conclusion: The Continued Value of Preprocessors",
        "level": 2,
        "wordCount": 191
      }
    ],
    "totalWordCount": 1763,
    "estimatedReadingTime": 480000,
    "title": "css_preprocessors",
    "frontmatter": {}
  },
  "public\\content\\css\\css_architecture\\css_modules.md": {
    "path": "public\\content\\css\\css_architecture\\css_modules.md",
    "sections": [
      {
        "id": "css-modules-a-first-principles-approach",
        "title": "CSS Modules: A First Principles Approach",
        "level": 1,
        "wordCount": 42
      },
      {
        "id": "the-problem-with-traditional-css",
        "title": "The Problem with Traditional CSS",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "the-core-principle-of-css-modules",
        "title": "The Core Principle of CSS Modules",
        "level": 2,
        "wordCount": 142
      },
      {
        "id": "a-basic-css-modules-example",
        "title": "A Basic CSS Modules Example",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "composition-building-complex-styles",
        "title": "Composition: Building Complex Styles",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "global-styles-in-css-modules",
        "title": "Global Styles in CSS Modules",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "css-modules-in-different-frameworks",
        "title": "CSS Modules in Different Frameworks",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "practical-example-building-a-card-component",
        "title": "Practical Example: Building a Card Component",
        "level": 2,
        "wordCount": 70
      },
      {
        "id": "handling-dynamic-styles",
        "title": "Handling Dynamic Styles",
        "level": 2,
        "wordCount": 45
      },
      {
        "id": "using-with-javascript-libraries",
        "title": "Using with JavaScript Libraries",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "benefits-of-css-modules",
        "title": "Benefits of CSS Modules",
        "level": 2,
        "wordCount": 66
      },
      {
        "id": "comparing-to-other-styling-solutions",
        "title": "Comparing to Other Styling Solutions",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "limitations-and-considerations",
        "title": "Limitations and Considerations",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "best-practices-for-css-modules",
        "title": "Best Practices for CSS Modules",
        "level": 2,
        "wordCount": 54
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 104
      }
    ],
    "totalWordCount": 1080,
    "estimatedReadingTime": 300000,
    "title": "css_modules",
    "frontmatter": {}
  },
  "public\\content\\css\\css_architecture\\cascade_and_inheritance.md": {
    "path": "public\\content\\css\\css_architecture\\cascade_and_inheritance.md",
    "sections": [
      {
        "id": "the-cascade-and-inheritance-in-css-a-first-principles-exploration",
        "title": "The Cascade and Inheritance in CSS: A First Principles Exploration",
        "level": 1,
        "wordCount": 56
      },
      {
        "id": "understanding-the-cascade-from-first-principles",
        "title": "Understanding the Cascade from First Principles",
        "level": 2,
        "wordCount": 421
      },
      {
        "id": "understanding-inheritance-from-first-principles",
        "title": "Understanding Inheritance from First Principles",
        "level": 2,
        "wordCount": 322
      },
      {
        "id": "the-relationship-between-cascade-and-inheritance",
        "title": "The Relationship Between Cascade and Inheritance",
        "level": 2,
        "wordCount": 178
      },
      {
        "id": "practical-applications-and-strategies",
        "title": "Practical Applications and Strategies",
        "level": 2,
        "wordCount": 213
      },
      {
        "id": "common-challenges-and-solutions",
        "title": "Common Challenges and Solutions",
        "level": 2,
        "wordCount": 157
      },
      {
        "id": "modern-features-that-enhance-the-cascade-and-inheritance",
        "title": "Modern Features That Enhance the Cascade and Inheritance",
        "level": 2,
        "wordCount": 141
      },
      {
        "id": "a-comprehensive-example",
        "title": "A Comprehensive Example",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 209
      }
    ],
    "totalWordCount": 1777,
    "estimatedReadingTime": 480000,
    "title": "cascade_and_inheritance",
    "frontmatter": {}
  },
  "public\\content\\css\\css_architecture\\architecture_principles.md": {
    "path": "public\\content\\css\\css_architecture\\architecture_principles.md",
    "sections": [
      {
        "id": "css-architecture-principles-a-first-principles-approach",
        "title": "CSS Architecture Principles: A First Principles Approach",
        "level": 1,
        "wordCount": 7
      },
      {
        "id": "understanding-css-architecture-from-first-principles",
        "title": "Understanding CSS Architecture from First Principles",
        "level": 2,
        "wordCount": 46
      },
      {
        "id": "the-foundational-challenges-of-css",
        "title": "The Foundational Challenges of CSS",
        "level": 2,
        "wordCount": 196
      },
      {
        "id": "core-principles-of-css-architecture",
        "title": "Core Principles of CSS Architecture",
        "level": 2,
        "wordCount": 124
      },
      {
        "id": "key-elements-of-css-architecture",
        "title": "Key Elements of CSS Architecture",
        "level": 2,
        "wordCount": 238
      },
      {
        "id": "common-architectural-methodologies",
        "title": "Common Architectural Methodologies",
        "level": 2,
        "wordCount": 142
      },
      {
        "id": "practical-implementation-example",
        "title": "Practical Implementation Example",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "advanced-css-architecture-considerations",
        "title": "Advanced CSS Architecture Considerations",
        "level": 2,
        "wordCount": 155
      },
      {
        "id": "the-evolution-of-css-architecture",
        "title": "The Evolution of CSS Architecture",
        "level": 2,
        "wordCount": 118
      },
      {
        "id": "practical-guidelines-for-implementing-css-architecture",
        "title": "Practical Guidelines for Implementing CSS Architecture",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "a-complete-example-building-a-dashboard-ui",
        "title": "A Complete Example: Building a Dashboard UI",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "measuring-success-principles-for-evaluating-css-architecture",
        "title": "Measuring Success: Principles for Evaluating CSS Architecture",
        "level": 2,
        "wordCount": 183
      },
      {
        "id": "common-css-architecture-mistakes-and-how-to-avoid-them",
        "title": "Common CSS Architecture Mistakes and How to Avoid Them",
        "level": 2,
        "wordCount": 119
      },
      {
        "id": "future-trends-in-css-architecture",
        "title": "Future Trends in CSS Architecture",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "conclusion-building-your-css-architecture",
        "title": "Conclusion: Building Your CSS Architecture",
        "level": 2,
        "wordCount": 242
      }
    ],
    "totalWordCount": 1953,
    "estimatedReadingTime": 480000,
    "title": "architecture_principles",
    "frontmatter": {}
  },
  "public\\content\\css\\advanced_styling\\scroll_based_animations.md": {
    "path": "public\\content\\css\\advanced_styling\\scroll_based_animations.md",
    "sections": [
      {
        "id": "scroll-based-animations-in-css-a-first-principles-explanation",
        "title": "Scroll-Based Animations in CSS: A First Principles Explanation",
        "level": 1,
        "wordCount": 56
      },
      {
        "id": "what-are-scroll-based-animations",
        "title": "What Are Scroll-Based Animations?",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "the-physics-of-scrolling-understanding-the-foundation",
        "title": "The Physics of Scrolling: Understanding the Foundation",
        "level": 2,
        "wordCount": 108
      },
      {
        "id": "historical-approaches-the-jquery-era",
        "title": "Historical Approaches: The jQuery Era",
        "level": 2,
        "wordCount": 84
      },
      {
        "id": "modern-approach-1-intersection-observer-api",
        "title": "Modern Approach 1: Intersection Observer API",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "modern-approach-2-css-scroll-triggered-animations",
        "title": "Modern Approach 2: CSS Scroll-Triggered Animations",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "modern-approach-3-scrolltrigger-gsap-library",
        "title": "Modern Approach 3: ScrollTrigger (GSAP Library)",
        "level": 2,
        "wordCount": 56
      },
      {
        "id": "scroll-based-parallax-effect-a-common-implementation",
        "title": "Scroll-Based Parallax Effect: A Common Implementation",
        "level": 2,
        "wordCount": 80
      },
      {
        "id": "javascript-based-parallax-with-calculations",
        "title": "JavaScript-Based Parallax with Calculations",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "scroll-driven-animations-with-css-properties",
        "title": "Scroll-Driven Animations With CSS Properties",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "creating-a-scroll-based-progress-indicator",
        "title": "Creating a Scroll-Based Progress Indicator",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "scroll-triggered-element-reveals-with-intersectionobserver",
        "title": "Scroll-Triggered Element Reveals with IntersectionObserver",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "advanced-technique-scroll-linked-element-transformations",
        "title": "Advanced Technique: Scroll-Linked Element Transformations",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "horizontal-scroll-animations",
        "title": "Horizontal Scroll Animations",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "scroll-triggered-video-playback",
        "title": "Scroll-Triggered Video Playback",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "performance-considerations-for-scroll-animations",
        "title": "Performance Considerations for Scroll Animations",
        "level": 2,
        "wordCount": 88
      },
      {
        "id": "integrating-scroll-animations-with-ui-framework-react-example",
        "title": "Integrating Scroll Animations with UI Framework (React Example)",
        "level": 2,
        "wordCount": 49
      },
      {
        "id": "accessibility-considerations",
        "title": "Accessibility Considerations",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "troubleshooting-common-issues",
        "title": "Troubleshooting Common Issues",
        "level": 2,
        "wordCount": 105
      },
      {
        "id": "cross-browser-support-and-fallbacks",
        "title": "Cross-Browser Support and Fallbacks",
        "level": 2,
        "wordCount": 15
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 177
      }
    ],
    "totalWordCount": 1581,
    "estimatedReadingTime": 420000,
    "title": "scroll_based_animations",
    "frontmatter": {}
  },
  "public\\content\\css\\advanced_styling\\pseudo_classes.md": {
    "path": "public\\content\\css\\advanced_styling\\pseudo_classes.md",
    "sections": [
      {
        "id": "css-pseudo-classes-and-pseudo-elements-from-first-principles",
        "title": "CSS Pseudo-Classes and Pseudo-Elements: From First Principles",
        "level": 1,
        "wordCount": 61
      },
      {
        "id": "understanding-the-fundamental-concept",
        "title": "Understanding the Fundamental Concept",
        "level": 2,
        "wordCount": 237
      },
      {
        "id": "pseudo-classes-selecting-elements-based-on-state-or-position",
        "title": "Pseudo-Classes: Selecting Elements Based on State or Position",
        "level": 2,
        "wordCount": 612
      },
      {
        "id": "pseudo-elements-creating-virtual-elements",
        "title": "Pseudo-Elements: Creating Virtual Elements",
        "level": 2,
        "wordCount": 195
      },
      {
        "id": "practical-applications-of-pseudo-classes-and-pseudo-elements",
        "title": "Practical Applications of Pseudo-Classes and Pseudo-Elements",
        "level": 2,
        "wordCount": 317
      },
      {
        "id": "understanding-the-cascade-specificity-with-pseudo-classes-and-pseudo-elements",
        "title": "Understanding the Cascade: Specificity with Pseudo-Classes and Pseudo-Elements",
        "level": 2,
        "wordCount": 166
      },
      {
        "id": "browser-compatibility-considerations",
        "title": "Browser Compatibility Considerations",
        "level": 2,
        "wordCount": 127
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 68
      },
      {
        "id": "advanced-techniques-and-combinations",
        "title": "Advanced Techniques and Combinations",
        "level": 2,
        "wordCount": 134
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 368
      }
    ],
    "totalWordCount": 2285,
    "estimatedReadingTime": 600000,
    "title": "pseudo_classes",
    "frontmatter": {}
  },
  "public\\content\\css\\advanced_styling\\object_fit_and_position.md": {
    "path": "public\\content\\css\\advanced_styling\\object_fit_and_position.md",
    "sections": [
      {
        "id": "css-object-fit-and-object-position-a-first-principles-exploration",
        "title": "CSS Object-fit and Object-position: A First Principles Exploration",
        "level": 1,
        "wordCount": 57
      },
      {
        "id": "the-fundamental-problem-content-vs-container",
        "title": "The Fundamental Problem: Content vs. Container",
        "level": 2,
        "wordCount": 132
      },
      {
        "id": "understanding-object-fit",
        "title": "Understanding object-fit",
        "level": 2,
        "wordCount": 471
      },
      {
        "id": "understanding-object-position",
        "title": "Understanding object-position",
        "level": 2,
        "wordCount": 298
      },
      {
        "id": "the-relationship-between-object-fit-and-object-position",
        "title": "The Relationship Between object-fit and object-position",
        "level": 2,
        "wordCount": 153
      },
      {
        "id": "combining-object-fit-and-object-position-for-advanced-control",
        "title": "Combining object-fit and object-position for Advanced Control",
        "level": 2,
        "wordCount": 91
      },
      {
        "id": "browser-support-and-fallbacks",
        "title": "Browser Support and Fallbacks",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "advanced-techniques-and-use-cases",
        "title": "Advanced Techniques and Use Cases",
        "level": 2,
        "wordCount": 175
      },
      {
        "id": "practical-real-world-examples",
        "title": "Practical Real-World Examples",
        "level": 2,
        "wordCount": 158
      },
      {
        "id": "animation-and-transition-effects",
        "title": "Animation and Transition Effects",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 161
      }
    ],
    "totalWordCount": 1795,
    "estimatedReadingTime": 480000,
    "title": "object_fit_and_position",
    "frontmatter": {}
  },
  "public\\content\\css\\advanced_styling\\keyframe_animations.md": {
    "path": "public\\content\\css\\advanced_styling\\keyframe_animations.md",
    "sections": [
      {
        "id": "css-animation-with-keyframes-a-first-principles-explanation",
        "title": "CSS Animation with @keyframes: A First Principles Explanation",
        "level": 1,
        "wordCount": 50
      },
      {
        "id": "the-fundamental-concept-what-is-animation",
        "title": "The Fundamental Concept: What is Animation?",
        "level": 2,
        "wordCount": 94
      },
      {
        "id": "the-building-blocks-of-css-animation",
        "title": "The Building Blocks of CSS Animation",
        "level": 2,
        "wordCount": 101
      },
      {
        "id": "introducing-keyframes-animation-with-complete-control",
        "title": "Introducing @keyframes: Animation with Complete Control",
        "level": 2,
        "wordCount": 131
      },
      {
        "id": "a-simple-example-pulsing-button",
        "title": "A Simple Example: Pulsing Button",
        "level": 2,
        "wordCount": 153
      },
      {
        "id": "beyond-basics-advanced-keyframes-concepts",
        "title": "Beyond Basics: Advanced @keyframes Concepts",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "practical-example-loading-spinner",
        "title": "Practical Example: Loading Spinner",
        "level": 2,
        "wordCount": 60
      },
      {
        "id": "understanding-animation-timing-function-in-depth",
        "title": "Understanding animation-timing-function in Depth",
        "level": 2,
        "wordCount": 92
      },
      {
        "id": "animation-fill-mode-what-happens-before-and-after",
        "title": "Animation-fill-mode: What Happens Before and After",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "complex-example-multi-step-card-flip",
        "title": "Complex Example: Multi-Step Card Flip",
        "level": 2,
        "wordCount": 53
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 73
      },
      {
        "id": "debugging-animations",
        "title": "Debugging Animations",
        "level": 2,
        "wordCount": 74
      },
      {
        "id": "browser-compatibility-and-vendor-prefixes",
        "title": "Browser Compatibility and Vendor Prefixes",
        "level": 2,
        "wordCount": 28
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 105
      }
    ],
    "totalWordCount": 1187,
    "estimatedReadingTime": 300000,
    "title": "keyframe_animations",
    "frontmatter": {}
  },
  "public\\content\\css\\advanced_styling\\css_shapes_and_exclusions.md": {
    "path": "public\\content\\css\\advanced_styling\\css_shapes_and_exclusions.md",
    "sections": [
      {
        "id": "css-shapes-and-exclusions-a-first-principles-exploration",
        "title": "CSS Shapes and Exclusions: A First Principles Exploration",
        "level": 1,
        "wordCount": 49
      },
      {
        "id": "understanding-the-rectangular-box-model-the-default",
        "title": "Understanding the Rectangular Box Model (The Default)",
        "level": 2,
        "wordCount": 126
      },
      {
        "id": "css-shapes-breaking-free-from-rectangles",
        "title": "CSS Shapes: Breaking Free from Rectangles",
        "level": 2,
        "wordCount": 547
      },
      {
        "id": "css-exclusions-controlling-flow-around-non-floated-elements",
        "title": "CSS Exclusions: Controlling Flow Around Non-Floated Elements",
        "level": 2,
        "wordCount": 220
      },
      {
        "id": "browser-support-and-implementation-challenges",
        "title": "Browser Support and Implementation Challenges",
        "level": 2,
        "wordCount": 71
      },
      {
        "id": "practical-examples-and-use-cases",
        "title": "Practical Examples and Use Cases",
        "level": 2,
        "wordCount": 111
      },
      {
        "id": "combining-css-shapes-with-other-layout-techniques",
        "title": "Combining CSS Shapes with Other Layout Techniques",
        "level": 2,
        "wordCount": 75
      },
      {
        "id": "creating-complex-layouts-with-multiple-shapes",
        "title": "Creating Complex Layouts with Multiple Shapes",
        "level": 2,
        "wordCount": 55
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 63
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 174
      }
    ],
    "totalWordCount": 1491,
    "estimatedReadingTime": 360000,
    "title": "css_shapes_and_exclusions",
    "frontmatter": {}
  },
  "public\\content\\css\\advanced_styling\\before_and_after.md": {
    "path": "public\\content\\css\\advanced_styling\\before_and_after.md",
    "sections": [
      {
        "id": "css-content-generation-with-before-and-after",
        "title": "CSS Content Generation with ::before and ::after",
        "level": 1,
        "wordCount": 42
      },
      {
        "id": "what-are-pseudo-elements",
        "title": "What Are Pseudo-elements?",
        "level": 2,
        "wordCount": 87
      },
      {
        "id": "the-fundamental-concept-of-before-and-after",
        "title": "The Fundamental Concept of ::before and ::after",
        "level": 2,
        "wordCount": 76
      },
      {
        "id": "the-essential-content-property",
        "title": "The Essential content Property",
        "level": 2,
        "wordCount": 61
      },
      {
        "id": "basic-anatomy-of-before-and-after",
        "title": "Basic Anatomy of ::before and ::after",
        "level": 2,
        "wordCount": 32
      },
      {
        "id": "types-of-content-values",
        "title": "Types of Content Values",
        "level": 2,
        "wordCount": 202
      },
      {
        "id": "styling-before-and-after-elements",
        "title": "Styling ::before and ::after Elements",
        "level": 2,
        "wordCount": 110
      },
      {
        "id": "important-display-characteristics",
        "title": "Important Display Characteristics",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "positioning-before-and-after",
        "title": "Positioning ::before and ::after",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "creating-decorative-elements",
        "title": "Creating Decorative Elements",
        "level": 2,
        "wordCount": 35
      },
      {
        "id": "creating-complex-shapes",
        "title": "Creating Complex Shapes",
        "level": 2,
        "wordCount": 34
      },
      {
        "id": "creating-overlays-and-effects",
        "title": "Creating Overlays and Effects",
        "level": 2,
        "wordCount": 29
      },
      {
        "id": "clearfix-technique",
        "title": "Clearfix Technique",
        "level": 2,
        "wordCount": 30
      },
      {
        "id": "limitations-of-before-and-after",
        "title": "Limitations of ::before and ::after",
        "level": 2,
        "wordCount": 67
      },
      {
        "id": "accessibility-considerations",
        "title": "Accessibility Considerations",
        "level": 2,
        "wordCount": 65
      },
      {
        "id": "browser-support-and-compatibility",
        "title": "Browser Support and Compatibility",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "practical-example-custom-checkbox",
        "title": "Practical Example: Custom Checkbox",
        "level": 2,
        "wordCount": 44
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 124
      }
    ],
    "totalWordCount": 1159,
    "estimatedReadingTime": 300000,
    "title": "before_and_after",
    "frontmatter": {}
  },
  "public\\content\\css\\advanced_styling\\attribute_selectors.md": {
    "path": "public\\content\\css\\advanced_styling\\attribute_selectors.md",
    "sections": [
      {
        "id": "css-attribute-selectors-from-first-principles",
        "title": "CSS Attribute Selectors: From First Principles",
        "level": 1,
        "wordCount": 57
      },
      {
        "id": "understanding-html-attributes-the-foundation",
        "title": "Understanding HTML Attributes: The Foundation",
        "level": 2,
        "wordCount": 109
      },
      {
        "id": "the-basic-attribute-selector-attr",
        "title": "The Basic Attribute Selector [attr]",
        "level": 2,
        "wordCount": 90
      },
      {
        "id": "exact-match-attribute-selector-attrvalue",
        "title": "Exact Match Attribute Selector [attr=\"value\"]",
        "level": 2,
        "wordCount": 59
      },
      {
        "id": "string-manipulation-attribute-selectors",
        "title": "String-Manipulation Attribute Selectors",
        "level": 2,
        "wordCount": 286
      },
      {
        "id": "case-sensitivity-in-attribute-selectors",
        "title": "Case-Sensitivity in Attribute Selectors",
        "level": 2,
        "wordCount": 42
      },
      {
        "id": "combining-attribute-selectors-with-other-selectors",
        "title": "Combining Attribute Selectors with Other Selectors",
        "level": 2,
        "wordCount": 38
      },
      {
        "id": "chaining-multiple-attribute-selectors",
        "title": "Chaining Multiple Attribute Selectors",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "real-world-uses-for-attribute-selectors",
        "title": "Real-World Uses for Attribute Selectors",
        "level": 2,
        "wordCount": 192
      },
      {
        "id": "practical-example-building-a-complete-component",
        "title": "Practical Example: Building a Complete Component",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 152
      },
      {
        "id": "browser-compatibility",
        "title": "Browser Compatibility",
        "level": 2,
        "wordCount": 78
      },
      {
        "id": "combining-with-modern-css-features",
        "title": "Combining with Modern CSS Features",
        "level": 2,
        "wordCount": 33
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 178
      }
    ],
    "totalWordCount": 1398,
    "estimatedReadingTime": 360000,
    "title": "attribute_selectors",
    "frontmatter": {}
  },
  "public\\content\\css\\advanced_styling\\advanced_selectors_and_combinators.md": {
    "path": "public\\content\\css\\advanced_styling\\advanced_selectors_and_combinators.md",
    "sections": [
      {
        "id": "advanced-css-selectors-and-combinators-from-first-principles",
        "title": "Advanced CSS Selectors and Combinators: From First Principles",
        "level": 1,
        "wordCount": 68
      },
      {
        "id": "understanding-the-css-selection-model",
        "title": "Understanding the CSS Selection Model",
        "level": 2,
        "wordCount": 113
      },
      {
        "id": "basic-selector-recap",
        "title": "Basic Selector Recap",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "combinators-selecting-based-on-relationships",
        "title": "Combinators: Selecting Based on Relationships",
        "level": 2,
        "wordCount": 228
      },
      {
        "id": "compound-selectors-combining-multiple-criteria",
        "title": "Compound Selectors: Combining Multiple Criteria",
        "level": 2,
        "wordCount": 37
      },
      {
        "id": "attribute-selectors-targeting-elements-by-their-attributes",
        "title": "Attribute Selectors: Targeting Elements by Their Attributes",
        "level": 2,
        "wordCount": 102
      },
      {
        "id": "pseudo-classes-selecting-elements-based-on-state",
        "title": "Pseudo-Classes: Selecting Elements Based on State",
        "level": 2,
        "wordCount": 185
      },
      {
        "id": "pseudo-elements-creating-virtual-elements",
        "title": "Pseudo-Elements: Creating Virtual Elements",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "negation-and-relational-pseudo-classes",
        "title": "Negation and Relational Pseudo-Classes",
        "level": 2,
        "wordCount": 47
      },
      {
        "id": "the-has-parent-selector-a-game-changer",
        "title": "The :has() Parent Selector: A Game Changer",
        "level": 2,
        "wordCount": 62
      },
      {
        "id": "combining-all-these-techniques",
        "title": "Combining All These Techniques",
        "level": 2,
        "wordCount": 43
      },
      {
        "id": "real-world-application-building-a-card-component",
        "title": "Real-World Application: Building a Card Component",
        "level": 2,
        "wordCount": 52
      },
      {
        "id": "performance-considerations",
        "title": "Performance Considerations",
        "level": 2,
        "wordCount": 99
      },
      {
        "id": "browser-compatibility",
        "title": "Browser Compatibility",
        "level": 2,
        "wordCount": 72
      },
      {
        "id": "practical-examples",
        "title": "Practical Examples",
        "level": 2,
        "wordCount": 22
      },
      {
        "id": "conclusion",
        "title": "Conclusion",
        "level": 2,
        "wordCount": 199
      }
    ],
    "totalWordCount": 1438,
    "estimatedReadingTime": 360000,
    "title": "advanced_selectors_and_combinators",
    "frontmatter": {}
  }
}